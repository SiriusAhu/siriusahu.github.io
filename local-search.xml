<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>「LUT」02 zsh-更漂亮的terminal</title>
    <link href="/2023/06/14/LUT-02-zsh/"/>
    <url>/2023/06/14/LUT-02-zsh/</url>
    
    <content type="html"><![CDATA[<h2 id="Greetings"><a href="#Greetings" class="headerlink" title="Greetings!"></a>Greetings!</h2><p>Yaho~ 阿乎です！(&gt; ▽ &lt;) &#x2F;~</p><p>上一节的结尾我提到这样一句话：</p><blockquote><p>想必接下来一段时间里你用的最多的命令就是<code>reboot</code>了吧</p></blockquote><p>我们为了查看<code>grub</code>的效果需要重启计算机，而重启的一种方式就是在<code>terminal</code>里使用<code>reboot</code>命令进行重启(或者关机:<code>poweroff</code>).</p><p>那么现在使用默认快捷键<code>Ctrl+Alt+T</code>打开你的terminal，记住它现在的样子！</p><p>这一节会教你如何将你的<code>terminal</code>变成下面这个样子：</p><p><img src="/img/LUT/02-01.png" alt="Beautified Terminal"></p><h2 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h2><blockquote><p>可以使用我的脚本：<a href="https://github.com/SiriusAhu/zsh-script">Ahu的脚本</a></p></blockquote><ol><li>为了实现这样的效果，我们需要安装一些必要的软件包。以下是清单：</li></ol><table><thead><tr><th>packages</th><th>description</th></tr></thead><tbody><tr><td><code>zsh</code></td><td>一个强大的shell</td></tr><tr><td><code>oh-my-zsh</code></td><td>一个强大的zsh配置框架</td></tr></tbody></table><ol start="2"><li>然后为了让<code>zsh</code>的效果更好，我们还需要安装一些主题与插件：</li></ol><table><thead><tr><th>theme&#x2F;plugins</th><th>description</th></tr></thead><tbody><tr><td><code>powerlevel10k</code></td><td>一个强大、美观的主题（有字体要求）</td></tr><tr><td><code>zsh-autosuggestions</code></td><td>一个自动补全插件</td></tr><tr><td><code>zsh-syntax-highlighting</code></td><td>一个语法高亮插件</td></tr><tr><td><code>zsh-history-substring-search</code></td><td>一个历史命令搜索插件</td></tr><tr><td><code>auto-notify</code></td><td>一个在任务运行结束后自动提醒的插件</td></tr><tr><td><code>you-shoud-use</code></td><td>一个提示最简单的alias的插件</td></tr></tbody></table><ol start="3"><li>最后是安装（设置）调色盘，这里建议直接使用<code>Gogh Scheme</code>来下载各种调色盘。</li></ol><h2 id="1-Install-zsh-oh-my-zsh"><a href="#1-Install-zsh-oh-my-zsh" class="headerlink" title="1. Install zsh &amp; oh-my-zsh"></a>1. Install zsh &amp; oh-my-zsh</h2><h3 id="1-1-zsh"><a href="#1-1-zsh" class="headerlink" title="1.1 zsh"></a>1.1 zsh</h3><p>zsh是一个强大的shell，它可以替代默认的<code>bash</code>，让你的terminal更加强大。</p><p>这一步因系统而异。</p><p>如果是<code>Arch</code>系的发行版，可以直接使用<code>pacman</code>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S zsh<br></code></pre></td></tr></table></figure><p>如果是<code>Debian</code>系的发行版（如<code>Ubuntu</code>,<code>Linux Mint</code>等），可以直接使用<code>apt</code>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install zsh<br></code></pre></td></tr></table></figure><h3 id="1-2-oh-my-zsh"><a href="#1-2-oh-my-zsh" class="headerlink" title="1.2 oh-my-zsh"></a>1.2 oh-my-zsh</h3><p><code>oh-my-zsh</code>是一个强大的<code>zsh</code>配置框架，它可以让你在<code>zsh</code>中使用各种主题与插件。</p><p>其<a href="https://ohmyz.sh/">官网</a>提供了两种安装脚本，一种是使用<code>curl</code>，一种是使用<code>wget</code>，这里我使用<code>curl</code>的脚本：</p><blockquote><p>注意：如果此脚本不能使用，请前往官网查看最新的安装脚本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>在下载后一路选择默认，将zsh设为默认shell即可。</p><h2 id="2-Install-theme-plugins"><a href="#2-Install-theme-plugins" class="headerlink" title="2. Install theme &amp; plugins"></a>2. Install theme &amp; plugins</h2><p>我的脚本包含了下载步骤（包括主题、插件与字体）与配置文件（<code>~/.zshrc</code>）修改，你可以直接使用我的脚本来安装。</p><p>具体的修改内容可以参考脚本的<code>github仓库</code>。</p><blockquote><p>.zshrc即为zsh的配置文件，位于<code>~/.zshrc</code>。类似的，bash的配置文件为<code>.bashrc</code>，位于<code>~/.bashrc</code>。</p></blockquote><h3 id="2-1-powerlevel10k"><a href="#2-1-powerlevel10k" class="headerlink" title="2.1 powerlevel10k"></a>2.1 powerlevel10k</h3><p><code>powerlevel10k</code>是实现主要的颜色与字体效果的主题，它需要一些特殊的字体才能正常显示。</p><p>建议访问<a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a>的github页面查看最新的安装方法。（或者直接我提供的脚本）</p><p><a href="https://github.com/romkatv/powerlevel10k/blob/master/font.md">字体描述</a></p><p>需要安装的是以<code>MesloLGS NF</code>开头的4种字体，使用一般的<code>Linux发行版</code>都可以直接双击安装。</p><blockquote><p>注意：对于大部分的<code>terminal</code>（如：<code>gnome-terminal</code>）我们需要对其<code>profile</code>单独进行设置以应用字体！请自行搜索各种<code>terminal</code>的设置方法。</p></blockquote><h3 id="2-2-plugins"><a href="#2-2-plugins" class="headerlink" title="2.2 plugins"></a>2.2 plugins</h3><p>这些插件只需在配置文件中设置好即可启用啦。</p><h2 id="3-Install-color-scheme"><a href="#3-Install-color-scheme" class="headerlink" title="3. Install color scheme"></a>3. Install color scheme</h2><p>虽然自己调色也是一种不错的选择，但是我还是推荐使用<code>Gogh Scheme</code>来下载并应用各种调色盘。</p><blockquote><p>Gogh Scheme: Color Scheme for Gnome Terminal, Pantheon Terminal, Tilix, and XFCE4 Terminal</p></blockquote><p><code>Gogh Scheme</code>只有一句命令，我们可以通过这句命令来选择自己喜欢的调色盘进行下载与安装。（<a href="https://gogh-co.github.io/Gogh/">Gogh Scheme官网</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c  <span class="hljs-string">&quot;<span class="hljs-subst">$(wget -qO- https://git.io/vQgMr)</span>&quot;</span> <br></code></pre></td></tr></table></figure><p>运行这行命令后我们会看到一个很长的列表，我们可以通过查看<a href="https://gogh-co.github.io/Gogh/">Gogh Scheme官网</a>的方式来预览各种调色盘。</p><p>按照脚本的提示进行安装即可。</p><blockquote><p>如果使用的是非系统自带的terminal,Gogh可能会失效。</p></blockquote><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>至此，我们已经完成了<code>zsh</code>的安装与配置，以及<code>powerlevel10k</code>的安装与配置，以及<code>Gogh Scheme</code>的安装与配置。<br>希望你能找到自己最喜欢的终端美化方案！:tada:</p><blockquote><p>上一节： <a href="/2023/05/12/LUT-01-grub/" title="「LUT」01 Grub-电脑启动引导">「LUT」01 Grub-电脑启动引导</a></p></blockquote><hr><p>如果在阅读过程中发现任何问题，欢迎在评论区留言（如果开放了的话），或者给我发邮件：<a href="mailto:SiriusLLLUUU@outlook.com">阿乎的邮箱</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Linux Useful Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>tricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「LUT」01 Grub-电脑启动引导</title>
    <link href="/2023/05/12/LUT-01-grub/"/>
    <url>/2023/05/12/LUT-01-grub/</url>
    
    <content type="html"><![CDATA[<h2 id="Greetings"><a href="#Greetings" class="headerlink" title="Greetings!"></a>Greetings!</h2><p>Yaho~ 阿乎です！(&gt; ▽ &lt;) &#x2F;~</p><p>如果你是双系统用户，那么在安装新系统之后要解决的第一个问题就是如何切换双系统了。</p><p><code>Grub</code>是解决这个问题的通用选择，它是一个引导菜单，可以让你在开机的时候选择进入哪个系统。</p><p>这一节我们就来学习如何安装、配置与美化<code>Grub</code>。</p><h2 id="Install-Grub（with-grub-customizer）"><a href="#Install-Grub（with-grub-customizer）" class="headerlink" title="Install Grub（with grub-customizer）"></a>Install Grub（with grub-customizer）</h2><p>由于<code>Linux Mint</code>默认安装了<code>Grub</code>，所以我们只需要安装一个<code>grub-customizer</code>用于美化<code>Grub</code>即可。</p><ul><li>添加下载源这一步很重要！如果不添加下载源，那么<code>apt</code>很可能无法找到<code>grub-customizer</code>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo add-apt-repository ppa:danielrichter2007/grub-customizer <span class="hljs-comment"># 添加grub-customizer的下载源</span><br>sudo apt update <span class="hljs-comment"># 更新源</span><br>sudo apt install grub-customizer <span class="hljs-comment"># 安装grub-customizer</span><br></code></pre></td></tr></table></figure><p>安装完成后，我们就可以按<code>Super</code>键（即<code>Windows</code>键）打开<code>grub-customizer</code>了。</p><ul><li>注意：有的时候<code>Linux Mint</code>会被识别为<code>Ubuntu</code>，如果这影响了你的使用，那么你可以在<code>grub-customizer</code>中修改<code>Ubuntu</code>为<code>Linux Mint</code>。（包括Grub主题的图标名称）这是我目前唯一的解决方法。</li></ul><h2 id="Config-Grub"><a href="#Config-Grub" class="headerlink" title="Config Grub"></a>Config Grub</h2><h3 id="Change-Default-System"><a href="#Change-Default-System" class="headerlink" title="Change Default System"></a>Change Default System</h3><h2 id="Beautify-Grub"><a href="#Beautify-Grub" class="headerlink" title="Beautify Grub"></a>Beautify Grub</h2><p>我们可以直接在<code>grub-customizer</code>中修改<code>Grub</code>的各种设置，也可以通过安装主题来美化<code>Grub</code>。</p><p>我们只需要打开<code>grub-customizer</code>，然后到<code>Appearance settings</code>中单独修改<code>Grub</code>的各种设置。</p><p>唯一需要注意的就是请在进行任何修改后点击<code>save</code>保存设置，否则你的修改将不会生效。</p><p>这里就不具体演示单独修改了。</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p><code>Gnome-look</code>上有很多<code>Grub</code>主题，我们可以到<a href="https://www.gnome-look.org/browse?cat=109&ord=latest">这个网站</a>里寻找自己喜欢的主题进行安装。</p><ul><li>注意：每个主题的安装方法可能不同，有一些提供了安装脚本，而另一些必须要手动安装，所以<strong>请仔细阅读主题自身的安装文档</strong>。</li></ul><p><img src="/img/LUT/01-01.png" alt="Gnome-look:Grub themes"></p><p>这里我们以<code>Distro Grub Themes</code>为例，来介绍一下主题的安装方法。</p><ul><li><a href="https://www.gnome-look.org/p/1482847">Gnome-look: Distro Grub Themes</a></li><li><a href="https://github.com/AdisonCavani/distro-grub-themes">Github: Distro Grub Themes</a></li></ul><h3 id="安装Distro-Grub-Themes"><a href="#安装Distro-Grub-Themes" class="headerlink" title="安装Distro Grub Themes"></a>安装Distro Grub Themes</h3><p>根据其<code>github</code>上的<code>readme</code>文件，我们跳转到了其<a href="https://k1ng.dev/distro-grub-themes/installation#install-a-pre-made-theme-with-grub-customizer">安装文档</a>（一般来说，主题的安装文档都会在其<code>github</code>上，这是个例外）。</p><p>首先，克隆<code>github</code>上的<code>repo</code>到本地（注意：这里的<code>&lt;path&gt;</code>是你想要克隆到的本地目录，为空则默认为当前目录）。</p><ul><li>如果你打算尝试多个主题，那么我建议你单独创建一个文件夹用于存放所有主题的文件夹。</li><li>如果<code>git clone</code>失败或者网速太慢，那么你可以直接下载这个<code>repo</code>的压缩包，然后解压到本地。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/AdisonCavani/distro-grub-themes.git &lt;path&gt; <span class="hljs-comment"># 克隆repo到本地&lt;path&gt;目录</span><br></code></pre></td></tr></table></figure><p>打开<code>grub-customizer</code>，在<code>Appearance settings</code>中选择<code>custom resolution</code>，并输入你的屏幕分辨率（这里我输入的是<code>1920x1080</code>）。</p><p>然后点击加号，将右下角的<code>Archieve files</code>改为<code>All files</code>，然后找到我们之前克隆到本地的<code>repo</code>（默认打开时的路径可能在<code>/root</code>目录下，你或许需要手动切换到<code>/home</code>下去找到你的<code>repo</code>）。</p><p><img src="/img/LUT/01-02.png" alt="Mint Grub"></p><p>在这个<code>repo</code>中有一个<code>themes</code>文件夹，里面存放了所有的主题，我们选择一个主题文件（比如<code>mint.tar</code>）双击它即可。</p><p>之后在<code>grub-customizer</code>中点击<code>save</code>保存设置，然后重启电脑即可看到新的<code>Grub</code>主题了。</p><p><img src="/img/LUT/01-03.jpg" alt="Mint Grub"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Congratulations! 现在你已经学会了如何安装<code>Grub</code>与使用<code>Distro Grub Themes</code>主题啦！</p><p>如果你还不满足于此，那么你可以试试<code>Gnome-look</code>寻找更多的<code>Grub</code>主题，甚至尝试自己制作主题！</p><p>想必接下来一段时间里你用的最多的命令就是<code>reboot</code>了吧（笑）</p><p>Have fun! :wink:</p><blockquote><p>下一节： <a href="/2023/06/14/LUT-02-zsh/" title="「LUT」02 zsh-更漂亮的terminal">「LUT」02 zsh-更漂亮的terminal</a></p></blockquote><hr><p>如果在阅读过程中发现任何问题，欢迎在评论区留言（如果开放了的话），或者给我发邮件：<a href="mailto:SiriusLLLUUU@outlook.com">阿乎的邮箱</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Linux Useful Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>tricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」05 Hexo中的Markdown特殊用法</title>
    <link href="/2023/05/08/R-EB-05-Hexo-Markdown/"/>
    <url>/2023/05/08/R-EB-05-Hexo-Markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hi, 阿乎です！(&gt; ▽ &lt;) &#x2F;~</p><p>在上一节中，我们已经将我们的博客网站部署到了<code>Github Page</code>上。</p><p>那么现在，我们需要做的事就是编写一些博客文章了。</p><p><code>Hexo</code>支持使用<code>Markdown</code>来编写博客文章，关于<code>Markdown</code>的基本用法在此就不多赘述。</p><p>这一节关键要看一些<code>Hexo</code>中的<code>Markdown</code>特殊用法。</p><h2 id="1-图片"><a href="#1-图片" class="headerlink" title="1. 图片"></a>1. 图片</h2><p><code>Hexo</code>中的图片引用与<code>Markdown</code>中的图片引用一样，都是使用<code>![]()</code>。</p><p>不过<code>Hexo</code>中<strong>本地引用</strong>的引用规则与<code>Markdown</code>中的引用规则有所不同。</p><h3 id="1-1-从source-pic文件夹中引用图片"><a href="#1-1-从source-pic文件夹中引用图片" class="headerlink" title="1.1 从source&#x2F;pic文件夹中引用图片"></a>1.1 从source&#x2F;pic文件夹中引用图片</h3><p>一般来讲，我们会在<code>markdown</code>文件的同级目录下创建一个<code>img</code>文件夹，然后将图片放在<code>img</code>文件夹中，然后在<code>markdown</code>文件中使用<code>![]()</code>来引用图片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── blog01.md<br>└── img<br>    └── pic01.jpg<br></code></pre></td></tr></table></figure><p>如果我想在<code>blog01.md</code>中引用<code>img</code>文件夹中的<code>pic01.jpg</code>，那么我可以这样写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">my picture</span>](<span class="hljs-link">img/pic01.jpg</span>)<br></code></pre></td></tr></table></figure><p>但是，很可惜，这种写法在<code>Hexo</code>中是<strong>无效的</strong>。</p><p>我们需要把路径改写为：（加上一个<code>/</code>）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">my picture</span>](<span class="hljs-link">/img/pic01.jpg</span>)<br></code></pre></td></tr></table></figure><p>具体原因不详，不过由于<code>hexo g</code>命令会将<code>source</code>文件夹中的内容复制到<code>public</code>文件夹中，所以我们的图片是会转移到<code>public</code>文件夹中的。</p><h3 id="1-2-「替代方案1」开启post-asset-folder功能-复杂"><a href="#1-2-「替代方案1」开启post-asset-folder功能-复杂" class="headerlink" title="1.2 「替代方案1」开启post_asset_folder功能 - 复杂"></a>1.2 「替代方案1」开启<code>post_asset_folder</code>功能 - 复杂</h3><p><code>Hexo</code>配置文件中有一个默认关闭的功能<code>post_asset_folder</code>，它允许我们在<code>markdown</code>文件的同级目录下创建一个<code>同名文件夹</code>，然后将图片放在<code>同名文件夹</code>中，然后在<code>markdown</code>文件中使用<code>![]()</code>来引用图片。</p><p>然而，图片路径的写法与之前的不同，我们只能写图片的文件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── blog01.md<br>└── blog01<br>    └── pic01.jpg<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">my picture</span>](<span class="hljs-link">pic01.jpg</span>)<br></code></pre></td></tr></table></figure><p>虽然终于可以显示图片了，但是如果我们为每一个博客都创建一个<code>同名文件夹</code>，那么我们的<code>source</code>文件夹会变得非常的杂乱（虽然我一开始也一直在用这种方法:sweat_smile:）。</p><h3 id="1-3-「替代方案2」使用public-img文件夹中的图片-推荐"><a href="#1-3-「替代方案2」使用public-img文件夹中的图片-推荐" class="headerlink" title="1.3 「替代方案2」使用public/img文件夹中的图片 - 推荐"></a>1.3 「替代方案2」使用<code>public/img</code>文件夹中的图片 - 推荐</h3><p>但是！就在刚刚（没错，就是为了写这一篇文章，我刚刚去测试了许多种图片引用方法），我发现我们的可以直接引用<code>public</code>文件夹中的图片！</p><p>这使用的是一种绝对引用，我们可以这样写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">my picture</span>](<span class="hljs-link">/img/pic01.jpg</span>)<br></code></pre></td></tr></table></figure><p>这样的话我们只需要将图片放在<code>public/img</code>文件夹中，就可以方便地引用了。</p><blockquote><p>注意：<code>public</code>文件夹会被<code>hexo clean</code>清空。我的解决方案是创建一个脚本用于将复制我存储图片的文件夹到<code>public</code>文件夹中。<br>我把<code>hexo g</code>和这个脚本作为一个<code>alias</code>放在了<code>.zshrc</code>中，这样我每次<code>hexo g</code>的时候，图片就会自动复制到<code>public</code>文件夹中了。</p><p>（事实上我会先把文章写在博客文件夹的外面，然后用另一个脚本用于同步所有文章到<code>source</code>文件夹中。我还有一个用于同步<code>config</code>设置的脚本。当然，这些都不是完全必要的，我只是觉得这样更方便一些。）</p></blockquote><blockquote><ul><li><code>zsh</code>是一种类似于<code>Linux</code>默认终端<code>bash</code>的终端，而<code>.zshrc</code>即<code>zsh</code>的配置文件。</li><li><code>alias</code>是<code>Linux</code>中的一种特有的命令，它允许你在你使用的终端中创建一个自定义的命令（修改配置文件），让你更方便地使用你的命令（组合）。</li></ul></blockquote><h3 id="1-4-弊端"><a href="#1-4-弊端" class="headerlink" title="1.4 弊端"></a>1.4 弊端</h3><p>无论使用以上哪一种方法，都有一个弊端，那就是我们无法在<code>markdown</code>文件中预览图片。</p><p>不过既然我们最终都要将博客发布，那么我们完全可以使用<code>hexo s</code>预览其本地效果，这也方便我们检查博客在网页上的显示效果。</p><h3 id="1-5-非markdown语法的图片引用"><a href="#1-5-非markdown语法的图片引用" class="headerlink" title="1.5 非markdown语法的图片引用"></a>1.5 非<code>markdown</code>语法的图片引用</h3><p><code>Hexo</code>还有一种以<code>&#123;% asset_img [图片名] [图片描述] %&#125;</code>的方式来引用图片的方法，但是这种方法在<code>markdown</code>文件中是无效的，只能在<code>html</code>文件中使用，所以我不喜欢这种方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% asset_img pic01.jpg my picture %&#125;<br></code></pre></td></tr></table></figure><h2 id="2-如何使用emoji"><a href="#2-如何使用emoji" class="headerlink" title="2. 如何使用emoji"></a>2. 如何使用<code>emoji</code></h2><p>我平时使用<code>VSCode</code>来编写<code>markdown</code>文件，有时也会在里面加一些<code>emoji</code>。:smile:</p><p>平时在逛<code>Github</code>的时候，你也能在一些<code>README.md</code>文件中看到一些<code>emoji</code>。:books:</p><p>我本以为既然我们使用了<code>Github Page</code>，那么我们也可以在我们的博客中使用<code>emoji</code>，但是我发现并不是这样的。:sweat:</p><p>我在网上搜索了一下，给出的解决方案是：</p><ol><li>卸载原有的<code>hexo-renderer-marked</code>插件</li><li>安装<code>markdown-it-emoji</code>和<code>hexo-renderer-markdown-it</code>插件</li></ol><h3 id="2-1-卸载与安装插件"><a href="#2-1-卸载与安装插件" class="headerlink" title="2.1 卸载与安装插件"></a>2.1 卸载与安装插件</h3><p>在你的博客根目录下，使用<code>npm</code>进行卸载与安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm un hexo-renderer-marked --save<br>npm i hexo-renderer-markdown-it markdown-it-emoji --save<br></code></pre></td></tr></table></figure><h3 id="2-2-修改-config-yml文件"><a href="#2-2-修改-config-yml文件" class="headerlink" title="2.2 修改_config.yml文件"></a>2.2 修改<code>_config.yml</code>文件</h3><p>在<code>_config.yml</code>文件中，添加关于<code>markdown-it-emoji</code>的配置。（可以直接粘贴在最下方）</p><p>下面是我自己的配置，具体设置请参考<a href="https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki">官方文档</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Markdown-it config</span><br><span class="hljs-comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span><br><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">linkify:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">quotes:</span> <span class="hljs-string">&#x27;“”‘’&#x27;</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-abbr</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-footnote</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-ins</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sub</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sup</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-emoji</span><br>    <br>  <span class="hljs-attr">anchors:</span><br>    <span class="hljs-attr">level:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">collisionSuffix:</span> <span class="hljs-string">&#x27;v&#x27;</span><br>    <span class="hljs-comment"># If `true`, creates an anchor tag with a permalink besides the heading.</span><br>    <span class="hljs-attr">permalink:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">permalinkClass:</span> <span class="hljs-string">header-anchor</span><br>    <span class="hljs-attr">permalinkSide:</span> <span class="hljs-string">&#x27;right&#x27;</span><br>    <span class="hljs-attr">permalinkSymbol:</span> <span class="hljs-string">&#x27;  ~&#x27;</span><br></code></pre></td></tr></table></figure><p>配置好这些之后，我们就可以愉快地在博客中使用<code>emoji</code>了。:tada:</p><ul><li>如果你重新<code>hexo g &amp;&amp; hexo s</code>仍然无法预览<code>emoji</code>，那么请尝试重启浏览器或者对你要预览的文件进行修改。</li></ul><h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>现在，我们可以愉快地在博客中使用<code>emoji</code>了。:tada:</p><p>在Hexo中使用emoji，为你的博客增添更多乐趣吧！:smiley::heart:</p><p>下一节，更换主题，让我们的博客更加美观吧！:sunglasses:</p><p>玩的开心！:wink:</p><blockquote><p>上一节： <a href="/2023/05/07/R-EB-04-Push-to-github/" title="「建站」04 将Hexo部署到Github Page">「建站」04 将Hexo部署到Github Page</a></p></blockquote><hr><p>如果在阅读过程中发现任何问题，欢迎在评论区留言（如果开放了的话），或者给我发邮件：<a href="mailto:SiriusLLLUUU@outlook.com">阿乎的邮箱</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」04 将Hexo部署到Github Page</title>
    <link href="/2023/05/07/R-EB-04-Push-to-github/"/>
    <url>/2023/05/07/R-EB-04-Push-to-github/</url>
    
    <content type="html"><![CDATA[<!-- # 将Hexo部署到Github Page- 本文编辑时间：2023.05.07 --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hi, 阿乎です！(&gt; ▽ &lt;) &#x2F;~</p><p>在上一节中，我们已经安装好了<code>Hexo</code>并在本地预览了我们的博客网站。</p><p>那么在编辑我们的博客之前，不妨先将它部署到<code>Github Page</code>上吧！（本节不涉及域名解析等自定义域名的内容）</p><blockquote><p><code>Github Page</code>是<code>Github</code>提供的一个静态网站托管服务，我们可以将我们的博客网站部署到<code>Github Page</code>上，这样我们就可以通过<code>Github Page</code>来访问我们的博客网站了。</p></blockquote><h2 id="0-注意"><a href="#0-注意" class="headerlink" title="0. 注意"></a>0. 注意</h2><p>我会用<code>&lt;&lt;&gt;&gt;</code>来表示每个人情况不同的内容。（如每个人的路径与邮箱）</p><h2 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1. 修改配置文件"></a>1. 修改配置文件</h2><p>我们需要修改<code>Hexo</code>的配置文件<code>_config.yml</code>，让<code>Hexo</code>知道我们要将博客网站部署到<code>Github Page</code>上。（也可以顺便修改一下博客网站的标题、描述等信息）</p><blockquote><p>具体的参数信息可以参考<a href="https://hexo.io/zh-cn/docs/configuration">Hexo官网</a>。</p></blockquote><h3 id="1-1-Deployment"><a href="#1-1-Deployment" class="headerlink" title="1.1 Deployment"></a>1.1 Deployment</h3><p>首先我们找到<code>Deployment</code>这一项（在最下方），然后对其进行补充与修改。</p><blockquote><p>注释里面已经给了官<a href="https://hexo.io/docs/one-command-deployment">网链接啦</a></p></blockquote><p>我们要将<code>deploy</code>中的<code>type</code>改为<code>git</code>，并且将<code>repo</code>改为我们的<code>Github</code>仓库地址。（地址可以通过<code>Github</code>仓库的<code>Code</code>按钮来获取）</p><p><img src="/img/R_BE/04-1.png" alt="Code-HTTPS"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/&lt;&lt;你的Github用户名&gt;&gt;/&lt;&lt;你的仓库地址&gt;&gt;.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：一些老教程会将<code>branch</code>设置为<code>master</code>，但是从2020年开始，<code>Github</code>已经将默认分支改为<code>main</code>了，所以我们需要将<code>branch</code>设置为<code>main</code>。</p><p><em>向制作老教程的前辈们致敬！</em></p></blockquote><h3 id="1-2-URL"><a href="#1-2-URL" class="headerlink" title="1.2 URL"></a>1.2 URL</h3><p>然后我们需要将<code>Hexo</code>的<code>_config.yml</code>文件中的<code>url</code>修改为我们的<code>Github Page</code>地址。</p><p>找到<code>url</code>这一项（靠近最上方），然后将其修改为<code>https://&lt;&lt;你的Github用户名&gt;&gt;.github.io/&lt;&lt;你的仓库地址&gt;&gt;/</code>即可。（或者说<code>https://&lt;&lt;你的仓库名&gt;&gt;.git</code>）</p><blockquote><p>也强烈推荐通过注释里给出的<a href="https://username.github.io/project">官网链接</a>来了解更多配置信息。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://&lt;&lt;你的仓库名&gt;&gt;.git</span><br></code></pre></td></tr></table></figure><h3 id="1-3-其他（optional）"><a href="#1-3-其他（optional）" class="headerlink" title="1.3 *其他（optional）"></a>1.3 *其他（optional）</h3><p>我们也可以修改一下博客网站的标题、描述等信息。</p><p>找到最上方的<code>Site</code>这一项，然后按需修改即可。</p><ul><li>注意，这里的<code>language</code>指的是网站的语言，而不是博客的语言。具体填入什么需要根据你所选的<code>主题</code>来定。（主题会在下一节中介绍，如果你不知道该填什么，可以先留着默认的<code>en</code>）</li><li><code>timezone</code>指的是时区，对于中国大陆来说，可以填<code>Asia/Shanghai</code>。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&lt;&lt;你的博客标题&gt;&gt;</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&lt;&lt;你的博客副标题&gt;&gt;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&lt;&lt;你的博客描述&gt;&gt;</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">&lt;&lt;你的博客关键词&gt;&gt;</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">&lt;&lt;你的名字&gt;&gt;</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">en</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">Asia/Shanghai</span><br></code></pre></td></tr></table></figure><h2 id="2-安装hexo-deployer-git（不是apt安装的git）"><a href="#2-安装hexo-deployer-git（不是apt安装的git）" class="headerlink" title="2. 安装hexo-deployer-git（不是apt安装的git）"></a>2. 安装<code>hexo-deployer-git</code>（不是apt安装的git）</h2><p>我们需要安装<code>hexo-deployer-git</code>这个插件，来实现将博客网站部署到<code>Github Page</code>上。</p><ul><li>如果不安装这个插件直接部署的话会报错<code>Deployer not found: git</code>。（在官方文档中也提到这个bug，给出的解决方案就是安装这个插件）</li></ul><p>将路径切换到博客网站的根目录下，然后执行以下命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h2 id="3-配置git"><a href="#3-配置git" class="headerlink" title="3. 配置git"></a>3. 配置git</h2><p>距离部署已经不远啦！我们只需要配置一下<code>git</code>就可以啦！</p><ul><li>如果不配置直接进行部署的话，会出现一个<code>*** Please tell me who you are.</code>的提示，可以根据这个提示下给出的命令来配置<code>git</code>。</li></ul><p>也就是下面这两条命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&lt;&lt;你的Github用户名&gt;&gt;&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;&lt;&lt;你的Github邮箱&gt;&gt;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-保存github-token"><a href="#4-保存github-token" class="headerlink" title="4. 保存github token"></a>4. 保存github token</h2><blockquote><p>从2021年8月13日开始，Github将不再接受使用密码进行git操作，所以我们需要使用token来进行git操作。</p></blockquote><p>打开你的<code>Github</code>主页，然后点击右上角的头像，选择<code>Settings</code>，选择最下方的<code>Developer settings</code>。</p><p><img src="/img/R_BE/04-2.png" alt="Developer settings"></p><p>然后选择左侧的<code>Personal access tokens</code>，点击右上角的<code>Generate new token</code>。</p><ul><li><strong>注意，这个token只会显示一次，之后你再打开这个界面就无法再查看它了。<u>请务必将它保存在便于你访问且安全的地方！</u>之后我们每一次更新博客网站都需要用它作为密码来验证。</strong></li></ul><p><img src="/img/R_BE/04-3.png" alt="Generate new token"></p><p>有关<code>token</code>的配置，我们可以将其期限设置为<code>No expiration</code>（当然，<code>Github</code>强烈建议我们设置一个有期限的token，这里根据自己的需求来定）。然后对于<code>Select scopes</code>，我们最低限度只需要勾选<code>repo</code>即可。</p><h2 id="5-部署与更新"><a href="#5-部署与更新" class="headerlink" title="5. 部署与更新"></a>5. 部署与更新</h2><p>让我们先回到博客网站的根目录下。</p><p>接下来要介绍平时更新博客时常用的几个命令。</p><ul><li><p><code>hexo g</code>(<code>hexo generate</code>)：生成静态文件（public文件夹）。</p></li><li><p><code>hexo d</code>(<code>hexo deploy</code>)：部署网站到<code>Github Page</code>上。</p></li><li><p><code>hexo cl</code>(<code>hexo clean</code>)：清除缓存文件（db.json）和已生成的静态文件（public文件夹）。（它不会删除<code>source</code>文件夹中的文件，所以不用担心会误删文章）</p><ul><li>我们通过<code>hexo d</code>命令部署网站时，同步到<code>Github</code>仓库的文件夹就是<code>public</code>文件夹。</li></ul></li><li><p><code>hexo s</code>(<code>hexo server</code>)：启动本地服务器，用于预览网站。（默认端口为<code>4000</code>，可以通过<code>hexo s -p &lt;port&gt;</code>来指定端口）</p></li></ul><p>请记住这几个命令，我们每次会经常用到它们。</p><p>以下是一个常用的更新博客的流程，注意，以下所有命令都需要在<strong>博客网站的根目录</strong>下执行！</p><h3 id="5-1-清除缓存文件和已生成的静态文件"><a href="#5-1-清除缓存文件和已生成的静态文件" class="headerlink" title="5.1 清除缓存文件和已生成的静态文件"></a>5.1 清除缓存文件和已生成的静态文件</h3><p>我不确定这一步是否必要，但是我每次更新博客时都会执行这一步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo cl<br></code></pre></td></tr></table></figure><h3 id="5-2-生成静态文件"><a href="#5-2-生成静态文件" class="headerlink" title="5.2 生成静态文件"></a>5.2 生成静态文件</h3><p>将我们对配置的修改、对文章的修改等等都生成为静态文件到<code>public</code>文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><h3 id="5-3-部署网站到Github-Page上"><a href="#5-3-部署网站到Github-Page上" class="headerlink" title="5.3 部署网站到Github Page上"></a>5.3 部署网站到Github Page上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>这一步会要求你输入<code>Github</code>的用户名和密码，然而：</p><ul><li>用户名是区分大小写的！</li><li>这里的密码并不是你的<code>Github</code>密码，而是你在上一步中保存的<code>Github token</code>！</li></ul><p>对了！如果执行<code>hexo d</code>后卡住，没有出现有关<code>Github</code>的提示，那么可以多次尝试<code>Ctrl+C</code>来终止命令，然后再重新执行<code>hexo d</code>。</p><p>如果一切顺利的话，你的博客网站已经部署到<code>Github Page</code>上了。</p><h3 id="5-4-更新"><a href="#5-4-更新" class="headerlink" title="5.4 更新"></a>5.4 更新</h3><p>自此往后，每次更新博客网站时，我们只需要执行以下两步即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>如果遇到一些地方没有同步的情况，可以尝试先执行<code>hexo cl</code>再执行以上两步。</p><h2 id="6-预览网站"><a href="#6-预览网站" class="headerlink" title="6. 预览网站"></a>6. 预览网站</h2><p>在短暂的等待后（部署后需要一定的时间才能在网上访问到你的博客网站），你可以查看你的<code>Github</code>仓库是否更新，也可以直接在浏览器中输入<code>&lt;&lt;你的仓库名&gt;&gt;</code>（<code>&lt;&lt;你的用户名&gt;&gt;.github.io</code>）来访问你的博客网站。</p><p>不出意外的话，你已经可以在网页中浏览到<code>source</code>文件夹中自带的<code>Hello World</code>文章了。</p><p>之后我们的主要工作就是在<code>source</code>文件夹中添加文章啦！</p><h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>Congratulations！:tada:</p><p>至此我们已经了解了部署与更新博客的全部流程啦！\(≧▽≦)&#x2F;~</p><p>那么，下一节！我们来讲讲使用这个框架写博客时会遇到的一些问题吧！（比如如何插入图片、如何使用<code>emoji</code>等等）</p><p>有关域名解析的问题，我想在最后面再提，因为我觉得这只是最后的装点～</p><p>玩的开心！:wink:</p><blockquote><p>上一节： <a href="/2023/05/07/R-EB-03-Hexo-init/" title="「建站」03 使用Hexo初步创建博客网站与本地预览">「建站」03 使用Hexo初步创建博客网站与本地预览</a></p></blockquote><blockquote><p>下一节： <a href="/2023/05/08/R-EB-05-Hexo-Markdown/" title="「建站」05 Hexo中的Markdown特殊用法">「建站」05 Hexo中的Markdown特殊用法</a></p></blockquote><hr><p>如果在阅读过程中发现任何问题，欢迎在评论区留言（如果开放了的话），或者给我发邮件：<a href="mailto:SiriusLLLUUU@outlook.com">阿乎的邮箱</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>hexo</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」03 使用Hexo初步创建博客网站与本地预览</title>
    <link href="/2023/05/07/R-EB-03-Hexo-init/"/>
    <url>/2023/05/07/R-EB-03-Hexo-init/</url>
    
    <content type="html"><![CDATA[<!-- # 使用Hexo初步创建博客网站与本地预览- 本文编辑时间：2023.05.07 --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hi, 阿乎です！(&gt; ▽ &lt;) &#x2F;~</p><p>我们在上一节做了许多工作呢，辛苦啦～ :smile:</p><p>这一节会比上一节有趣一些，我们将会使用<code>Hexo</code>来创建我们的博客网站，并在本地预览它。</p><blockquote><p><code>Hexo</code>是一个基于<code>Node.js</code>的静态博客框架。</p></blockquote><h2 id="1-选一个用于存储博客网站文件的文件夹"><a href="#1-选一个用于存储博客网站文件的文件夹" class="headerlink" title="1. 选一个用于存储博客网站文件的文件夹"></a>1. 选一个用于存储博客网站文件的文件夹</h2><p>这一步很简单，你只需要在你的电脑上选一个<code>风水宝地</code>来存储你的博客网站文件就可以了。比如说我选了<code>~/mystuff/blog</code>。</p><p>之后我们会把所有的博客网站文件都放在这个文件夹里。</p><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h2><blockquote><p>详细步骤我们可以在<code>hexo</code>的<a href="https://hexo.io/zh-cn/index.html">官网</a>上找到。</p></blockquote><p>在任意位置打开你的终端，运行以下命令来安装<code>Hexo</code>：</p><ul><li>这个命令会在你的电脑上全局安装<code>Hexo</code>。</li><li><code>npm</code>是<code>Node.js</code>的包管理器，我们之前使用<code>nvm</code>安装了<code>Node.js</code>时，<code>npm</code>也一起安装了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="3-初始化Hexo"><a href="#3-初始化Hexo" class="headerlink" title="3. 初始化Hexo"></a>3. 初始化Hexo</h2><p>让我们回到我们之前选好的<code>风水宝地</code>，也就是<code>~/mystuff/blog</code>，在这个文件夹里运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><p>这个命令会<code>~/mystuff/blog</code>里创建一些文件，这些文件就是我们博客网站的初始文件。</p><p>在短暂的等待之后，<code>hexo</code>就已经帮我们创建好了博客网站的初始文件了。</p><h3 id="3-1-另一种方式"><a href="#3-1-另一种方式" class="headerlink" title="3.1 另一种方式"></a>3.1 另一种方式</h3><p>你也可以在这个命令后面加上你的博客网站的名字，比如说：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog<br></code></pre></td></tr></table></figure><p>这样<code>hexo</code>就会在<code>~/mystuff/blog</code>里创建一个名为<code>myblog</code>的文件夹，然后把博客网站的初始文件放在这个文件夹里。</p><p>如果你用这种方式，那么你的“博客网站文件夹”就是<code>~/mystuff/blog/myblog</code>了。</p><h2 id="4-安装依赖"><a href="#4-安装依赖" class="headerlink" title="4. 安装依赖"></a>4. 安装依赖</h2><p>无论你用了以上的那种方法，现在你需要在你的<strong>博客网站文件夹</strong>里运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><h2 id="5-预览博客网站"><a href="#5-预览博客网站" class="headerlink" title="5. 预览博客网站"></a>5. 预览博客网站</h2><p>想要看看我们折腾半天到底干了些什么吗？</p><p>现在你只需要在<code>~/mystuff/blog</code>里运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>然后打开浏览器，输入terminal里显示的网址（可能是<code>http://localhost:4000</code>），就可以看到我们的博客网站啦！</p><p><img src="/img/R_BE/03-1.png" alt="hexo"></p><ul><li>Tip：你可以使用<code>hexo s</code>来代替<code>hexo server</code>，并且你可以在<code>hexo s</code>后面加上<code>-p</code>来指定端口，比如说<code>hexo s -p 5000</code>。</li></ul><h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>恭喜！:tada: </p><p>看到我们的博客网站在本地运行，这应该是一件很有意思的事情吧！</p><p>但是，还有更有意思的事情等着我们呢！本地预览只是我们的第一步，接下来我们还得知道如何编辑博客内容:pencil:，如何发布博客网站:globe_with_meridians:，以及如何更换主题:art:等等…</p><p>玩的开心！:wink:</p><blockquote><p>上一节： <a href="/2023/05/07/R-EB-02-Github-SSH-node-basic/" title="「建站」02 Github &amp; SSH &amp; node 基本配置">「建站」02 Github &amp; SSH &amp; node 基本配置</a></p></blockquote><blockquote><p>下一节： <a href="/2023/05/07/R-EB-04-Push-to-github/" title="「建站」04 将Hexo部署到Github Page">「建站」04 将Hexo部署到Github Page</a></p></blockquote><hr><p>如果在阅读过程中发现任何问题，欢迎在评论区留言（如果开放了的话），或者给我发邮件：<a href="mailto:SiriusLLLUUU@outlook.com">阿乎的邮箱</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>hexo</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」02 Github &amp; SSH &amp; node 基本配置</title>
    <link href="/2023/05/07/R-EB-02-Github-SSH-node-basic/"/>
    <url>/2023/05/07/R-EB-02-Github-SSH-node-basic/</url>
    
    <content type="html"><![CDATA[<!-- # Github & SSH & node 基本配置- 本文编辑时间：2023.05.07 --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hi, 阿乎です！(&gt; ▽ &lt;) &#x2F;~</p><p>想要制作一个个人博客网站，我们需要这些东西的帮助：</p><blockquote><ul><li><code>Github</code>：用来存储我们的网站的源代码</li><li><code>SSH</code>：用来连接我们的电脑和<code>Github</code></li><li><code>node</code>：即<code>Node.js</code>用来运行<code>Hexo</code>（下一节会介绍）</li></ul></blockquote><p>我们将会在这一节中介绍如何使用对以上的3个工具进行基本配置。</p><h2 id="0-注意"><a href="#0-注意" class="headerlink" title="0. 注意"></a>0. 注意</h2><p>我会用<code>&lt;&lt;&gt;&gt;</code>来表示每个人情况不同的内容。（如每个人的路径与邮箱）</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>确保你已经在你的电脑上安装了<code>git</code>和<code>ssh</code>。</p><p>在你的终端中运行<code>git</code>和<code>ssh</code>。如果出现<code>command not found</code>之类的内容的话说明你还没有安装它们。对于我的系统（<code>Linux Mint 21.1</code>），我可以使用以下命令来安装它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install git ssh<br></code></pre></td></tr></table></figure><h2 id="2-定义git的用户名和邮箱与生成SSH密钥"><a href="#2-定义git的用户名和邮箱与生成SSH密钥" class="headerlink" title="2. 定义git的用户名和邮箱与生成SSH密钥"></a>2. 定义git的用户名和邮箱与生成SSH密钥</h2><h3 id="2-1-定义git的用户名和邮箱"><a href="#2-1-定义git的用户名和邮箱" class="headerlink" title="2.1 定义git的用户名和邮箱"></a>2.1 定义git的用户名和邮箱</h3><p>在terminal中运行以下命令来定义你的用户名和邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name &lt;&lt;你的用户名&gt;&gt;<br>git config --global user.email &lt;&lt;你的邮箱&gt;&gt;<br></code></pre></td></tr></table></figure><p>否则你在使用<code>git</code>时会出现以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">*** Please tell me <span class="hljs-built_in">who</span> you are.<br><br>Run<br><br>  git config --global user.email <span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  git config --global user.name &quot;</span><br><br>to <span class="hljs-built_in">set</span> your account<span class="hljs-string">&#x27;s default identity.</span><br><span class="hljs-string">Omit --global to set the identity only in this repository.</span><br></code></pre></td></tr></table></figure><h3 id="2-2-生成SSH密钥"><a href="#2-2-生成SSH密钥" class="headerlink" title="2.2 生成SSH密钥"></a>2.2 生成SSH密钥</h3><ul><li>SSH密钥用于连接你的电脑和<code>Github</code>。</li></ul><p>在terminal中运行以下命令来生成你的SSH密钥：</p><ul><li>注意：你在这里输入的邮箱应该和你注册<code>Github</code>账号时使用的邮箱相同。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C &lt;&lt;你的邮箱&gt;&gt;<br></code></pre></td></tr></table></figure><p>然后按照提示来生成你的SSH密钥。（为了方便，你可以直接按<code>Enter</code>来使用默认值。但你也可以指定你的SSH密钥的路径、名称和密码。但一定要你记下来。）</p><p>之后你会得到两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>，它们分别代表你的私钥和公钥。你可以在你指定的路径中找到它们。（默认路径是<code>~/.ssh/id_rsa</code>和<code>~/.ssh/id_rsa.pub</code>）</p><h2 id="3-将SSH密钥添加到Github"><a href="#3-将SSH密钥添加到Github" class="headerlink" title="3. 将SSH密钥添加到Github"></a>3. 将SSH密钥添加到Github</h2><ul><li>添加SSH密钥到Github的目的是为了让你的电脑和Github之间可以互相认证。</li></ul><h3 id="3-1-复制你的公钥"><a href="#3-1-复制你的公钥" class="headerlink" title="3.1 复制你的公钥"></a>3.1 复制你的公钥</h3><p>在terminal中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;你的公钥的路径&gt;&gt;<br></code></pre></td></tr></table></figure><p>然后你会看到你的公钥的内容。复制它。</p><h3 id="3-2-将你的公钥添加到Github"><a href="#3-2-将你的公钥添加到Github" class="headerlink" title="3.2 将你的公钥添加到Github"></a>3.2 将你的公钥添加到Github</h3><p>进入<code>Github</code> -&gt; <code>Settings</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code>并粘贴你的公钥以添加它。</p><h2 id="4-测试你的SSH密钥"><a href="#4-测试你的SSH密钥" class="headerlink" title="4. 测试你的SSH密钥"></a>4. 测试你的SSH密钥</h2><p>在terminal中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T &lt;&lt;你的邮箱&gt;&gt;<br></code></pre></td></tr></table></figure><p>如果你看到类似<code>Hi &lt;&lt;你的用户名&gt;&gt;! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>的内容，那么你已经成功地将你的SSH密钥添加到了Github。</p><ul><li><p>如果你的terminal卡在这里，可能是因为网络不好。</p></li><li><p>不需要一直等下去，鬼知道网络什么时候能好。只要不报错，建议直接跳到下一步。</p></li></ul><h2 id="5-创建一个新的仓库（有特殊命名要求）"><a href="#5-创建一个新的仓库（有特殊命名要求）" class="headerlink" title="5. 创建一个新的仓库（有特殊命名要求）"></a>5. 创建一个新的仓库（有特殊命名要求）</h2><p>让我们在<code>Github</code>上创建一个新的仓库并将它命名为<code>&lt;&lt;你的用户名&gt;&gt;.github.io</code>。（建议先勾选<code>Add a README file</code>，之后的<code>hexo deploy</code>的流程会自动删除它的。）</p><ul><li><strong>非常重要</strong>：我们需要使用<code>Github Page</code>，所以<ol><li>你的仓库的名字必须是<code>&lt;&lt;你的用户名&gt;&gt;.github.io</code>，不要使用其他名字。</li><li>这个仓库必须是<strong>公开的</strong>！</li><li>在仓库创建完毕后，你需要在仓库的<code>Settings</code> -&gt; <code>Pages</code>中将<code>Source</code>设置为<code>main</code>，并点击<code>Save</code>。（有时会自动设置好，我们需要确认一下。）</li></ol></li></ul><h2 id="6-安装node"><a href="#6-安装node" class="headerlink" title="6. 安装node"></a>6. 安装node</h2><ul><li><code>node</code>用于运行<code>Hexo</code>。</li></ul><p>这里我们有两种选择：</p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>直接安装<code>node</code></td><td>简单</td><td>无法自定义<code>node</code>的版本</td></tr><tr><td>使用<code>nvm</code>安装<code>node</code></td><td>可以自定义<code>node</code>的版本</td><td>略显繁琐</td></tr></tbody></table><p>如果只是想简单地使用<code>Hexo</code>的话，直接安装<code>node</code>即可。</p><h3 id="6-1-直接安装node"><a href="#6-1-直接安装node" class="headerlink" title="6.1 直接安装node"></a>6.1 直接安装<code>node</code></h3><p>在terminal中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install nodejs<br></code></pre></td></tr></table></figure><ul><li>如果你已经使用<code>nvm</code>安装过<code>node</code>，那么这里没有提示<code>node</code>已安装是正常的。（因为<code>apt</code>和<code>nvm</code>没有共享安装信息）</li></ul><p>然后运行以下命令来，根据是否输出版本号来判断是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><h3 id="6-2-使用nvm安装node"><a href="#6-2-使用nvm安装node" class="headerlink" title="6.2 使用nvm安装node"></a>6.2 使用<code>nvm</code>安装<code>node</code></h3><ul><li><code>nvm</code>即<code>node version manager</code>，用于管理<code>node</code>的版本。</li></ul><blockquote><p>我们可以按照<code>nvm</code>的<a href="https://github.com/nvm-sh/nvm">官方文档</a>来安装它。</p></blockquote><p>大致过程是<code>下载nvm</code> -&gt; <code>安装nvm</code> -&gt; <code>安装node</code>。</p><h4 id="1-下载与安装nvm"><a href="#1-下载与安装nvm" class="headerlink" title="1. 下载与安装nvm"></a>1. 下载与安装<code>nvm</code></h4><blockquote><p>见官方文档中<code>Install &amp; Update Script</code>一节。</p></blockquote><ul><li>具体命令以官方文档为准！！！</li></ul><p>运行以下两个命令中的任一个来下载并安装<code>nvm</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash<br></code></pre></td></tr></table></figure><h4 id="2-安装node"><a href="#2-安装node" class="headerlink" title="2. 安装node"></a>2. 安装<code>node</code></h4><blockquote><p>见官方文档中<code>Usage</code>一节。</p></blockquote><p>有多种方式安装<code>node</code>，这里我们使用最简单的一种即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install node<br></code></pre></td></tr></table></figure><p>安装完成后，运行以下命令来判断是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><p>如果输出了版本号，那么说明安装成功。</p><h4 id="3-补充"><a href="#3-补充" class="headerlink" title="3. 补充"></a>3. 补充</h4><p>如有需要，请参考官方文档来使用<code>nvm</code>。（<em>Recommend</em>）</p><h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>做到这里，我们已经完成了“基础设施建设”。</p><p>下一步我们就要开始使用<code>Hexo</code>来建立我们的博客网站啦！</p><p>玩的开心！:wink:</p><blockquote><p>上一节： <a href="/2023/05/06/R-EB-01-Prerequirements/" title="「建站」01 准备工作 - 建立自己的博客网站">「建站」01 准备工作 - 建立自己的博客网站</a> <br></p></blockquote><blockquote><p>下一节： <a href="/2023/05/07/R-EB-03-Hexo-init/" title="「建站」03 使用Hexo初步创建博客网站与本地预览">「建站」03 使用Hexo初步创建博客网站与本地预览</a></p></blockquote><hr><p>如果在阅读过程中发现任何问题，欢迎在评论区留言（如果开放了的话），或者给我发邮件：<a href="mailto:SiriusLLLUUU@outlook.com">阿乎的邮箱</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
      <tag>node</tag>
      
      <tag>nvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」01 准备工作 - 建立自己的博客网站</title>
    <link href="/2023/05/06/R-EB-01-Prerequirements/"/>
    <url>/2023/05/06/R-EB-01-Prerequirements/</url>
    
    <content type="html"><![CDATA[<!-- # 准备工作 - 建立自己的博客网站 --><!-- - 本文编辑时间：2023.05.06 --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你，有想过建立一个自己的博客网站吗？ :thinking:</p><p>我在几年前就有了这个想法，但是碍于时间与技术的原因，一直没有实现… :cry:</p><p>但是现在，瞧，这是哪儿？</p><blockquote><p>Hi，欢迎来到我的博客！:smile:</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Hi, 阿乎です！(&gt; ▽ &lt;) &#x2F;~</p><p>这是一个记录了我在<code>Linux</code>上使用<code>Github Page</code>和<code>Hexo</code>建立自己博客网站的系列。（网上也有很多关于<code>Windows</code>的教程。无论是哪个系统，它们的原理都是90%相同的。）</p><p><img src="/img/R_BE/01-1.png" alt="My OS"></p><p><span></span></p><p>这个系列既是我建站过程的记录，也是一份<strong>粗略的</strong>建站教程（或许最需要看的是未来的我自己？毕竟自己搭的时候也是看了许多不同的教程，我可能最需要的是一篇我自己总结的）。</p><p>我并不专业，很多地方可能只是依葫芦画瓢，内容大多也仅供参考。但同时，如果你也想建立一个博客网站的话，我希望我的博客能帮到你。:heart:</p><h2 id="建一个博客网站需要什么？"><a href="#建一个博客网站需要什么？" class="headerlink" title="建一个博客网站需要什么？"></a>建一个博客网站需要什么？</h2><p>建立一个简单的博客并不难。</p><p>在正式开始之前，我们需要：</p><ul><li>一个<code>Github</code>账号</li><li>如果你会用“魔法”的话那就更好了（你懂我的意思，对吧）</li><li>一个<code>域名</code>（optional|如果你希望不用输入繁琐的<code>github.io</code>域名就能访问你的博客的话，那么推荐你购买一个域名）</li></ul><p>最重要的是，你需要有：</p><ul><li><code>耐心</code>：建站的过程不大可能一帆风顺，我们可能会遇到各种各样的问题（网络、配置、代码等等）</li><li><code>热情</code>：如果缺少热情，那么简单的问题或许也会让你觉得很烦躁</li><li><code>查阅资料的能力</code>：遇到问题时，我们需要学会自己去查阅资料，而不是一味的等待别人的回答。我们使用的大部分工具都是开源的，所以我们完全可以通过查阅资料来解决我们的问题</li></ul><h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>那么，让我们开启建站之旅吧！:tada:</p><p>玩的开心！:wink:</p><blockquote><p>下一节： <a href="/2023/05/07/R-EB-02-Github-SSH-node-basic/" title="「建站」02 Github &amp; SSH &amp; node 基本配置">「建站」02 Github &amp; SSH &amp; node 基本配置</a></p></blockquote><hr><p>如果在阅读过程中发现任何问题，欢迎在评论区留言（如果开放了的话），或者给我发邮件：<a href="mailto:SiriusLLLUUU@outlook.com">阿乎的邮箱</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>introduction</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
