<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>「TF」02 为什么我选择`uv`？（个人经验分享）</title>
    <link href="/2025/09/08/TF-02-Why-I-choose-UV/"/>
    <url>/2025/09/08/TF-02-Why-I-choose-UV/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>承接上文，为什么我会与<code>uv</code>，这个被称为“下一代Python包管理器”的工具相遇呢？</p><p>为什么我会在熟悉<code>conda</code>和<code>pip</code>的情况下，仍然选择接触，甚至拥抱<code>uv</code>呢？</p><h1 id="1-uv-——-注定的相遇">1. <code>uv</code> —— 注定的相遇<a class="header-anchor" href="#1-uv-——-注定的相遇"> ¶</a></h1><p>在日常的学习和工作中，我一直使用<code>conda</code>作为Python的包管理器和环境管理器。</p><p>然而，在浏览一些GitHub项目时，我发现越来越多的项目中<strong>没有</strong><code>requirements.txt</code>，而是多了一个叫作<code>pyproject.toml</code>的文件。</p><blockquote><p><code>toml</code>（Tom’s Obvious, Minimal Language）是一种简洁易读的配置文件格式。我也认为其是未来平替，甚至超越一些传统配置文件格式（如<code>json</code>、<code>yaml</code>等）的有力竞争者。</p></blockquote><p>它看起来像这样：</p><figure><div class="code-wrapper"><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">project</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"hello-world"</span><span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.1.0"</span><span class="token key property">description</span> <span class="token punctuation">=</span> <span class="token string">"Add your description here"</span><span class="token key property">readme</span> <span class="token punctuation">=</span> <span class="token string">"README.md"</span><span class="token key property">dependencies</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>    <span class="token string">"xxxx"</span><span class="token punctuation">,</span>    <span class="token string">"yyyy"</span><span class="token punctuation">,</span>    <span class="token string">"zzzz"</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>于是，在查找资料后，我发现这个<code>pyproject.toml</code>文件是由<code>PEP 518</code>引入的，旨在为Python项目提供一个统一的构建系统接口，而<code>uv</code>对其有着专门的支持。同时，它也是<code>uv</code>默认的项目配置文件。</p><p>至此，我对这个熟悉却陌生的虚拟环境管理工具产生了浓厚的兴趣。</p><h1 id="2-我为何拥抱uv？">2. 我为何拥抱<code>uv</code>？<a class="header-anchor" href="#2-我为何拥抱uv？"> ¶</a></h1><p>在学习并使用<code>uv</code>一段时间后，我发现它相比于我熟悉的<code>conda + pip</code>组合，有着一些显著的优势，同时也存在着一些不足。</p><h2 id="2-1-不用再记环境名了！">2.1. 不用再记环境名了！<a class="header-anchor" href="#2-1-不用再记环境名了！"> ¶</a></h2><p>在使用<code>conda</code>时，我需要为每一个项目创建一个新的环境，并记住这个环境的名称。每次要使用某个项目时，都需要激活对应的环境。</p><p>比如说：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> a_random_env_name <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.10</span>conda activate a_random_env_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>而时间一长，我们会无可避免地创建出一堆不同的环境。如果我忘记了环境名，那么我得去查找我创建的环境列表，找到对应的环境名，然后再激活它。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">env</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>对于我这种“健忘”的选手，有时候确实会在一长串环境列表中犯糊涂——“这个项目用的到底是<code>myenv</code>还是<code>new_env</code>啊？😵”</p><blockquote><p>我的解决方法：我通常会创建一个叫作<code>misc</code>的环境，用来杂乱地装一些通用的依赖，并将其作为各种<em>不值得多创建一个环境但是又需要安装额外依赖</em>的项目的环境。</p></blockquote><p>而如果使用<code>uv</code>，整个虚拟环境都是放在项目目录下的<code>.venv</code>文件夹中。只要配置好依赖，就可以直接使用环境中的Python解释器和包来运行项目。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv run xxx.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>对我来说可真是救大命了！😋</p><hr><h2 id="2-2-极致的环境安装体验！">2.2 极致的环境安装体验！<a class="header-anchor" href="#2-2-极致的环境安装体验！"> ¶</a></h2><p>根据官方的说法，<code>uv</code>有着远超于传统工具的安装速度。</p><p><img src="/img/TF/01/speed.png" alt="Installing Trio's dependencies with a warm cache"></p><p>然而让我最喜欢的不只是速度，还是这一条简单的命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv <span class="token function">sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>它会根据<code>pyproject.toml</code>和<code>uv.lock</code>文件，自动创建并同步虚拟环境中的依赖！简直就是：All in one！</p><blockquote><p><code>uv.lock</code>文件会锁定依赖的具体版本，确保每次安装的依赖版本一致，避免因版本差异导致的问题。</p></blockquote><p>值得一提的是，在使用传统工具安装<code>torch</code>时，如果不在命令后添加下载源，那么其默认安装的是<code>cpu</code>版本的<code>torch</code>。</p><blockquote><p>为了避免<code>torch.cuda.is_available()</code>返回<code>False</code>，我总是需要在安装前访问官网，复制下<code>--index-url https://download.pytorch.org/whl/cu1xx</code>添加到<code>pip install</code>命令后面。</p></blockquote><p>不过，有了<code>pyproject.toml</code>后，我们可以手动设置部分包的下载源——也就是说，这次，我们可以直接指定安装<code>cuda</code>版本的<code>torch</code>了！</p><p>只需要把下面这两段加到<code>pyproject.toml</code>末尾即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">tool.uv.sources</span><span class="token punctuation">]</span><span class="token key property">torch</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">index</span> <span class="token punctuation">=</span> <span class="token string">"pytorch-cu128"</span> <span class="token punctuation">&#125;</span><span class="token key property">torchvision</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">index</span> <span class="token punctuation">=</span> <span class="token string">"pytorch-cu128"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">tool.uv.index</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"pytorch-cu128"</span><span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">"https://download.pytorch.org/whl/cu128"</span><span class="token key property">explicit</span> <span class="token punctuation">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>整个文件类似下面这样：</p><figure><div class="code-wrapper"><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">project</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"xxx"</span><span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.1.0"</span><span class="token key property">description</span> <span class="token punctuation">=</span> <span class="token string">"xxx"</span><span class="token key property">readme</span> <span class="token punctuation">=</span> <span class="token string">"README.md"</span><span class="token key property">requires-python</span> <span class="token punctuation">=</span> <span class="token string">">=3.12"</span><span class="token key property">dependencies</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>    <span class="token string">"torch>=2.7.0"</span><span class="token punctuation">,</span>    <span class="token string">"torchvision>=0.22.0"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token table class-name">tool.uv.sources</span><span class="token punctuation">]</span><span class="token key property">torch</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">index</span> <span class="token punctuation">=</span> <span class="token string">"pytorch-cu128"</span> <span class="token punctuation">&#125;</span><span class="token key property">torchvision</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">index</span> <span class="token punctuation">=</span> <span class="token string">"pytorch-cu128"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">tool.uv.index</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"pytorch-cu128"</span><span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">"https://download.pytorch.org/whl/cu128"</span><span class="token key property">explicit</span> <span class="token punctuation">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h2 id="2-3-生态趋势与防御式学习">2.3 生态趋势与防御式学习<a class="header-anchor" href="#2-3-生态趋势与防御式学习"> ¶</a></h2><p>无论是在科研还是工业领域，我逐渐发现一个趋势：<br>越来越多的新项目开始把 <code>uv</code> 作为默认的包管理工具，甚至有些仓库不再提供传统的 <code>requirements.txt</code> 或 conda 安装说明，而是直接放了一个 <code>pyproject.toml</code>。</p><p>这让我意识到，如果我还停留在“conda + pip”的组合，将来一定会遇到障碍：<br>—— 想尝试一个新项目，却因为缺乏 <code>uv</code> 的经验而卡在起点。</p><p>所以，对我而言，学习并拥抱 <code>uv</code> 不仅仅是“喜欢它的体验”，更是一种“防御式”的选择。<br>我提前把 <code>uv</code> 纳入日常使用，逐步适应它的工作流。这样一来，即使未来 Python 生态真的全面转向 <code>uv</code>，我也能从容应对，不会手忙脚乱。</p><hr><h2 id="2-4-兼容性与“向下兼容”的安心感">2.4 兼容性与“向下兼容”的安心感<a class="header-anchor" href="#2-4-兼容性与“向下兼容”的安心感"> ¶</a></h2><p>在第一次尝试 <code>uv</code> 之前，我心里其实有个疑问：</p><blockquote><p>“如果我用了 <code>uv</code>，那我的同学、同事、导师还能跑我的项目吗？”</p></blockquote><p>毕竟大家大多数还停留在 <code>conda + pip</code> 的组合，如果我突然甩给他们一个 <code>pyproject.toml</code>，他们会不会一脸问号？</p><p>好消息是：<code>uv</code> 在兼容性这块做得相当贴心。<br>除了支持 <code>pyproject.toml</code> 和自己的 <code>uv.lock</code> 之外，它也能轻松生成一个 <code>requirements.txt</code> 文件。这样一来，即使我的项目是用 <code>uv</code> 搭建的，别人依旧可以用 pip 或 conda 来安装依赖，丝毫不会影响协作。</p><p>这让我在选择 <code>uv</code> 的时候更有底气：<br>我可以拥抱新工具的便利，但不会把别人“绑架”进来。</p><hr><h2 id="2-5-包与解释器的复用：更省空间">2.5 包与解释器的复用：更省空间<a class="header-anchor" href="#2-5-包与解释器的复用：更省空间"> ¶</a></h2><p>过去用 <code>conda</code>，我的硬盘里常常堆着一堆环境。<br>虽然 conda 有所谓的“硬链接”机制，可以在环境之间共享相同版本的包文件，但一旦版本稍有不同，就得重新装一份，空间很快就被吃满。</p><p><code>uv</code> 的做法更直接：</p><ul><li>它有全局缓存机制（global cache），同一个版本的包只会下载/构建一次；</li><li>当多个项目需要这个包时，直接从缓存里拿，不会重复浪费空间；</li><li>虚拟环境本身依然是隔离的，但底层的 wheel 文件、解释器都能得到复用。</li></ul><p>举个例子：<br>我在两个项目里都用到了 <code>numpy==1.26.0</code>。第一次 <code>uv sync</code> 会去下载，但第二次在另一个项目里执行时，几乎是秒装 —— 因为已经从缓存里直接复用。</p><p>这种“只装一次，到处可用”的感觉，实在太舒服了。😋</p><hr><h1 id="3-总结">3. 总结<a class="header-anchor" href="#3-总结"> ¶</a></h1><p>所以，与其说“为什么选择 <code>uv</code>”，不如说“为什么不选择 <code>uv</code>”？</p><p>对我来说，<code>uv</code> 带来了更轻便的日常开发体验，也让我能更好地适应未来的生态趋势。<br>当然，conda 在科研和团队合作里依然有不可替代的地位，比如处理一些非 Python 的依赖时，它仍然更强大。</p><p>换句话说：我并不是完全抛弃 conda，而是把 <code>uv</code> 当作我更多场景下的“首选方案”。😎</p><h1 id="Reference">Reference<a class="header-anchor" href="#Reference"> ¶</a></h1><p><code>uv</code>官网: <a href="https://docs.astral.sh/uv/">https://docs.astral.sh/uv/</a></p>]]></content>
    
    
    <categories>
      
      <category>Towards Future</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>uv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「LUT」04 ncdu - 直观的Linux磁盘使用情况查看工具</title>
    <link href="/2025/06/17/LUT-04-ncdu/"/>
    <url>/2025/06/17/LUT-04-ncdu/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>还在为难以通过终端查看磁盘使用情况而烦恼吗？</p><p>还在用传统的<code>du</code>命令来查看磁盘使用情况而感到不便吗？</p><p>今天，我要向你介绍一个非常实用的工具：<code>ncdu</code>！</p><p>从此，查看Linux磁盘占用变得如此直观和简单！</p><h1 id="What-is-ncdu-Why-use-it">What is <code>ncdu</code> &amp; Why use it?<a class="header-anchor" href="#What-is-ncdu-Why-use-it"> ¶</a></h1><p><code>ncdu</code>（NCurses Disk Usage）是一个非常实用的工具，可以帮助你轻松地查看和管理磁盘空间。</p><p>一般情况下，在终端需要查看磁盘使用情况时，我们会使用<code>du</code>命令。<br>然而，<code>du</code>命令的输出往往不够直观，尤其是在处理大目录时。（甚至按大小排序还需要加上额外的参数）</p><p><img src="/img/LUT/04-du.png" alt="du example"></p><p>那么这个时候，不妨试试<code>ncdu</code>吧！</p><p>只需输入4个字母，即可直观地查看磁盘使用情况！</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncdu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/img/LUT/ncdu.png" alt="ncdu example"></p><p>进入交互模式后，你可以像使用<code>Vim</code>一样通过<code>j</code>、<code>k</code>键来上下移动，如需退出可以按<code>q</code>键。</p><p>更多详细用法可以通过<code>?</code>键查看帮助或者直接查看官方文档。</p><p><img src="/img/LUT/04-ncdu-help.png" alt="ncdu help"></p><blockquote><p>⚠️注意：进入交互模式后，<code>d</code>键可以删除选中的文件或目录，请谨慎操作！</p></blockquote><h1 id="How-to-install-ncdu">How to install <code>ncdu</code>?<a class="header-anchor" href="#How-to-install-ncdu"> ¶</a></h1><p><code>ncdu</code>可以通过大多数Linux发行版的包管理器来安装。</p><ul><li><strong>Ubuntu/Debian</strong>:</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ncdu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><strong>Arch Linux</strong>:</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> ncdu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>只需要通过你的包管理器安装即可。</p><h1 id="Tips">Tips<a class="header-anchor" href="#Tips"> ¶</a></h1><blockquote><p>⚠️注意：进入交互模式后，<code>d</code>键可以删除选中的文件或目录，请谨慎操作！</p></blockquote><p>为了避免错误地删除文件或目录，建议在使用<code>ncdu</code>时附带<code>-r</code>来启用只读模式，这样就不会意外删除文件了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncdu <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p><code>ncdu</code>真是太棒了！</p><hr><blockquote><p>上一节： <a href="/2024/06/19/LUT-03-Gnome_Beautify/" title="「LUT」03 Gnome Beautify">「LUT」03 Gnome Beautify</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux Useful Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「TF」01 uv - “下一代Python包管理器”</title>
    <link href="/2025/06/17/TF-01-UV/"/>
    <url>/2025/06/17/TF-01-UV/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>今天我们来介绍一下<code>uv</code>，这个被称为“下一代Python包管理器”的工具。</p><h1 id="1-What-is-uv">1. What is <code>uv</code>?<a class="header-anchor" href="#1-What-is-uv"> ¶</a></h1><p>根据官网的介绍，<code>uv</code>是&quot;An extremely fast Python package and project manager, written in Rust.&quot;，即“一个用<code>Rust</code>编写的极快的Python包和项目管理器”。</p><blockquote><p><code>Rust</code>是一个近年来兴起的新一代系统编程语言，以强调“<strong>内存安全+高性能</strong>”的而著称。<br>自 Linux 6.1（2022年12月）起，<code>Rust</code> 被首次合并进主线内核，用于处理实验性代码和驱动。尽管目前代码比例很小，但它确实是 Linux 内核迈向“下一代 C 系列”语言方向的一大步。</p></blockquote><p>下图是官网介绍的<code>uv</code>的亮点：<br><img src="/img/TF/01/highlights.png" alt="Highlights of uv"></p><h1 id="2-Why-uv">2. Why <code>uv</code>?<a class="header-anchor" href="#2-Why-uv"> ¶</a></h1><p>至少对我来说，<code>uv</code>实在是非常让人惊艳！</p><h2 id="2-1-Speed">2.1. Speed<a class="header-anchor" href="#2-1-Speed"> ¶</a></h2><p>我认识<code>Rust</code>比认识<code>uv</code>要早。当时<code>Rust</code>一直饱受争议——一个被很多人鼓吹很强的语言却并没有很多实际应用，即便是部分放入Linux内核的行为也并非能让人信服。</p><p>然而，<code>uv</code>的出现却让我真正认识到<code>Rust</code>的强大。<br><img src="/img/TF/01/speed.png" alt="Installing Trio's dependencies with a warm cache"></p><blockquote><p>Installing Trio’s dependencies with a warm cache</p></blockquote><p>上图是<code>uv</code>在安装<code>Trio</code>库时的速度对比。可以看到，<code>uv</code>的速度远超其他传统工具！按官方的说法，“10-100x faster than pip”（比pip快10-100倍）！</p><h2 id="2-2-All-in-one">2.2. All in one<a class="header-anchor" href="#2-2-All-in-one"> ¶</a></h2><p>uv的另一个亮点是它的“全能”，一个工具替代一堆工具（参考 GitHub：<a href="https://github.com/astral-sh/uv%EF%BC%89%EF%BC%9A">https://github.com/astral-sh/uv）：</a></p><ul><li><p><code>pip</code>：<code>uv pip install ...</code></p></li><li><p><code>virtualenv</code>：创建 <code>.venv</code> 等当前目录下的虚拟环境（<code>uv venv</code>）</p></li><li><p><code>pip-tools</code>：生成 <code>.lock</code> 文件并确保依赖一致性（<code>uv lock</code>, <code>uv sync</code>）</p></li><li><p><code>poetry</code> / <code>pdm</code>：项目初始化、添加/移除依赖、运行脚本和工具等</p></li><li><p><code>pipx</code>：用 <code>uv tool</code> 和 <code>uvx</code> 快速执行 CLI 工具（如 <code>ruff、black</code>）</p></li></ul><h1 id="3-How-to-play-with-uv">3. How to play with <code>uv</code>?<a class="header-anchor" href="#3-How-to-play-with-uv"> ¶</a></h1><p>具体的使用方法可以参考<a href="https://docs.astral.sh/uv/">官网的文档</a>，但我会简单介绍一下基本用法。</p><h2 id="3-1-Install-uv">3.1. Install <code>uv</code><a class="header-anchor" href="#3-1-Install-uv"> ¶</a></h2><p>安装<code>uv</code>有两种主要方法：</p><ul><li>使用<code>pip</code>安装<ul><li><code>pip install uv</code></li></ul></li><li>系统级安装<ul><li>Windows:<figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">powershell <span class="token parameter variable">-ExecutionPolicy</span> ByPass <span class="token parameter variable">-c</span> <span class="token string">"irm https://astral.sh/uv/install.ps1 | iex"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li>MacOS and Linux:<figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-sSfL</span> https://astral.sh/uv/install.sh <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ul></li></ul><blockquote><p>⚠️注意：由于信息时效性，以上命令不一定长期有效。<br>建议参考<a href="https://docs.astral.sh/uv/getting-started/installation/">官网的安装说明</a>获取最新的安装方法。</p></blockquote><p>卸载详见<a href="https://docs.astral.sh/uv/getting-started/installation/#uninstallation">官网的卸载说明</a>。</p><h2 id="3-2-Update-uv">3.2. Update <code>uv</code><a class="header-anchor" href="#3-2-Update-uv"> ¶</a></h2><p>更新<code>uv</code>非常简单，只需运行以下命令：</p><ul><li>如果是使用<code>pip</code>安装的：<figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> uv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li>如果是系统级安装的：<figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv self update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ul><h2 id="3-3-uv-and-virtual-environments">3.3. <code>uv</code> and virtual environments<a class="header-anchor" href="#3-3-uv-and-virtual-environments"> ¶</a></h2><h3 id="uv的对于Python的管理"><code>uv</code>的对于Python的管理<a class="header-anchor" href="#uv的对于Python的管理"> ¶</a></h3><p>与<code>Conda</code>不同，<code>uv</code>是“<strong>枪弹分离</strong>”式地管理Python可执行文件和包依赖的。</p><p><code>Conda</code>的每个虚拟环境都是一个独立的封闭空间，包含：</p><ul><li>独立的一套 Python 可执行文件（如Windows上的<code>python.exe</code>）</li><li>所有依赖库（包括 Python 和非 Python 包）</li></ul><p>uv 的管理方式则是“分层”结构：</p><ul><li>Python 各版本只需 全局缓存一份（<code>~/.cache/uv/pythons</code>）</li><li>每个项目只在 <code>.venv</code> 中保存当前项目需要的依赖（库文件），</li><li>Python 是从全局引用（软链接/绑定），而不是复制一份</li></ul><blockquote><p>这种特别的方式有效地减少了磁盘空间的占用！让我这样有“磁盘洁癖”的人感到非常舒适！</p></blockquote><h3 id="创建虚拟环境">创建虚拟环境<a class="header-anchor" href="#创建虚拟环境"> ¶</a></h3><p>你只需要在你的项目目录下运行以下命令即可创建一个虚拟环境：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv venv <span class="token comment"># 在当前目录下的.venv创建一个虚拟环境（没有名字）</span>uv venv myenv <span class="token comment"># 在当前目录下的myenv创建一个叫做myenv的虚拟环境（位置为./myenv）</span>uv venv <span class="token parameter variable">--python</span> <span class="token number">3.11</span> <span class="token comment"># 指定Python版本创建虚拟环境（默认使用全局最新版本）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>举个例子，以下代码会在当前目录下创建一个名为<code>tmp_env</code>的虚拟环境，并使用Python 3.11版本：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv venv tmp_env <span class="token parameter variable">--python</span> <span class="token number">3.11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>注意：如果指定的版本并没有安装，<code>uv</code>会自动下载并安装对应版本的Python。</p></blockquote><h3 id="激活-退出虚拟环境">激活&amp;退出虚拟环境<a class="header-anchor" href="#激活-退出虚拟环境"> ¶</a></h3><ol><li>如果使用的是默认的<code>.venv</code>目录（通过<code>uv venv</code>命令创建），那么之后的任意<code>uv</code>命令都会自动激活这个虚拟环境。</li><li>还有一种<strong>通用</strong>方法，即使用创建虚拟环境时自动生成的激活脚本<code>&lt;env_name&gt;/Scripts/activate</code></li></ol><ul><li>举个例子，在Windows上，你可以运行以下命令来激活名为<code>tmp_env</code>的虚拟环境：</li></ul>  <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.<span class="token punctuation">\</span>tmp_env<span class="token punctuation">\</span>Scripts<span class="token punctuation">\</span>activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>在Linux或MacOS上，你可以运行以下命令：</li></ul>  <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./tmp_env/bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>退出虚拟环境倒是比较方便，无论是哪一个系统，你只需运行以下命令即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="3-4-Install-packages">3.4. Install packages<a class="header-anchor" href="#3-4-Install-packages"> ¶</a></h2><p>在说明如何安装包之前，我们必须得了解一个东西：<code>pyproject.toml</code></p><p>它是 Python 官方（PEP 518）定义的项目配置文件，类似于：</p><ul><li>JavaScript 项目的 <code>package.json</code></li><li>Rust 的 <code>Cargo.toml</code></li><li>或者 Conda 的 <code>environment.yml</code></li></ul><p><code>pyproject.toml</code> 文件包含了项目的元数据（如项目名称、版本、作者等。是的，项目其实是应该有名称的！）、依赖关系和构建配置等信息。</p><p>与虚拟环境的概念不同，它是项目级别的配置文件。（当然，它也会用于管理虚拟环境的依赖，即该文件中的<code>dependencies</code>字段）</p><p>通过<code>uv</code>有两种方法来安装包：</p><ol><li><strong>pip</strong>法：（不推荐）<figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv pip <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>这种方式类似于传统的<code>pip</code>，但它并不会写入<code>pyproject.toml</code>文件。</li><li><strong>uv add</strong>法：（推荐）<figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv <span class="token function">add</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>这种方式会自动将包添加到<code>pyproject.toml</code>文件中，并且会处理依赖关系。</li></ol><p>同时，当使用<strong>uv add</strong>法安装包时，<code>uv</code>还会更新一个名为<code>uv.lock</code>的文件，这个文件类似于<code>npm</code>的<code>package-lock.json</code>，用于锁定依赖版本，记录了项目所有依赖的精确版本（包括递归依赖）。</p><blockquote><p><code>uv sync</code>命令会根据<code>uv.lock</code>文件将 <code>.venv</code> 环境中的安装状态完全调整成 lockfile 中记录的内容。</p></blockquote><h2 id="3-5-Summary">3.5. Summary<a class="header-anchor" href="#3-5-Summary"> ¶</a></h2><p>简单总结一下<code>uv</code>的基本用法：</p><ul><li>创建虚拟环境：<code>uv venv</code> 或 <code>uv venv &lt;env_name&gt;</code>，可以用<code>--python</code>指定Python版本。</li><li>激活虚拟环境：通过<code>&lt;env_name&gt;/Scripts/activate</code>的脚本</li><li>退出虚拟环境：<code>deactivate</code></li><li>安装包：<ul><li>使用<code>uv pip install &lt;package_name&gt;</code>（不推荐）</li><li>使用<code>uv add &lt;package_name&gt;</code>（推荐）</li></ul></li></ul><h1 id="4-Use-uv-in-your-projects">4. Use <code>uv</code> in your projects<a class="header-anchor" href="#4-Use-uv-in-your-projects"> ¶</a></h1><h2 id="4-1-Initialize-a-project">4.1. Initialize a project<a class="header-anchor" href="#4-1-Initialize-a-project"> ¶</a></h2><p>实际上，我们还有一个<code>uv init</code>命令可以用来初始化一个新的项目，这个命令会自动创建<code>pyproject.toml</code>等关键文件，让你的新项目更加规范。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv init my_project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个命令会在当前目录下创建一个名为<code>my_project</code>的目录，并在其中生成所有项目基本文件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">my_project/├── .gitignore <span class="token comment"># git 忽略文件</span>├── .python-version <span class="token comment"># 记录 Python 版本的文件，以明文记录该项目使用的 Python 版本</span>├── main.py <span class="token comment"># 主程序文件</span>├── pyproject.toml <span class="token comment"># 项目配置文件</span>└── README.md <span class="token comment"># 项目说明文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此时，初始化<strong>并未</strong>完成！</p><p>接下来我们可以使用<code>uv run main.py</code>来运行项目的主程序。<br>在此之后项目的目录结构会变成这样：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">my_project/├── .venv <span class="token comment"># 虚拟环境目录</span>├── .gitignore├── .python-version├── main.py├── pyproject.toml├── README.md└── uv.lock <span class="token comment"># 锁定依赖版本的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>也就是说：在第一次通过<code>uv</code>运行项目后，<code>uv</code>会自动创建一个虚拟环境，并将其与项目关联起来。</p><h2 id="4-2-Add-dependencies">4.2. Add dependencies<a class="header-anchor" href="#4-2-Add-dependencies"> ¶</a></h2><p>之后我们就可以使用<code>uv add &lt;package_name&gt;</code>来安装项目所需的依赖包了。</p><blockquote><p>现在，检查一下你的<code>pyproject.toml</code>文件和<code>uv.lock</code>文件。或许可以考虑截图便于之后对比。</p></blockquote><p>让我们以<code>rich</code>库为例</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv <span class="token function">add</span> rich<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>之后可以观察到：</p><ol><li><code>pyproject.toml</code> 文件中会自动添加 <code>rich</code> 于 <code>dependencies</code> 字段中</li><li><code>uv.lock</code> 文件中会记录 <code>rich</code> 的具体版本和依赖关系（会有很多递归依赖，比如说<code>rich</code> 依赖于 <code>pygments</code>、<code>mdurl</code> 等等）</li><li><code>.venv</code> 目录中会安装 <code>rich</code> 及其所有依赖</li></ol><p>让我们修改一下<code>main.py</code> 文件，添加一些使用 <code>rich</code> 的代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rich <span class="token keyword">import</span> <span class="token keyword">print</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, uv!"</span><span class="token punctuation">)</span> <span class="token comment"># 不使用 rich 美化输出</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[bold green]Hello, uv![/bold green]"</span><span class="token punctuation">)</span>  <span class="token comment"># 使用 rich 美化输出</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>之后再运行这个项目：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv run main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>那么你就可以看到两种颜色的输出了：<br><img src="/img/TF/01/output.png" alt="Output with rich"></p><h1 id="5-结语">5. 结语<a class="header-anchor" href="#5-结语"> ¶</a></h1><p>我在写这篇文章的时候，还并没有很多的<code>uv</code>使用经验（毕竟<code>conda</code>和<code>pip</code>已经用三四年了，没有第一时间尝试<code>uv</code>），但我意识到越来越多的项目开始使用<code>uv</code>作为包管理器。因此第一时间写下这篇文章，分享给大家。</p><p>希望能帮到大家！</p><p>Have fun! 😉</p><h1 id="Reference">Reference<a class="header-anchor" href="#Reference"> ¶</a></h1><p><code>uv</code>官网: <a href="https://docs.astral.sh/uv/">https://docs.astral.sh/uv/</a></p>]]></content>
    
    
    <categories>
      
      <category>Towards Future</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>uv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「TF」00 Towards Future 系列简介</title>
    <link href="/2025/06/17/TF-00-Introduction/"/>
    <url>/2025/06/17/TF-00-Introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>我会在这个系列中分享一些有“未来感”的工具和技术，比如说<code>uv</code>这个被称为”下一代的Python包管理器“。</p><p>这个系列更多是分享和存放一些简单笔记，并非教程哦~</p><p>希望可以帮到你！</p><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>Towards Future</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>uv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「CB」02 创建并使用 Conda 虚拟环境</title>
    <link href="/2025/06/10/CB-02-Play-with-Conda/"/>
    <url>/2025/06/10/CB-02-Play-with-Conda/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-again">Hello again!<a class="header-anchor" href="#Hello-again"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>今天我们一口气完成这几件事：</p><ol><li>创建一个 Conda 虚拟环境</li><li>启用 / 查看 / 退出 环境</li><li>安装简单的 Python 库（你不一定会用到，但练习很重要！）</li><li>删除环境（练习完毕后清理环境）</li></ol><hr><h1 id="1-What-is-a-Virtual-Environment">1. What is a Virtual Environment?<a class="header-anchor" href="#1-What-is-a-Virtual-Environment"> ¶</a></h1><p>我们继续用 Minecraft 做比喻：</p><p>“虚拟环境”就像是你在 MC 启动器中创建的一个<strong>游戏实例（Instance）</strong>，每个实例有独立的 Minecraft 版本和 mod 配置，互不干扰。</p><p>在 Conda 中，虚拟环境就是让你为每个项目创建一个独立的 Python 配置，避免各种“版本地狱”和“删库重装”的悲剧发生。</p><hr><h1 id="2-Create-a-Virtual-Environment">2. Create a Virtual Environment<a class="header-anchor" href="#2-Create-a-Virtual-Environment"> ¶</a></h1><p>打开命令行，输入：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> my_first_env <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.12</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><code>-n my_first_env</code>：创建一个名为 <code>my_first_env</code> 的虚拟环境</li><li><code>python=3.12</code>：指定使用 Python 3.12 版本</li></ul><blockquote><p>Note:</p><ol><li>如果不写 <code>python=...</code>，则默认使用 Conda 当前最新版本</li><li>没写 <code>python</code> 的话，甚至不会自动装 Python！（这和空 Minecraft 一样，啥都跑不了）</li></ol></blockquote><p>Conda 会提示：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Proceed <span class="token punctuation">(</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>/n<span class="token punctuation">)</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>输入 <code>y</code>（或直接回车）即可。</p><hr><h1 id="3-Activate-the-Environment">3. Activate the Environment<a class="header-anchor" href="#3-Activate-the-Environment"> ¶</a></h1><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate my_first_env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>你会看到命令行提示符变成：（如果你使用的是 Windows）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>my_first_env<span class="token punctuation">)</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>YourName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这代表你已经“进入”这个虚拟环境。</p><blockquote><p>⚠️ 重点提示：在激活的环境下运行 <code>python</code> 或 <code>pip</code>，都会默认作用于该环境！</p></blockquote><p>退出环境：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>查看所有环境：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">env</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>或</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda info <span class="token parameter variable">--envs</span> <span class="token comment"># 我个人更习惯这个</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><hr><h1 id="4-Install-Some-Libraries">4. Install Some Libraries<a class="header-anchor" href="#4-Install-Some-Libraries"> ¶</a></h1><p>可以使用 <code>conda</code> 或 <code>pip</code> 安装常见的第三方库：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> numpy pandas matplotlib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>或者：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> numpy pandas matplotlib <span class="token comment"># 个人更习惯这个</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这些是数据分析最基础的三大件：</p><ul><li><code>numpy</code>, <code>pandas</code>：数据处理工具</li><li><code>matplotlib</code>：绘图工具</li></ul><p>你可以随便装点什么来练练手，比如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> rich<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这是一个超漂亮的终端输出美化库！</p><hr><h1 id="5-Delete-Remove-your-Environment😈">5. Delete (Remove) your Environment😈<a class="header-anchor" href="#5-Delete-Remove-your-Environment😈"> ¶</a></h1><p>不想要某个环境时，可以直接删除它：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove <span class="token parameter variable">-n</span> my_first_env <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>Note：这个命令不会有“回收站”，而是直接删除环境及其所有内容！请确保你真的不需要它了。</p></blockquote><hr><h1 id="6-Practice-Can-you-do-it">6. Practice: Can you do it?<a class="header-anchor" href="#6-Practice-Can-you-do-it"> ¶</a></h1><p>现在你已经会：</p><ul><li>创建 / 激活 / 查看 / 退出 环境</li><li>安装简单的库</li><li>删除环境</li></ul><p>试试看：</p><ol><li><p>创建一个叫做 <code>practice</code> 的新环境，使用 Python 3.10</p></li><li><p>激活它并安装 <code>numpy</code> 和 <code>rich</code></p></li><li><p>在安装这些库后，运行一个简单的 Python 脚本，打印出“Hello, Conda!”并使用 <code>rich</code> 美化输出</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rich <span class="token keyword">import</span> <span class="token keyword">print</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"(Regular) Hello, Conda!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"(Bold Green) [bold green]Hello, Conda![/bold green]"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>在确保激活这个脚本的情况下，运行它：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python your_script.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果你看到如下图的输出，那么恭喜你成功了！（我的终端自定义了颜色方案，因此色彩可能与你的不同）<br><img src="/img/CB/03/rich_output.png" alt="Rich Output Example"></p></li><li><p>最后，删除它吧，毕竟练习后就用不到这个单独的环境啦。</p></li><li><p>检查自己的环境列表确定它已被删除。</p></li></ol><blockquote><p>Tips: 如果你在运行脚本时发现以下报错，请检查自己是否激活了环境：<br><img src="/img/CB/03/error.png" alt="Error Example"></p></blockquote><h1 id="7-More-to-do">7. More to do?<a class="header-anchor" href="#7-More-to-do"> ¶</a></h1><p>按个人使用习惯，我推荐接下来继续学习在 VSCode 中 使用 JupyterNotebook。</p><p>详见：<a href="/2025/01/03/EP-02-Jupyter_with_Vscode/" title="「EP」02 在Vscode中使用Jupyter Notebook（重制）">「EP」02 在Vscode中使用Jupyter Notebook（重制）</a></p><p>（也建议查看整个<code>Easy Python</code>系列，了解更多 Python 基础知识）</p><h1 id="结语">结语<a class="header-anchor" href="#结语"> ¶</a></h1><p>你，已经入门啦！🎉</p><p>未来等待你的是各种环境变量错误和没见过的bug，但是，只要不当“CV工程师”，相信你能通过善用搜索工具解决它们！</p><p>Have fun, see you next time!</p>]]></content>
    
    
    <categories>
      
      <category>Conda Beginner</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「CB」01 安装 Miniconda</title>
    <link href="/2025/03/07/CB-01-Miniconda-Installation/"/>
    <url>/2025/03/07/CB-01-Miniconda-Installation/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>本章我们将结合<code>Minecraft</code>介绍什么是<code>Conda</code>，为什么不选择更为熟知的<code>Anaconda</code>，以及如何安装<code>Miniconda</code>。</p><h1 id="1-What’s-Conda">1. What’s Conda?<a class="header-anchor" href="#1-What’s-Conda"> ¶</a></h1><h2 id="1-1-What-to-be-managed-Libraries">1.1. What to be managed? - <code>Libraries</code><a class="header-anchor" href="#1-1-What-to-be-managed-Libraries"> ¶</a></h2><p>在<code>Python</code>的使用中，<code>库</code>（<code>library</code>）或者说<code>包</code>（<code>package</code>）是一种常有的使用非原生工具的方式。</p><p>如果我们用<code>Minecraft</code>与之相比，<code>库</code>就像是<code>Minecraft</code>中的<code>mod</code>，为原版游戏提供了更多的方块、物品和功能。</p><p>比如说，原版中的动物非常有限，<a href="https://gamerant.com/minecraft-raccoon-mob-cute-good/">即便是高版本也只有20种左右</a>。</p><p><img src="/img/CB/02/minecraft-animal-mobs.png" alt="Limited Animals in Minecraft"></p><p>然而，通过<code>mod</code>我们可以添加更多的动物。比如说经典的<a href="https://modrinth.com/mod/alexs-mobs"><code>Alex's Mobs</code></a>，为游戏提供了<strong>上百种</strong>新的动物！</p><p><img src="/img/CB/02/alexs_mobs.png" alt="Alex's Mobs"></p><p><code>库</code>正如同<code>mod</code>，以<code>matplotlib</code>为例，它能够为我们提供更为丰富的图表绘制功能，如<a href="https://coding-blocks.github.io/DS-NOTES/1.2%20Introduction%20to%20Matplotlib.html">下图</a>所示：</p><p><img src="/img/CB/02/matplotlib_examples.png" alt="Matplotlib Examples"></p><p>简单来说，<code>库</code>就是一些可以提供额外功能的代码，安装后即能快速使用原版<code>Python</code>无法提供的功能。</p><h2 id="1-2-Why-to-manage">1.2. Why to manage?<a class="header-anchor" href="#1-2-Why-to-manage"> ¶</a></h2><p>虽然<code>库</code>非常方便，但是在安装时我们总会遇到一些问题，其中最大的其对的<code>Python版本</code>的<strong>依赖</strong>以及<code>库</code>之间的<strong>冲突</strong>。</p><!-- 版本冲突 --><h3 id="1-2-1-Version-Dependency">1.2.1. Version Dependency<a class="header-anchor" href="#1-2-1-Version-Dependency"> ¶</a></h3><p>和<code>Minecraft</code>一样，一些<code>mod</code>只能在特定的版本中使用，这主要取决于作者是否发布了对应版本的<code>mod</code>。</p><p>如图所示，即便是有着<strong>1.49M</strong>下载量（数字还在不断增加）的<code>Alex's Mobs</code>，其支持的最低版本也仅为<code>1.16.5</code>。而如果你同时想在游戏中游玩另一个经典的模组<code>Industrial Craft II</code>（<code>工业时代2</code>）</p><p><img src="/img/CB/02/ver_alex.png" alt="Version of Alex's Mobs"></p><p><img src="/img/CB/02/ic2.png" alt="Version of Industrial Craft II"></p><!-- 库冲突 --><h3 id="1-2-2-Library-Conflict">1.2.2. Library Conflict<a class="header-anchor" href="#1-2-2-Library-Conflict"> ¶</a></h3><p><code>库</code>版本的冲突也是<code>Python</code>和<code>Minecraft</code>中存在的问题，不过并不会特别频繁地出现。</p><p>个人遇到这种问题主要是因为急于使用最新版本的<code>库</code>或<code>模组</code>，而一些<code>库</code>或<code>模组</code>中却限制了其依赖的最高版本。（比如说，<code>A</code>作为<code>B</code>的依赖库，<code>B</code>限制了<code>A</code>的版本为<code>&lt;=1.0.0</code>，而我们安装了<code>A</code>的最新版本<code>1.0.1</code>，这时会导致安装<code>B</code>的时候出现错误）</p><h2 id="1-3-How-to-manage-Conda">1.3 How to manage? - <code>Conda</code><a class="header-anchor" href="#1-3-How-to-manage-Conda"> ¶</a></h2><p><code>Conda</code>拥有着强大的功能——创建并管理<code>虚拟环境</code>（<code>virtual environment</code>），它可以让我们在同一台设备上安装多个版本的<code>Python</code>和<code>库</code>，并且互不干扰。</p><p>其类似于<code>Minecraft</code>中的一些常见启动器，比如说<code>MultiMC</code>，<code>PCLauncher</code>和<code>HMCL</code>等，你只需安装一个启动器便可以安装并管理多个<strong>不同版本</strong>，分别装有<strong>不同模组</strong>的<code>Minecraft</code>。</p><h1 id="2-Why-not-Anaconda">2. Why not <code>Anaconda</code>?<a class="header-anchor" href="#2-Why-not-Anaconda"> ¶</a></h1><p>然而，相比与本系列中使用的<code>Miniconda</code>，<code>Anaconda</code>是一个更广为人知的选择。下表简要对比了两者的区别：</p><table><thead><tr><th>对比项</th><th>Anaconda</th><th>Miniconda</th></tr></thead><tbody><tr><td>预装包数量</td><td>大量（NumPy、Pandas、Jupyter 等）</td><td>仅基本的 conda 和 Python</td></tr><tr><td>体积</td><td>951MB</td><td>89MB</td></tr><tr><td>灵活性</td><td>预装大量工具，可能不全用得上</td><td>只安装需要的包，自由定制</td></tr></tbody></table><p>其实在我自己看来，大部分需要使用<code>Conda</code>的用户都不需要<code>Anaconda</code>提供的额外功能。</p><p>正如玩家在下载启动器玩MC的时候一定是想安装一个自己想要玩的模组，而不是下载一个已经包含一些你很可能不会游玩的整合包的巨大压缩包。</p><ul><li>Note：<code>Anaconda</code>不仅安装包体积非常大，而且安装后会占用更多的存储空间！</li></ul><h1 id="3-Installation-of-Miniconda">3. Installation of <code>Miniconda</code><a class="header-anchor" href="#3-Installation-of-Miniconda"> ¶</a></h1><h2 id="3-1-Download-Installer">3.1. Download Installer<a class="header-anchor" href="#3-1-Download-Installer"> ¶</a></h2><p>让我们跳过一堆烦人的点击，直击安装包下载的网页：<br><a href="https://www.anaconda.com/download/success">Miniconda Download</a></p><p>⚠️注意：这个页面提供了两种不同的安装包，分别是<code>Anaconda</code>和<code>Miniconda</code>，请确保下载靠下方的<code>Miniconda</code>安装包。</p><p><img src="/img/CB/02/installer.png" alt="Miniconda Download Page"></p><h2 id="3-2-Install-Miniconda">3.2. Install Miniconda<a class="header-anchor" href="#3-2-Install-Miniconda"> ¶</a></h2><p>这里我们只探讨<code>Windows</code>的安装方式，其他系统的安装方式也能在网络中找到其他的教程。</p><p>打开安装程序（一般叫做<code>Miniconda3-latest-Windows-x86_64.exe</code>，<code>exe</code>指<code>executable</code>，是<code>Windows</code>下的可执行文件，即双击后可以运行的文件），之后会弹出一个安装向导。</p><p>对于大部分选项，默认即可，但是仍有一两个很重要的地方要注意：</p><ul><li><strong>选择安装路径</strong>：这个路径决定了你的<code>Conda</code>以及未来安装的<code>库</code>和<code>虚拟环境</code>的存放位置。建议选择一个空间足够的地方，比如说<code>D:\Miniconda3</code>。（所以说，在这个高速固态硬盘时代，这个笔记本电脑没有必要分<code>C</code>、<code>D</code>盘的时代，纯使用<code>C</code>盘真的可以省去很多麻烦！）<ul><li>虽然未来也可以进行更改<code>库</code>和<code>虚拟环境</code>的存放位置，但是你也不想再花时间去修改吧？</li></ul></li><li><strong>添加到环境变量</strong>：这个选项决定了你是否可以在命令行中直接使用<code>conda</code>命令。<ul><li>虽然<code>Conda</code>提供了一个<code>Anaconda Prompt</code>的命令行工具（无论是<code>Anaconda</code>还是<code>Miniconda</code>都会安装这个工具），但是我仍然建议你选择这个选项。</li></ul></li></ul><p><img src="/img/CB/02/option.png" alt="Add PATH env variable"></p><h2 id="3-3-Verify-Installation">3.3. Verify Installation<a class="header-anchor" href="#3-3-Verify-Installation"> ¶</a></h2><p>安装完成后，我们可以打开任意终端，如<code>cmd</code>、<code>PowerShell</code>，并输入以下命令来验证<code>Conda</code>是否安装成功：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果安装成功，你应该能看到类似于下面的输出：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token number">25.1</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果报错<code>'conda' is not recognized as an internal or external command, operable program or batch file.</code>，说明<code>Conda</code>没有添加到环境变量中。你可以尝试重启电脑来重新加载环境变量，之后再试一次。</p><p>如果还是不行，或许是你在安装时没有选择添加到环境变量中。你可以手动添加或干脆卸载<code>Miniconda</code>，并重新安装。</p><h1 id="结语">结语<a class="header-anchor" href="#结语"> ¶</a></h1><p>祝你接下来的学习一切顺利！</p><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>Conda Beginner</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CELN] 01 本地部署大模型 + 简单 HTML 交互界面</title>
    <link href="/2025/02/22/CELN-01-Ollama_HTML/"/>
    <url>/2025/02/22/CELN-01-Ollama_HTML/</url>
    
    <content type="html"><![CDATA[<h1 id="1-简介活动目标">1. 简介活动目标<a class="header-anchor" href="#1-简介活动目标"> ¶</a></h1><p>本次 Workshop 主要目标是：</p><ul><li>通过 <strong>Ollama</strong> 运行 <code>deepseek-r1</code> <strong>1.5B</strong> 模型，体验 reasoning 模型的推理过程。</li><li>使用 <strong>HTML</strong> 搭建一个简易的交互式界面。</li><li>在有时间的情况下，尝试实现简单的 <strong>记忆功能</strong>（将对话存入 JSON）。</li></ul><h1 id="2-Ollama-的安装">2. Ollama 的安装<a class="header-anchor" href="#2-Ollama-的安装"> ¶</a></h1><p>Ollama 是一个轻量级的 LLM 运行框架，支持本地模型推理。</p><p>📄下载地址：<a href="https://ollama.com/download">https://ollama.com/download</a></p><p>安装完成后，使用以下命令检查是否安装成功：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ollama <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果输出如下版本号，则安装成功：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ollama version is <span class="token number">0.5</span>.10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="3-Ollama-下载并运行模型">3. Ollama 下载并运行模型<a class="header-anchor" href="#3-Ollama-下载并运行模型"> ¶</a></h1><p>使用以下命令下载 <code>deepseek-r1</code> <strong>1.5B</strong> 模型（大小约<code>1.1GB</code>），并启动：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ollama pull deepseek-r1:1.5B <span class="token comment"># 拉取（下载）模型</span>ollama run deepseek-r1 <span class="token comment"># 运行模型（进入交互式命令行）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>运行成功后，可在命令行中输入问题，模型将返回答案。</p><p>一些常用的快捷键：</p><ul><li>按下<code>Ctrl + D</code>可退出交互式命令行</li><li>按下<code>Ctrl + C</code>可打断当前对话，并重新输入问题</li><li>按下<code>Ctrl + L</code>可清空屏幕（仍然可以通过滑轮查看历史记录）</li></ul><p>以下是一个简单的命令行中的演示效果：</p><p><img src="/img/CELN/01-demo.gif" alt="Demo"></p><p>其中<code>&lt;think&gt;&lt;/think&gt;</code>标签中的内容是模型的推理过程，而在其之后的才是模型真正的回答。</p><h1 id="4-HTML-简介">4. HTML 简介<a class="header-anchor" href="#4-HTML-简介"> ¶</a></h1><blockquote><p>我们不需要成为专业的前端开发者，只需要了解 HTML 的基本概念，就可以搭建一个简单的交互界面。（毕竟我们能求助AI辅助开发！）</p></blockquote><h2 id="4-1-HTML-的核心：标签">4.1 HTML 的核心：标签<a class="header-anchor" href="#4-1-HTML-的核心：标签"> ¶</a></h2><p>HTML 是前端开发的基础语言，其主要思路是通过一个个标签对页面进行描述。</p><p><strong>示例代码：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是一个区块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>只要是成对的<code>&lt;xx&gt;</code>和<code>&lt;/xx&gt;</code>标签，就可以将内容包裹在其中，无论其名字是什么。</p><p>只是不同的标签有不同的功能，以及默认样式。</p><h2 id="4-2-HTML-的两大帮手：CSS-和-JavaScript">4.2 HTML 的两大帮手：CSS 和 JavaScript<a class="header-anchor" href="#4-2-HTML-的两大帮手：CSS-和-JavaScript"> ¶</a></h2><ul><li><strong>CSS</strong>：用于控制页面的样式，如字体、颜色、布局等。</li><li><strong>JavaScript</strong>：用于控制页面的行为，如点击事件、动画效果等。</li></ul><p>它们既可以用单独的文件储存，并在 HTML 中引用，也可以直接写在 HTML 文件中。这里我们使用后者。</p><h1 id="5-简单的-HTML-界面实现">5. 简单的 HTML 界面实现<a class="header-anchor" href="#5-简单的-HTML-界面实现"> ¶</a></h1><p>我们创建一个最简单的 HTML 页面，包含：</p><ul><li>一个 <strong>输入框</strong> 供用户输入问题。</li><li>一个 <strong>按钮</strong> 发送请求。</li><li>一个 <strong>显示框</strong> 展示 AI 回复。</li></ul><p>我们完全可以求助刚才安装好的 <strong>deepseek-r1</strong> 模型，让 AI 帮我们写一个简单的 HTML 页面。</p><p>我是这么问它的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">请帮我写一个用于制作与本地大模型交互的 HTML 页面。具体要求如下：1. 只需要包含一个大标题，一个输入框（用于给用户输入内容）、一个提交按钮（用于提交输入的信息）和一个显示框（用于显示大模型的返回）即可。2. 不需要有任何实际功能（不需要JavaScript代码），只需要基本的结构即可。3. 可以添加简单的样式，但是不应过于复杂<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>请注意，由于大模型输出的是 <strong>Markdown</strong> 格式，所以代码会包含在 “```html” 和 “```” 之间。<br>当输出结果不理想时，你完全可以再次询问，也可以去问更强大的AI（毕竟我们使用的仅仅是1.5B的蒸馏模型，相比于原版671B的完整模型还是有很大差距的）。</p></blockquote><p>以下是一个简单的 HTML 页面示例：（由<code>ChatGPT-4o</code>生成）</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>本地大模型交互<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #f4f4f4<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">h1</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">input</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">button</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #007BFF<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">button:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #0056b3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.output</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>            <span class="token property">min-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>本地大模型交互<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入内容...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="6-后端交互功能实现">6. 后端交互功能实现<a class="header-anchor" href="#6-后端交互功能实现"> ¶</a></h1><h2 id="6-1-Ollama-API">6.1 Ollama API<a class="header-anchor" href="#6-1-Ollama-API"> ¶</a></h2><p>在实际应用中，前后端的交互主要是通过 <strong>API</strong> 实现的。</p><p>首先，Ollama 提供了一个 <strong>HTTP API</strong>，可以通过 <strong>POST</strong> 请求发送问题，并返回回答。</p><p>在确认 <strong>Ollama</strong> 运行时，我们可以尝试以下一系列 <strong>POST</strong> 请求：</p><ol><li><p>获取所有模型列表：</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:11434/api/tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>请求模型信息：</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:11434/api/show <span class="token parameter variable">-d</span> <span class="token string">'&#123;  "model": "deepseek-r1:1.5B"&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>生成回答：</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:11434/api/chat <span class="token parameter variable">-d</span> <span class="token string">'&#123;  "model": "deepseek-r1:1.5B",  "messages": [    &#123;      "role": "user",      "content": "why is the sky blue?"    &#125;  ]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：由于是Ollama可以通过流式回答，所以其在回答时会出现非常多行的回复，每一行都是完整回答中的一个词。</p></blockquote></li></ol><p>📄更多用法见官方文档：<a href="https://github.com/ollama/ollama/blob/main/docs/api.md">https://github.com/ollama/ollama/blob/main/docs/api.md</a></p><h2 id="6-2-JavaScript-实现">6.2 JavaScript 实现<a class="header-anchor" href="#6-2-JavaScript-实现"> ¶</a></h2><blockquote><p>⚠️ 注意：由于 <strong>CORS</strong> 限制，浏览器不允许直接从本地主机（<code>localhost</code>）请求数据。<br>我的解决方案是<strong>临时地</strong>修改（添加）环境变量。<br>Windows:<br>添加环境变量<code>OLLAMA_ORIGINS</code>，值为<code>*</code>。<br>Linux&amp;Mac:<br>添加环境变量<code>export OLLAMA_ORIGINS=*</code>。<br>之后重启Ollama服务即可应用（如果不行，可以尝试重启电脑）。</p><p>请注意，这样做会使得所有的网站都可以访问你的Ollama服务，所以请在使用完毕后及时删除这个环境变量。</p></blockquote><p>以下 JavaScript 可以为 HTML 提供与 <strong>Ollama API</strong> 的交互功能。</p><p>你需要：</p><ul><li>将其放入<code>&lt;body&gt;</code>标签中。</li><li>在 HTML 中添加一个 <code>id</code> 为 <code>model-input</code>的<code>&lt;input&gt;</code>元素。</li><li>在 HTML 中添加一个 <code>id</code> 为 <code>model-submit</code>的<code>&lt;button&gt;</code>元素。</li><li>在 HTML 中添加一个 <code>id</code> 为 <code>model-output</code>的<code>&lt;div&gt;</code>元素。</li><li>（可选）在 HTML 中添加一个 <code>id</code> 为 <code>save-chat</code>的<code>&lt;button&gt;</code>元素，用于保存对话为 JSON 文件。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-submit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> saveButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"save-chat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存对话按钮</span>        <span class="token keyword">let</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储所有对话</span>        button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> userMessage <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userMessage<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token comment">// 记录用户输入并添加到对话框</span>            messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> userMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            output<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="user-msg">&lt;b>你:&lt;/b> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userMessage<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token comment">// 清空输入框</span>            input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token comment">// 在对话框中添加占位符，模型回复将在此处更新</span>            <span class="token keyword">const</span> messageContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            messageContainer<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"model-msg"</span><span class="token punctuation">;</span>            messageContainer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;b>模型:&lt;/b> &lt;span class="model-response">&lt;/span>&lt;br>&lt;br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            output<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>messageContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> responseSpan <span class="token operator">=</span> messageContainer<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".model-response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:11434/api/chat"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>                    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                        <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">"deepseek-r1:1.5B"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> userMessage <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No response body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">const</span> reader <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> fullResponse <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    buffer <span class="token operator">+=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">stream</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">let</span> lines <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理未完成的 JSON 片段</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> line <span class="token keyword">of</span> lines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    fullResponse <span class="token operator">+=</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                                    responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> fullResponse<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"解析 JSON 失败:"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 处理剩余的 JSON 片段</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            fullResponse <span class="token operator">+=</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                            responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> fullResponse<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"解析 JSON 失败:"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 保存模型的完整回复</span>                messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> fullResponse <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请求失败:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>                responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;b>请求失败:&lt;/b> 请检查 Ollama 是否运行。"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 保存对话到 JSON</span>        saveButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> jsonBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>messages<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>jsonBlob<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">"chat_history.json"</span><span class="token punctuation">;</span> <span class="token comment">// 让用户下载 JSON 文件</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>😉 如果你成功地运行了这段代码，不妨拍张照片或者录制一个视频，分享给别人看看吧！</p></blockquote><h2 id="6-3-成果展示">6.3 成果展示<a class="header-anchor" href="#6-3-成果展示"> ¶</a></h2><p><img src="/img/CELN/01-html02.png" alt="Demonstration"></p><h1 id="7-记忆功能实现">7. 记忆功能实现<a class="header-anchor" href="#7-记忆功能实现"> ¶</a></h1><p>目前的代码已经实现了简单的记忆功能，但是其实现方式并不能让AI拥有真正的记忆。我们的解决方案是简单粗暴地在提问的时将目前的所有对话都传给AI。</p><p>遗憾的是，放眼现有的AI技术，虽然有如<a href="https://github.com/letta-ai/letta">Letta</a>一样的项目致力于实现AI的记忆功能，但是目前还没有一个能够真正实现完美记忆的AI。</p><h1 id="8-Open-WebUI-更好的交互体验">8. Open WebUI: 更好的交互体验<a class="header-anchor" href="#8-Open-WebUI-更好的交互体验"> ¶</a></h1><p>如果没搞懂以上的响应式网页代码，你也可以尝试使用 <strong>Open WebUI</strong>。推荐的原因是它的安装可以通过我们熟悉的<code>pip</code>来完成，并且其有一个非常友好的界面。</p><ul><li><strong><a href="https://github.com/open-webui/open-webui">Open WebUI 项目地址</a></strong>：Open WebUI is an extensible, feature-rich, and user-friendly self-hosted AI platform designed to operate entirely offline.</li></ul><h2 id="8-1-简略的安装步骤">8.1 简略的安装步骤<a class="header-anchor" href="#8-1-简略的安装步骤"> ¶</a></h2><ol><li><p>创建并进入用于存放 Open WebUI 的虚拟环境：</p><blockquote><p>你完全可以将其安装在已有的虚拟环境中，不必单独为其创建一个虚拟环境。</p></blockquote> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> local-llm python <span class="token comment"># local-llm 是环境名，可以自定义</span>conda activate local-llm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><p>安装 Open WebUI：</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> open-webui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>运行 Open WebUI：</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">open-webui serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>默认情况下，Open WebUI 会在<code>http://localhost:8080</code>上运行。</p></li><li><p>打开浏览器，访问<code>http://localhost:8080</code>，即可看到 Open WebUI 的界面。</p><blockquote><p>⚠️注意：Open WebUI 会在第一次使用时要求创建用户，而这个用户信息是完全本地保存的，可以随意设置，但请务必记住（建议使用浏览器的密码管理器）。</p></blockquote></li></ol><p><img src="/img/CELN/01-open-webui.png" alt="Open WebUI"></p><h1 id="9-总结">9. 总结<a class="header-anchor" href="#9-总结"> ¶</a></h1><p>通过本次 Workshop，我们实现了：<br>✅ 使用 <strong>Ollama</strong> 本地运行 <strong>DeepSeek</strong> 模型。<br>✅ 通过 <strong>HTML + JavaScript</strong> 构建交互界面。<br>✅ 在有时间的情况下，扩展支持简单的对话记忆。</p><p>希望本次 Workshop 能帮助大家理解 <strong>本地大模型推理</strong> 和 <strong>前端交互</strong> 的基础概念，期待在下次 <strong>CELN Workshop</strong> 见到大家！🚀</p><blockquote><p>😉 希望大家能分享活动的照片或视频！无论是成功的代码运行截图，还是大家一起学习的场景，都可以分享给大家看看！</p></blockquote><h1 id="10-附录：完整示例代码">10. 附录：完整示例代码<a class="header-anchor" href="#10-附录：完整示例代码"> ¶</a></h1><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>本地大模型交互<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>                <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>                <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>                <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> #f4f4f4<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">h1</span> <span class="token punctuation">&#123;</span>                <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>                <span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>                <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">input</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">button</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> #007BFF<span class="token punctuation">;</span>                <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>                <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">button:hover</span> <span class="token punctuation">&#123;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> #0056b3<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">.output</span> <span class="token punctuation">&#123;</span>                <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>                <span class="token property">min-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>本地大模型交互<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入内容...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model-submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model-output<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save-chat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>保存对话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-submit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> saveButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"save-chat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存对话按钮</span>                <span class="token keyword">let</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储所有对话记录</span>                <span class="token comment">// 监听 Enter 键提交</span>                input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"keydown"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">"Enter"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止默认换行行为</span>                        button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发点击事件</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> userMessage <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userMessage<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token comment">// 记录用户输入并添加到对话框</span>                    messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> userMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    output<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="user-msg">&lt;b>你:&lt;/b> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userMessage<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                    <span class="token comment">// 清空输入框</span>                    input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token comment">// 在对话框中添加占位符，模型回复将在此处更新</span>                    <span class="token keyword">const</span> messageContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    messageContainer<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"model-msg"</span><span class="token punctuation">;</span>                    messageContainer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;b>模型:&lt;/b> &lt;span class="model-response">&lt;/span>&lt;br>&lt;br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                    output<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>messageContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> responseSpan <span class="token operator">=</span> messageContainer<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".model-response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:11434/api/chat"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>                            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                                <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">"deepseek-r1:1.5B"</span><span class="token punctuation">,</span>                                <span class="token literal-property property">messages</span><span class="token operator">:</span> messages <span class="token comment">// 传递完整对话历史</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No response body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">const</span> reader <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                        <span class="token keyword">let</span> fullResponse <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                            buffer <span class="token operator">+=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">stream</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">let</span> lines <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            buffer <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理未完成的 JSON 片段</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> line <span class="token keyword">of</span> lines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                        <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                            fullResponse <span class="token operator">+=</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                                            responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> fullResponse<span class="token punctuation">;</span>                                        <span class="token punctuation">&#125;</span>                                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"解析 JSON 失败:"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">&#125;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 处理剩余的 JSON 片段</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    fullResponse <span class="token operator">+=</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                                    responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> fullResponse<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"解析 JSON 失败:"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 保存模型的完整回复</span>                        messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> fullResponse <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请求失败:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>                        responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;b>请求失败:&lt;/b> 请检查 Ollama 是否运行。"</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 保存对话到 JSON</span>                saveButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> jsonBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>messages<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>jsonBlob<span class="token punctuation">)</span><span class="token punctuation">;</span>                    a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">"chat_history.json"</span><span class="token punctuation">;</span> <span class="token comment">// 让用户下载 JSON 文件</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                    a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>CELN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CELN</tag>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CELN] 01 Deploying Large Models Locally + Simple HTML Interactive Interface</title>
    <link href="/2025/02/22/CELN-01-Ollama_HTML_en/"/>
    <url>/2025/02/22/CELN-01-Ollama_HTML_en/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Workshop-Objectives">1. Workshop Objectives<a class="header-anchor" href="#1-Workshop-Objectives"> ¶</a></h1><p>The main goals of this workshop are:</p><ul><li>Running the <code>deepseek-r1</code> <strong>1.5B</strong> model using <strong>Ollama</strong> to experience the reasoning process of a large model.</li><li>Using <strong>HTML</strong> to build a simple interactive interface.</li><li>If time permits, attempting to implement a simple <strong>memory function</strong> (storing conversations in JSON).</li></ul><h1 id="2-Installing-Ollama">2. Installing Ollama<a class="header-anchor" href="#2-Installing-Ollama"> ¶</a></h1><p>Ollama is a lightweight framework for running large language models (LLMs) locally.</p><p>📄 Download link: <a href="https://ollama.com/download">https://ollama.com/download</a></p><p>After installation, check if it was successful by running:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ollama <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>If the output shows a version number like:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ollama version is <span class="token number">0.5</span>.10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>then the installation was successful.</p><h1 id="3-Downloading-and-Running-the-Ollama-Model">3. Downloading and Running the Ollama Model<a class="header-anchor" href="#3-Downloading-and-Running-the-Ollama-Model"> ¶</a></h1><p>Use the following command to download the <code>deepseek-r1</code> <strong>1.5B</strong> model (approximately <code>1.1GB</code>) and start it:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ollama pull deepseek-r1:1.5B <span class="token comment"># Download the model</span>ollama run deepseek-r1 <span class="token comment"># Run the model (enter interactive command line)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>Once running, you can type a question in the command line, and the model will return an answer.</p><p>Common shortcuts:</p><ul><li>Press <code>Ctrl + D</code> to exit the interactive command line.</li><li>Press <code>Ctrl + C</code> to interrupt the current conversation and input a new question.</li><li>Press <code>Ctrl + L</code> to clear the screen (history remains accessible via scroll).</li></ul><p>Below is a simple demonstration in the command line:</p><p><img src="/img/CELN/01-demo.gif" alt="Demo"></p><p>Content inside <code>&lt;think&gt;&lt;/think&gt;</code> tags represents the model’s reasoning process, followed by its actual response.</p><h1 id="4-Introduction-to-HTML">4. Introduction to HTML<a class="header-anchor" href="#4-Introduction-to-HTML"> ¶</a></h1><blockquote><p>We don’t need to be professional front-end developers—just understanding the basics of HTML is enough to build a simple interactive interface. (After all, we can ask AI for help!)</p></blockquote><h2 id="4-1-The-Core-of-HTML-Tags">4.1 The Core of HTML: Tags<a class="header-anchor" href="#4-1-The-Core-of-HTML-Tags"> ¶</a></h2><p>HTML is the fundamental language for front-end development, structured through various tags to describe the page.</p><p><strong>Example Code:</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>This is a section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>Any content enclosed within <code>&lt;tag&gt;&lt;/tag&gt;</code> can be structured accordingly, with different tags serving different purposes and default styles.</p><h2 id="4-2-HTML’s-Two-Helpers-CSS-and-JavaScript">4.2 HTML’s Two Helpers: CSS and JavaScript<a class="header-anchor" href="#4-2-HTML’s-Two-Helpers-CSS-and-JavaScript"> ¶</a></h2><ul><li><strong>CSS</strong>: Controls page styles such as fonts, colors, and layouts.</li><li><strong>JavaScript</strong>: Controls page behavior, such as click events and animations.</li></ul><p>They can be stored separately or embedded directly within an HTML file. Here, we use the latter approach.</p><h1 id="5-Implementing-a-Simple-HTML-Interface">5. Implementing a Simple HTML Interface<a class="header-anchor" href="#5-Implementing-a-Simple-HTML-Interface"> ¶</a></h1><p>We will create a basic HTML page containing:</p><ul><li>An <strong>input box</strong> for user input.</li><li>A <strong>button</strong> to submit the input.</li><li>A <strong>display box</strong> to show AI responses.</li></ul><p>We can ask our installed <strong>deepseek-r1</strong> model to help generate a simple HTML page.</p><p>Example prompt:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Please help me create an HTML page for interacting with a local large model.Requirements:1. Include only a title, an input box (for user input), a submit button (to submit input), and a display box (to show the model’s response).2. No need for actual functionality (no JavaScript code), just the basic structure.3. Keep the styling simple and not too complex.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>Please note that the output is in <strong>Markdown</strong> format, so the code will be enclosed in “```html” and “```”.<br>If the output is not satisfactory, feel free to ask again or consult a more powerful AI (after all, we are using a 1.5B distilled model, which is still far from the full 671B model).</p></blockquote><p>The following is an HTML example generated by <code>ChatGPT-4o</code>:</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Local AI Interaction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #f4f4f4<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">input, button</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">button</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #007BFF<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Local AI Interaction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter a message...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="6-Implementing-Backend-Interaction">6. Implementing Backend Interaction<a class="header-anchor" href="#6-Implementing-Backend-Interaction"> ¶</a></h1><h2 id="6-1-Ollama-API">6.1 Ollama API<a class="header-anchor" href="#6-1-Ollama-API"> ¶</a></h2><p>In real applications, frontend and backend interactions are mainly realized through <strong>APIs</strong>.</p><p>Ollama provides an <strong>HTTP API</strong> that allows sending questions via <strong>POST</strong> requests and receiving answers in response.</p><p>To confirm that <strong>Ollama</strong> is running, you can try the following <strong>POST</strong> requests:</p><ol><li><p>Get a list of all available models:</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:11434/api/tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>Request model information:</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:11434/api/show <span class="token parameter variable">-d</span> <span class="token string">'&#123;  "model": "deepseek-r1:1.5B"&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>Generate a response:</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:11434/api/chat <span class="token parameter variable">-d</span> <span class="token string">'&#123;  "model": "deepseek-r1:1.5B",  "messages": [    &#123;      "role": "user",      "content": "Why is the sky blue?"    &#125;  ]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>Note: Since Ollama supports streaming responses, it may return multiple lines, with each line containing part of the complete response.</p></blockquote></li></ol><p>📄 More details in the official documentation: <a href="https://github.com/ollama/ollama/blob/main/docs/api.md">https://github.com/ollama/ollama/blob/main/docs/api.md</a></p><h2 id="6-2-Implementing-JavaScript-Interaction">6.2 Implementing JavaScript Interaction<a class="header-anchor" href="#6-2-Implementing-JavaScript-Interaction"> ¶</a></h2><blockquote><p>⚠️ <strong>CORS Restrictions</strong>: By default, browsers do not allow direct requests from <code>localhost</code> to the local server.<br>A <strong>temporary</strong> solution is to modify the environment variable to allow cross-origin requests.</p><ul><li><strong>Windows:</strong> Add the environment variable <code>OLLAMA_ORIGINS</code> with the value <code>*</code>.</li><li><strong>Linux &amp; Mac:</strong> Set the environment variable with <code>export OLLAMA_ORIGINS=*</code>.</li></ul><p>Then restart the Ollama service for the changes to take effect (if it still doesn’t work, try rebooting the system).</p><p>Be cautious: This makes the Ollama service accessible to all websites. Remember to remove the variable after use.</p></blockquote><p>The following JavaScript code provides interactive functionality between <strong>HTML</strong> and <strong>Ollama API</strong>.</p><h3 id="Steps-to-integrate-into-HTML">Steps to integrate into HTML:<a class="header-anchor" href="#Steps-to-integrate-into-HTML"> ¶</a></h3><ul><li>Add this script inside the <code>&lt;body&gt;</code> tag.</li><li>Ensure that the HTML includes:<ul><li>An <code>&lt;input&gt;</code> element with <code>id=&quot;model-input&quot;</code>.</li><li>A <code>&lt;button&gt;</code> element with <code>id=&quot;model-submit&quot;</code>.</li><li>A <code>&lt;div&gt;</code> element with <code>id=&quot;model-output&quot;</code>.</li><li>(Optional) A <code>&lt;button&gt;</code> element with <code>id=&quot;save-chat&quot;</code> to save chat history as a JSON file.</li></ul></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-submit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> saveButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"save-chat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Save chat button</span>        <span class="token keyword">let</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Store all chat records</span>        button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> userMessage <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userMessage<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token comment">// Record user input and add to chat box</span>            messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> userMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            output<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="user-msg">&lt;b>You:&lt;/b> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userMessage<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token comment">// Clear input box</span>            input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token comment">// Add placeholder in chat box, model response will update here</span>            <span class="token keyword">const</span> messageContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            messageContainer<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"model-msg"</span><span class="token punctuation">;</span>            messageContainer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;b>Model:&lt;/b> &lt;span class="model-response">&lt;/span>&lt;br>&lt;br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            output<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>messageContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> responseSpan <span class="token operator">=</span> messageContainer<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".model-response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:11434/api/chat"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>                    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                        <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">"deepseek-r1:1.5B"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> userMessage <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No response body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">const</span> reader <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> fullResponse <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    buffer <span class="token operator">+=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">stream</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">let</span> lines <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Handle incomplete JSON fragments</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> line <span class="token keyword">of</span> lines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    fullResponse <span class="token operator">+=</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                                    responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> fullResponse<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to parse JSON:"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// Handle remaining JSON fragments</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            fullResponse <span class="token operator">+=</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                            responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> fullResponse<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to parse JSON:"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// Save model's complete response</span>                messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> fullResponse <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Request failed:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>                responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;b>Request failed:&lt;/b> Check if Ollama is running."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Save chat to JSON</span>        saveButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> jsonBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>messages<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>jsonBlob<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">"chat_history.json"</span><span class="token punctuation">;</span> <span class="token comment">// Allow user to download JSON file</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>😉 If you successfully run this code, consider taking a screenshot or recording a video to share with others!</p></blockquote><h2 id="6-3-Demonstration">6.3 Demonstration<a class="header-anchor" href="#6-3-Demonstration"> ¶</a></h2><p><img src="/img/CELN/01-html02.png" alt="Demonstration"></p><h1 id="7-Implementing-Memory-Functionality">7. Implementing Memory Functionality<a class="header-anchor" href="#7-Implementing-Memory-Functionality"> ¶</a></h1><p>The current code implements a simple form of memory by passing the entire conversation history to the AI during each new request.</p><p>However, true memory functionality is still an ongoing challenge in AI development. Some projects like <a href="https://github.com/letta-ai/letta">Letta</a> aim to achieve persistent memory, but there is no perfect solution yet.</p><h1 id="8-Open-WebUI-A-Better-Interaction-Experience">8. Open WebUI: A Better Interaction Experience<a class="header-anchor" href="#8-Open-WebUI-A-Better-Interaction-Experience"> ¶</a></h1><p>If you find it challenging to understand the interactive JavaScript code, you can try <strong>Open WebUI</strong>, which offers a more user-friendly interface and can be easily installed via <code>pip</code>.</p><ul><li><strong><a href="https://github.com/open-webui/open-webui">Open WebUI 项目地址</a></strong>：Open WebUI is an extensible, feature-rich, and user-friendly self-hosted AI platform designed to operate entirely offline.</li></ul><h2 id="8-1-Simplified-Installation-Steps">8.1 Simplified Installation Steps<a class="header-anchor" href="#8-1-Simplified-Installation-Steps"> ¶</a></h2><ol><li><p>Create and enter a virtual environment for Open WebUI:</p><blockquote><p>You can install it in an existing virtual environment without creating a separate one.</p></blockquote> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> local-llm python <span class="token comment"># local-llm is the environment name, you can customize it</span>conda activate local-llm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><p>Install Open WebUI:</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> open-webui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>Run Open WebUI:</p> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">open-webui serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>By default, Open WebUI runs on <code>http://localhost:8080</code>.</p></li><li><p>Open a browser and visit <code>http://localhost:8080</code> to see the Open WebUI interface.</p><blockquote><p>⚠️ Note: Open WebUI will ask you to create a user the first time you use it. This user information is stored locally and can be set arbitrarily, but remember it (it is recommended to use the browser’s password manager).</p></blockquote></li></ol><p><img src="/img/CELN/01-open-webui.png" alt="Open WebUI"></p><h1 id="9-Conclusion">9. Conclusion<a class="header-anchor" href="#9-Conclusion"> ¶</a></h1><p>✅ Successfully ran <strong>DeepSeek</strong> model using <strong>Ollama</strong>.<br>✅ Built an interactive interface using <strong>HTML + JavaScript</strong>.<br>✅ Explored simple memory functionality.</p><p>Hope this workshop helps you understand <strong>local LLM inference</strong> and <strong>frontend interaction</strong>! Looking forward to seeing you at the next <strong>CELN Workshop</strong>! 🚀</p><blockquote><p>😉 Share photos or videos of the event! Whether it’s a successful code run screenshot or a group learning scene, share it with everyone!</p></blockquote><h1 id="10-Appendix-Full-Example-Code">10. Appendix: Full Example Code<a class="header-anchor" href="#10-Appendix-Full-Example-Code"> ¶</a></h1><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Local AI Interaction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #f4f4f4<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">h1</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">input</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">button</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #007BFF<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">button:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #0056b3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.output</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>            <span class="token property">min-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Local AI Interaction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter a message...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model-submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model-output<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save-chat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Save Chat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-submit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"model-output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> saveButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"save-chat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Save chat button</span>            <span class="token keyword">let</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Store all chat records</span>            <span class="token comment">// Listen for Enter key to submit</span>            input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"keydown"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">"Enter"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prevent default newline behavior</span>                    button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Trigger click event</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> userMessage <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userMessage<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token comment">// Record user input and add to chat box</span>                messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> userMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="user-msg">&lt;b>You:&lt;/b> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userMessage<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                <span class="token comment">// Clear input box</span>                input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token comment">// Add placeholder in chat box, model response will update here</span>                <span class="token keyword">const</span> messageContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                messageContainer<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"model-msg"</span><span class="token punctuation">;</span>                messageContainer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;b>Model:&lt;/b> &lt;span class="model-response">&lt;/span>&lt;br>&lt;br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                output<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>messageContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> responseSpan <span class="token operator">=</span> messageContainer<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".model-response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:11434/api/chat"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                            <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">"deepseek-r1:1.5B"</span><span class="token punctuation">,</span>                            <span class="token literal-property property">messages</span><span class="token operator">:</span> messages <span class="token comment">// Pass complete chat history</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No response body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">const</span> reader <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token keyword">let</span> fullResponse <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        buffer <span class="token operator">+=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">stream</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">let</span> lines <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Handle incomplete JSON fragments</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> line <span class="token keyword">of</span> lines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                        fullResponse <span class="token operator">+=</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                                        responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> fullResponse<span class="token punctuation">;</span>                                    <span class="token punctuation">&#125;</span>                                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to parse JSON:"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// Handle remaining JSON fragments</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                fullResponse <span class="token operator">+=</span> parsed<span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                                responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> fullResponse<span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to parse JSON:"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// Save model's complete response</span>                    messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> fullResponse <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Request failed:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>                    responseSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;b>Request failed:&lt;/b> Check if Ollama is running."</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Save chat to JSON</span>            saveButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> jsonBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>messages<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>jsonBlob<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">"chat_history.json"</span><span class="token punctuation">;</span> <span class="token comment">// Allow user to download JSON file</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>CELN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CELN</tag>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「RB」01 在VS Code中通过Jupyter Notebook使用由Conda创建的R语言环境</title>
    <link href="/2025/02/19/RB-01-R-Env_Setup/"/>
    <url>/2025/02/19/RB-01-R-Env_Setup/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！你有没有觉得安装<code>R</code>语言的过程有些麻烦？你有没有觉得为了安装<code>R</code>语言来安装<code>R-Studio</code>很耗空间和时间？或者说你是否觉得需要运行一整个文件来查看一个简单的<code>R</code>语言代码实在太不方便了？</p><p>那么，这篇文章就是为你准备的！</p><p>我们将通过<code>VS Code</code>来使用<code>Jupyter Notebook</code>来运行<code>R</code>语言代码，而且我们将使用<code>Conda</code>来创建<code>R</code>语言环境。</p><h1 id="0-Why-do-so">0. Why do so?<a class="header-anchor" href="#0-Why-do-so"> ¶</a></h1><ol><li>相比于<code>R-Studio</code>，<code>VS Code</code>更加轻量级，更加灵活。我相信一部分同学已经在使用<code>VS Code</code>来编写<code>Python</code>代码了，那么使用相同的<code>IDE</code>来编写<code>R</code>语言代码也是一个不错的选择。</li><li><code>Jupyter Notebook</code>是一个非常方便的工具，可以让我们一边写代码一边查看结果（可以反复运行一小部分代码），<strong>而不是一次性运行整个文件</strong>。这样既可以节省时间，又可以直观地看到代码的运行结果，对于学习一门新的语言来说是非常有帮助的！</li><li><code>Conda</code>是一个非常方便的虚拟环境管理工具。既然我们已经在使用<code>Conda</code>来管理<code>Python</code>的虚拟环境，那么我们也可以使用<code>Conda</code>来管理<code>R</code>语言的虚拟环境。</li></ol><h1 id="1-安装R语言环境">1. 安装<code>R</code>语言环境<a class="header-anchor" href="#1-安装R语言环境"> ¶</a></h1><h2 id="1-1-确认Conda是否已经安装">1.1 确认<code>Conda</code>是否已经安装<a class="header-anchor" href="#1-1-确认Conda是否已经安装"> ¶</a></h2><p>首先，确定你已经安装了<code>Anaconda</code>或者<code>Miniconda</code>。你可以通过以下命令来检查：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>只要有版本信息输出，就说明你已经满足了这个条件。</p><h2 id="1-2-创建R语言环境">1.2 创建<code>R</code>语言环境<a class="header-anchor" href="#1-2-创建R语言环境"> ¶</a></h2><p>接下来，我们需要创建一个<code>R</code>语言环境。我们可以通过以下命令来创建：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> r-env r-essentials<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个命令会创建一个名为<code>r-env</code>的环境，并且会安装<code>R</code>语言的必要组件。</p><blockquote><p>注意：名字是可以自己定义的，比如说我可以把<code>r-env</code>改成<code>my-r-env</code>来创建一个名为<code>my-r-env</code>的环墿。</p></blockquote><p>当安装完成后，我们可以通过以下命令来激活这个环境：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate r-env <span class="token comment"># r-env是环境的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>创建完毕后，输出大概如下：</p><p><img src="/img/RB/01-create_env_done.png" alt="01-create_env_done"></p><h2 id="1-3-为虚拟环境安装一系列依赖">1.3 为虚拟环境安装一系列依赖<a class="header-anchor" href="#1-3-为虚拟环境安装一系列依赖"> ¶</a></h2><p>接下来还需要安装一些依赖。请在激活环境后运行以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> <span class="token parameter variable">-c</span> conda-forge jupyter r-irkernel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>因为镜像源的不同，这个过程的时间可能会有所不同。请耐心等待。</p><p>安装完成后，输出大概如下：</p><p><img src="/img/RB/01-req_install_done.png" alt="01-req_install_done"></p><h2 id="1-4-可能出现的问题">1.4 可能出现的问题<a class="header-anchor" href="#1-4-可能出现的问题"> ¶</a></h2><p>如果在<code>Jupyter Notebook</code>中出现使用的问题，可以尝试在<code>R</code>语言的交互式环境中进行以下操作：</p><ol><li>进入<code>R</code>语言的交互式环境：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">R<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol start="2"><li>安装<code>IRkernel</code>：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-R" data-language="R"><code class="language-R">install.packages(&#39;IRkernel&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol start="3"><li>注册<code>IRkernel</code>内核：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-R" data-language="R"><code class="language-R">IRkernel::installspec(user &#x3D; FALSE)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol start="4"><li>检测是否安装成功：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-R" data-language="R"><code class="language-R">jupyter kernelspec list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果有类似以下输出，则说明安装成功：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Available kernels:  python3    /path/to/python3  ir         /path/to/R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="2-在VS-Code中使用Jupyter-Notebook">2. 在<code>VS Code</code>中使用<code>Jupyter Notebook</code><a class="header-anchor" href="#2-在VS-Code中使用Jupyter-Notebook"> ¶</a></h1><h2 id="2-1-安装Jupyter插件">2.1 安装<code>Jupyter</code>插件<a class="header-anchor" href="#2-1-安装Jupyter插件"> ¶</a></h2><p>首先，打开<code>VS Code</code>，通过左侧按钮打开<code>Extensions</code>并搜索<code>Jupyter</code>，然后安装<code>Jupyter</code>插件。</p><p><img src="/img/RB/01-vsc_extension.png" alt="01-vsc_extension"></p><h2 id="2-2-创建一个Jupyter-Notebook">2.2 创建一个<code>Jupyter Notebook</code><a class="header-anchor" href="#2-2-创建一个Jupyter-Notebook"> ¶</a></h2><p><code>Jupyter Notebook</code>的文件后缀名是<code>.ipynb</code>，随意创建一个文件并将后缀名改为<code>.ipynb</code>即可。</p><h2 id="2-3-通过Jupyter-Notebook打开R语言环境并选择内核">2.3 通过<code>Jupyter Notebook</code>打开<code>R</code>语言环境并选择内核<a class="header-anchor" href="#2-3-通过Jupyter-Notebook打开R语言环境并选择内核"> ¶</a></h2><p>当你打开<code>ipynb</code>文件后，右上角会出现一个<code>Select Kernel</code>的按钮。点击其既即可以选择<code>R</code>语言的内核。</p><p><img src="/img/RB/01-select_kernel.png" alt="01-select_kernel"></p><p>之后选择<code>Jupyter Kernel</code>，然后选择刚才创建的<code>R</code>语言环境即可。（比如说我创建的叫做<code>test_r</code>，图中另外两个内核，一个是由<code>conda</code>创建的名为<code>r</code>的环境，另一个则是系统范围内安装的R）</p><p><img src="/img/RB/01-select_r_env.png" alt="01-select_r_env"></p><h1 id="3-运行R语言代码">3. 运行<code>R</code>语言代码<a class="header-anchor" href="#3-运行R语言代码"> ¶</a></h1><p>现在，你可以在<code>Jupyter Notebook</code>中运行<code>R</code>语言代码了！</p><p>比如说，添加一个<code>code cell</code>（通过点击中间的&quot;+ Code&quot;按钮），然后输入以下代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-R" data-language="R"><code class="language-R">x &lt;- 1:10y &lt;- x^2plot(x, y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>然后点击左侧的三角形按钮即可运行代码。（或者使用<code>Shift + Enter</code>）</p><p><img src="/img/RB/01-run_code.png" alt="01-run_code"></p><blockquote><p>⚠️注意：<code>plot</code>函数绘制的图像默认为透明背景。<br>如果想要用白色作为背景色，可以在<code>plot</code>函数之前添加<code>par(bg = &quot;white&quot;)</code></p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-R" data-language="R"><code class="language-R">x &lt;- 1:10y &lt;- x^2par(bg &#x3D; &quot;white&quot;)plot(x, y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/img/RB/01-plot_white_bg.png" alt="01-plot_white_bg"></p><h1 id="4-结语">4. 结语<a class="header-anchor" href="#4-结语"> ¶</a></h1><p>通过<code>VS Code</code>和<code>Jupyter Notebook</code>，我们可以更加方便地运行<code>R</code>语言代码了！</p><p>希望这篇文章对你有所帮助！</p><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>R Beginner</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「CB」00 系列简介</title>
    <link href="/2025/01/03/CB-00-Conda-Startup/"/>
    <url>/2025/01/03/CB-00-Conda-Startup/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>这是一个有关通过<code>Conda</code>管理Python虚拟环境的系列：<code>Conda Beginner</code>。</p><p>主要面向的读者是刚刚接触<code>Conda</code>的朋友，以及记不清楚<code>Conda</code>命令的朋友。</p><p>在这个系列中我会从最基础的概念开始，一步一步地向你展示如何使用<code>Conda</code>。（仅针对<code>Python</code>方面的使用）</p><p>在学习这一部分内容时最重要的是：</p><p><strong>不要看到代码框就复制粘贴运行！！！</strong><br><strong>不要看到代码框就复制粘贴运行！！！</strong><br><strong>不要看到代码框就复制粘贴运行！！！</strong></p><p>请务必认真阅读每个代码框中的内容，理解每一步的操作！不要做“CV工程师”！</p><h1 id="结语">结语<a class="header-anchor" href="#结语"> ¶</a></h1><p>祝你接下来的学习一切顺利！</p><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>Conda Beginner</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「EP」02 在Vscode中使用Jupyter Notebook（重制）</title>
    <link href="/2025/01/03/EP-02-Jupyter_with_Vscode/"/>
    <url>/2025/01/03/EP-02-Jupyter_with_Vscode/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p><code>Jupyter Notebook</code>是一个非常流行的<code>Python</code>交互式环境，它允许用户将<code>代码</code>、<code>文本</code>、<code>图像</code>等内容整合在一个文档中，甚至分段（分为多个<code>cell</code>）运行代码，查看运行结果。Even better，其可以保存每一个<code>cell</code>的运行结果，并且导出为多种格式如<code>.html</code>、<code>.pdf</code>，以便展示你的思考过程。</p><p>传统的<code>Jupyter Notebook</code>是在浏览器中运行的，不过其后端需要一直运行着一个终端，启动时会稍显卡顿并且少有可拓展性。（而且大部分初学者会通过<code>Anaconda Navigator</code>（那个启动会会一直显示在屏幕中间的绿色的圈）来运行<code>Jupyter Notebook</code>，进一步延长了启动的时间）</p><p>于是，使用其他编辑器来运行<code>Jupyter Notebook</code>就成为了一个很好的选择。</p><p>本章我会介绍如何在<code>Vscode</code>中使用<code>Jupyter Notebook</code>。</p><h2 id="1-安装Jupyter插件">1. 安装<code>Jupyter</code>插件<a class="header-anchor" href="#1-安装Jupyter插件"> ¶</a></h2><p>打开<code>Vscode</code>，点击左侧的<code>Extensions</code>，搜索<code>Jupyter</code>，安装第一个即可。它会同时自动下载其它所需要的插件。</p><ul><li>如果你担心一个插件不够用，那么可以将搜索结果中由<code>Microsoft</code>开发的<code>Jupyter</code>插件也安装上。这些插件有着微软团队的长期维护和更新，相对来说更加安全稳定。</li></ul><p><img src="/img/EP/03/extensions.png" alt="Extensions"></p><h2 id="2-创建一个Jupyter-Notebook">2. 创建一个<code>Jupyter Notebook</code><a class="header-anchor" href="#2-创建一个Jupyter-Notebook"> ¶</a></h2><p><code>Jupyter Notebook</code>的文件后缀名为<code>.ipynb</code>，新建任意一个文件，然后将其后缀名改为<code>.ipynb</code>即可。</p><p>将其使用<code>Vscode</code>打开，你会看到这样的界面：</p><p><img src="/img/EP/03/jupyter_notebook.png" alt="Jupyter Notebook"></p><p>其中，<code>+ code</code>和<code>+ markdown</code>分别代表了新建一个代码块和一个文本块，<code>Run All</code>表示运行所有的代码块。</p><p>而最重要的是<code>Select Kernel</code>（或者说<code>Select Jypyter Server</code>），这是用于指定<code>Jupyter Notebook</code>的运行环境的。</p><blockquote><p>也正是上一章节中提到的<code>Python</code>解释器。</p></blockquote><p>点击<code>Select Kernel</code>，可以看到我们需要从<code>Python Environment</code>（<code>Python</code>环境）和<code>Existing Jupyter Server</code>（已有的<code>Jupyter</code>服务器）中选择一个。接下来我们以<code>Python Environment</code>为例。</p><p><img src="/img/EP/03/select_kernel.png" alt="Select Kernel"></p><h2 id="3-准备运行环境">3. 准备运行环境<a class="header-anchor" href="#3-准备运行环境"> ¶</a></h2><p>此处的<code>Python Environment</code>即为上一张提到的<code>Virtual Environment</code>（虚拟环境）。</p><blockquote><p>也就是说，<code>.py</code>文件和<code>.ipynb</code>文件可以使用相同的虚拟环境。</p></blockquote><p>只不过要注意的是，运行<code>Jupyter Notebook</code>之前，需要为虚拟环境安装一个依赖库，即<code>ipykernel</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 首先激活虚拟环境，之后再安装内核</span>conda activate <span class="token operator">&lt;</span>your_env_name<span class="token operator">></span> <span class="token comment"># 激活虚拟环境，&lt;>内为你自己的虚拟环境的名字</span>pip <span class="token function">install</span> ipykernel <span class="token comment"># 安装ipykernel</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="4-运行Jupyter-Notebook">4. 运行<code>Jupyter Notebook</code><a class="header-anchor" href="#4-运行Jupyter-Notebook"> ¶</a></h2><p>现在，你可以在<code>Jupyter Notebook</code>中愉快地写代码了。</p><p>让我们新建一个<code>code</code>块，尝试运行一段简单的代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>点击左侧的小三角形，即单独运行这个<code>code</code>块。</p><p><img src="/img/EP/03/code-01.png" alt="Run Code"></p><p>左侧的数字表示了运行的顺序，此处的<code>[1]</code>表示这是第一个运行的<code>code</code>块。</p><p>由于<code>Jupyter Notebook</code>的机制，每一个<code>code</code>块都会保存其运行结果（包括变量的值，函数的定义等等）。</p><p>以下例子可以很好地解释这种机制：</p><p><img src="/img/EP/03/code-02.png" alt="Run Code"></p><h2 id="5-一些使用场景">5. 一些使用场景<a class="header-anchor" href="#5-一些使用场景"> ¶</a></h2><p>相较于<code>.py</code>，<code>.ipynb</code>文件更适合于一些交互式、实验性的代码，以及需要展示的场景。</p><h3 id="5-1-数据分析">5.1 数据分析<a class="header-anchor" href="#5-1-数据分析"> ¶</a></h3><p>假如，我需要写一个绘图函数来分析一些<strong>需要加载很久的数据</strong>。如果使用<code>.py</code>文件，那么每次修改代码后都需要重新运行，这就导致重复地加载数据，重复地浪费时间。</p><p>然而<code>.ipynb</code>文件可以保存每一个<code>code</code>块的运行结果，也就是说在第一次加载数据后，该数据会一直保存在内存中，直到你关闭或者重启<code>Jupyter Notebook</code>。</p><p><img src="/img/EP/03/code-03.png" alt="Data Analysis"></p><h3 id="5-2-分段展示代码结果">5.2 分段展示代码结果<a class="header-anchor" href="#5-2-分段展示代码结果"> ¶</a></h3><p>假如，我需要分段地展示一段代码的运行结果，那么<code>.ipynb</code>文件就是一个很好的选择。（尤其是对初学者来说）</p><p>比如此处，我需要先分析数据，之后再进行计算。如果使用<code>.py</code>文件，那么我需要将这两个过程分开（写两个文件，两次导入数据），而使用<code>.ipynb</code>文件，我可以直接在同一个文件中完成这两个过程。</p><p><img src="/img/EP/03/code-04.png" alt="Data Analysis"></p><h2 id="6-总结">6. 总结<a class="header-anchor" href="#6-总结"> ¶</a></h2><p>无论是<code>.py</code>文件还是<code>.ipynb</code>文件，都是<code>Python</code>的代码文件，只不过后者更适合于交互式、实验性的代码。请不要一味地使用<code>.ipynb</code>，而是根据具体的场景选择更合适的文件类型！</p><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>Easy Python</category>
      
      <category>简单Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「EP」01 Python是如何运行的？（重制）</title>
    <link href="/2025/01/03/EP-01-How-to-run-Python/"/>
    <url>/2025/01/03/EP-01-How-to-run-Python/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># hello.py</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这或许是你在学习<code>Python</code>时运行的第一个程序。</p><p>你还记得当时是怎么运行这个程序的吗？是点击<code>IDE</code>的<code>Run</code>按钮（小三角）吗？还是在<code>Terminal</code>中输入<code>python hello.py</code>呢？</p><blockquote><p><code>IDE</code>：即<code>Integrated Development Environment</code>，集成开发环境。比如<code>PyCharm</code>、<code>VSCode</code>等等。其一般为用户提供了代码编辑、编译、调试等功能。（也包括自动补全、错误提示、代码格式化等等）<br><code>Terminal</code>: 终端，如<code>Windows</code>的<code>cmd</code>、<code>PowerShell</code>，<code>Linux</code>的<code>Terminal</code>，等等。</p></blockquote><p>为什么电脑知道要用<code>Python</code>而不是其他语言来运行这个程序呢？我将在本章分享一下我的理解。</p><h1 id="1-解释器：Interpreter">1. 解释器：Interpreter<a class="header-anchor" href="#1-解释器：Interpreter"> ¶</a></h1><p>无论是使用<code>IDE</code>自带的按钮，还是在<code>Terminal</code>中输入命令，都是在<strong>调用<code>Python</code>的解释器</strong>来运行这个程序。</p><p>那么，什么是<code>解释器</code>呢？</p><p><img src="/img/EP/01/01-01.PNG" alt="vscode can't find a valid interpreter"></p><p><code>解释器</code>是一种<strong>将高级语言翻译成机器语言</strong>的程序。它会读取我们写的<code>Python</code>代码，然后将其翻译成机器语言，最后让计算机执行。</p><p>举个例子，如果我们在<code>Windows</code>的<code>cmd</code>中输入<code>python</code>，那么我们就会根据之前在环境变量中设置的<code>Python</code>的路径，找到<code>Python</code>的解释器（<code>python.exe</code>），然后运行这个解释器。</p><p>那么在<code>cmd</code>中输入<code>python hello.py</code>就相当于：<strong>“使用<code>Python</code>的解释器来运行<code>hello.py</code>这个文件”</strong>，也就是我们常说的**“运行<code>hello.py</code>这个程序”**。</p><p>再比如说，如果你在使用虚拟环境，那么每个环境的目录下都会有一个<code>Python</code>的解释器这也解释了为什么我们可以在不同的虚拟环境中使用不同版本的<code>Python</code>。（下面会有一个相关的例子）</p><h1 id="2-使用IDE和Terminal的区别">2. 使用IDE和Terminal的区别<a class="header-anchor" href="#2-使用IDE和Terminal的区别"> ¶</a></h1><p>对于大多数<code>IDE</code>来说，其内部内置了一个集成终端（<code>Integrated Terminal</code>），在点击<code>Run</code>按钮时，<code>IDE</code>会自动在这个终端中输入相应的命令来运行程序。</p><p>而在<code>Terminal</code>中，我们需要手动指定想要使用的<code>Python</code>解释器路径。</p><h2 id="2-1-Terminal中手动运行程序">2.1 Terminal中手动运行程序<a class="header-anchor" href="#2-1-Terminal中手动运行程序"> ¶</a></h2><p>我直接使用<code>Vscode</code>的<code>Integrated Terminal</code>来运行程序，输入<code>python hello.py</code>，这样会使用在系统注册的<strong>默认</strong>解释器，即<code>/bin/python</code>来运行程序。</p><p><img src="/img/EP/01/01-02.PNG" alt="vscode run"></p><h2 id="2-2-Vscode下点击按钮运行程序">2.2 Vscode下点击按钮运行程序<a class="header-anchor" href="#2-2-Vscode下点击按钮运行程序"> ¶</a></h2><p>以我的<code>Linux</code>系统为例，我在<code>Vscode</code>中点击<code>Run</code>按钮，<code>Vscode</code>会选择位于<code>/bin/python</code>的<code>Python</code>解释器来运行程序。</p><p><img src="/img/EP/01/01-03.PNG" alt="terminal run"></p><h1 id="3-虚拟环境（Virtual-Environment）">3. 虚拟环境（<code>Virtual Environment</code>）<a class="header-anchor" href="#3-虚拟环境（Virtual-Environment）"> ¶</a></h1><p>如果使用的是<code>Anaconda</code>，那么可以使用以下命令来查看自己拥有的虚拟环境：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda info <span class="token parameter variable">--envs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/img/EP/01/01-04.PNG" alt="conda envs"></p><p>除了<code>base</code>环境是在<code>Anaconda</code>的安装目录下，其他的环境都是在<code>Anaconda</code>的<code>envs</code>目录下。</p><blockquote><p>值得注意的是，每一个目录下都有一个<strong>独立的</strong><code>Python</code>的解释器。（当然，虚拟环境还有其他更加强大的功能，我会在后续的文章中介绍）</p></blockquote><h2 id="3-1-Terminal下使用虚拟环境">3.1 Terminal下使用虚拟环境<a class="header-anchor" href="#3-1-Terminal下使用虚拟环境"> ¶</a></h2><p>如果你想在<code>Terminal</code>中使用某个虚拟环境，那么一般需要手动切换虚拟环境。</p><p>以<code>base</code>环境为例，我们需要先激活<code>base</code>环境，然后再运行程序。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate basepython hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><img src="/img/EP/01/01-05.PNG" alt="terminal venv"></p><h2 id="3-2-Vscode下使用虚拟环境">3.2 Vscode下使用虚拟环境<a class="header-anchor" href="#3-2-Vscode下使用虚拟环境"> ¶</a></h2><p>在<code>Vscode</code>中，我们可以使用手动选择解释器的方式来选择虚拟环境中的<code>Python</code>解释器。</p><p>在打开<code>hello.py</code>文件后，你可以点击右下角的按钮来选择解释器。</p><p><img src="/img/EP/01/01-06-0.PNG" alt="vscode select interpreter 0"></p><p><img src="/img/EP/01/01-06-1.PNG" alt="vscode select interpreter 1"></p><p>然后点击<code>Run</code>按钮，你会发现：<strong><code>Vscode</code>并没有先激活虚拟环境（没有使用<code>conda activate base</code>），而是直接使用了虚拟环境中的<code>Python</code>解释器来运行程序</strong>。</p><p><img src="/img/EP/01/01-06.PNG" alt="vscode select interpreter 2"></p><p>换句话说，所谓的切换虚拟环境，也就是切换了<code>Python</code>解释器。</p><h1 id="4-总结">4. 总结<a class="header-anchor" href="#4-总结"> ¶</a></h1><ul><li>无论是使用<code>IDE</code>的<code>Run</code>按钮，还是在<code>Terminal</code>中输入命令，都是在<strong>调用<code>Python</code>的解释器</strong>来运行程序。</li><li>对于<code>Anaconda</code>用户来说，考虑到便捷性，还是推荐使用<code>conda activate</code>来切换虚拟环境。（毕竟还总需要使用<code>pip</code>来安装一些包）</li></ul><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>Easy Python</category>
      
      <category>简单Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「EP」00 系列简介 &amp; Python简介与安装（重制）</title>
    <link href="/2025/01/03/EP-00-Installation-and-Introduction/"/>
    <url>/2025/01/03/EP-00-Installation-and-Introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>这是一个<code>简单</code>介绍<code>Python</code>的系列：<code>Easy Python</code>。</p><p>之所以说<code>简单</code>，是因为</p><ol><li><code>内容会很基础</code></li><li><code>我会讲得很简单</code></li></ol><p>毕竟现在网络上已经有很多高质量的教程了，我认为我不需要重复造轮子。单独一篇博客讲“什么是<code>int</code>，什么是<code>str</code>”，或者“什么是循环”，“什么是条件判断”之类的内容，我认为没有太大的意义。</p><p>那么这个系列我会分享什么呢？</p><ol><li><strong>我认为比较有趣的东西</strong></li><li><strong>我认为比较实用、重要，但是容易被忽视的东西</strong></li><li><strong>以及一些实用小技巧</strong></li></ol><p>比如“为什么要<strong>添加python到环境变量</strong>”，“为什么要<strong>使用虚拟环境</strong>”，”什么是<code>pip</code>“，”什么是<code>Juptyer notebook</code>“等等。</p><p>【WARNING】：请注意，我的文章内容非常依赖于我的个人经验和理解，可能会有错误。如果你发现了文章中的任何问题，烦请通过任何可能的方式联系我，我会尽快更正。这里留下我的邮箱：<a href="mailto:SiriusLLLUUU_Official@outlook.com">SiriusLLLUUU_Official<br></a></p><h1 id="1-安装Python">1. 安装Python<a class="header-anchor" href="#1-安装Python"> ¶</a></h1><p>什么是“安装Python”？简单来说，就是把Python的程序文件<strong>放到你的电脑上</strong>，然后<strong>让你的电脑知道“要用Python的时候我要来这儿找它”</strong>。</p><p>前者指的是“下载Python”，后者就是“添加Python到环境变量”。</p><p>这篇文章中我们以<code>Windows</code>为例来进行Python的安装。（现今的<code>Linux</code>和<code>MacOS</code>已经自带特定版本的Python了，于本章内容而言可以跳过这一步）</p><h2 id="验证一下Python是否已经安装吧">验证一下Python是否已经安装吧<a class="header-anchor" href="#验证一下Python是否已经安装吧"> ¶</a></h2><p>如果你想先验证一下Python是否已经安装，可以参考结尾处的“验证Python”部分。</p><h1 id="2-下载Python">2. 下载Python<a class="header-anchor" href="#2-下载Python"> ¶</a></h1><p>首先，我们需要下载Python的安装包。</p><blockquote><p>注意：如果你需要使用<code>Anaconda</code>（即在你的学习中会使用到<code>conda</code>命令），那么你大可以跳过这一步，因为我们使用<code>Anaconda</code>的创建虚拟环境时可以选择同时安装Python。</p></blockquote><p>我们可以从官网或者镜像站下载Python的安装包。</p><blockquote><p>什么是镜像站？<br>由于网络特性，从物理距离更近的服务器进行下载速度会更快。尤其是在国内，由于网络环境的特殊性，我们访问国外的网站会非常慢。镜像站就是在国内搭建的服务器，里面预先存放了国外的网站的文件。<br>因此，我们可以从镜像站下载到需要的文件，并且速度会更快。</p></blockquote><ul><li>官网：<a href="https://www.python.org/">Python官网</a></li><li>镜像站：<a href="https://mirrors.huaweicloud.com/python/">华为云镜像站</a></li></ul><p>根据自己的需求，选择合适的版本进行下载。</p><p>例如，我是64位Windows，并且想下载<code>Python 3.9.9</code>，那么我们会打开镜像站的<a href="https://mirrors.huaweicloud.com/python/3.9.9/">这个网页</a>，然后选择<code>python-3.9.9-amd64.exe</code>进行下载。</p><p>（如果你的电脑是Windows系统的轻薄本、全能本亦或是游戏本，那么你完全可以选择带有<code>amd64</code>的版本。现金的笔记本电脑、台式机等等一般都是<code>amd64</code>架构的CPU）</p><p><img src="/img/EP/00/00-01.PNG" alt="huaweicloud mirror"></p><blockquote><p><code>amd64</code>代表64位架构的CPU。（这里的<code>amd</code>并非是指显卡，而是CPU的架构。因为<code>AMD</code>公司是第一个推出64位架构的CPU的公司，所以64位架构的CPU就被称为<code>amd64</code>）<br>图中<code>amd64</code>的下方还有一个<code>arm64</code>，这是<code>ARM64</code>架构的CPU的安装包，有时也会被标记为<code>aarch64</code>。<code>ARM</code>架构的CPU一般用于手机、平板电脑、嵌入式设备等等，一般的台式机、笔记本电脑、服务器等等都是<code>amd64</code>或者<code>x86</code>架构（<code>x86</code>也是32位架构的别称）。</p></blockquote><h1 id="3-安装Python">3. 安装Python<a class="header-anchor" href="#3-安装Python"> ¶</a></h1><p>下载完成后，双击安装包，按照提示进行安装。可以根据需要选择安装路径（默认路径即可），但在安装过程中，有一项非常重要的设置需要注意：<strong>务必勾选“添加 Python 到环境变量”</strong>。（<code>环境变量</code>即<code>PATH</code>）</p><h2 id="3-1-为什么要添加-Python-到环境变量？">3.1 为什么要添加 Python 到环境变量？<a class="header-anchor" href="#3-1-为什么要添加-Python-到环境变量？"> ¶</a></h2><p>环境变量可以理解为计算机的“工作目录清单”。当你在终端（如 <code>cmd</code> 或 <code>PowerShell</code>）中输入命令时，计算机会根据环境变量的记录，找到对应的程序并执行。</p><p>例如，当你在终端中输入 <code>python</code> 时：</p><ol><li><p><strong>没有添加到环境变量的情况</strong>：</p><ul><li>计算机会从清单中查找“Python”，但找不到相关记录。</li><li>此时，你会看到类似“‘python’ 不是内部或外部命令，也不是可运行的程序或批处理文件”的报错。</li></ul></li><li><p><strong>添加到环境变量的情况</strong>：</p><ul><li>计算机会在环境变量中找到 Python 的安装路径。</li><li>然后顺利执行 Python 程序。</li></ul></li></ol><blockquote><p>也就是说，不添加到环境变量，就像搬家却忘记告诉朋友新地址，别人就找不到你了。添加了之后，无论你把 Python 安装到哪里，计算机都知道如何找到它。</p></blockquote><h2 id="如何勾选“添加-Python-到环境变量”？">如何勾选“添加 Python 到环境变量”？<a class="header-anchor" href="#如何勾选“添加-Python-到环境变量”？"> ¶</a></h2><p>在安装过程中：</p><ol><li>在第一个安装界面中，页面下方有一个选项框，显示为“<strong>Add Python to PATH</strong>”。</li><li>勾选该选项后再点击“Install Now”或“Customize Installation”继续安装。</li></ol><blockquote><p>如果忘记勾选也不用担心，可以在安装完成后手动设置环境变量，具体方法可以自行搜索。</p></blockquote><h1 id="4-验证Python">4. 验证Python<a class="header-anchor" href="#4-验证Python"> ¶</a></h1><p>安装完成后，对于<code>Windows</code>用户，我们可以按下<code>Win+R</code>，然后输入<code>cmd</code>，然后在弹出的窗口中输入<code>python</code>并回车。同样的，对于<code>Linux</code>和<code>MacOS</code>用户，我们可以直接打开终端，然后输入<code>python</code>并回车。</p><p>如果你看到了类似于下面的内容（进入到Python交互式界面），那么恭喜你，你的设备上已经有一个可用的Python了！</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Python <span class="token number">3.12</span>.7 <span class="token operator">|</span> packaged by conda-forge <span class="token operator">|</span> <span class="token punctuation">(</span>main, Oct  <span class="token number">4</span> <span class="token number">2024</span>, <span class="token number">15</span>:47:54<span class="token punctuation">)</span> <span class="token punctuation">[</span>MSC v.1941 <span class="token number">64</span> bit <span class="token punctuation">(</span>AMD64<span class="token punctuation">)</span><span class="token punctuation">]</span> on win32Type <span class="token string">"help"</span>, <span class="token string">"copyright"</span>, <span class="token string">"credits"</span> or <span class="token string">"license"</span> <span class="token keyword">for</span> <span class="token function">more</span> information.<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>接下来你可以直接关闭终端或者在交互式环境中输入<code>exit()</code>来退出。</p><h1 id="5-结语">5. 结语<a class="header-anchor" href="#5-结语"> ¶</a></h1><p>安装只是<code>Python</code>的第一步，接下来我还会分享一些其他的相关内容。</p><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>Easy Python</category>
      
      <category>简单Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「LUT」03 Gnome Beautify</title>
    <link href="/2024/06/19/LUT-03-Gnome_Beautify/"/>
    <url>/2024/06/19/LUT-03-Gnome_Beautify/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p><code>Linux</code>有着多种可选择的桌面环境（<code>Desk Environment</code>），其中<code>Gnome</code>是广受欢迎的一个，同时也是我最常使用的一个。其一大亮点就是有着丰富的主题、外观可供选择。</p><p>本文参考了<a href="https://youtu.be/viffvWtMTdo?si=zrJlwMggp4Nira2B"><code>NH Soft</code>的视频</a>，我记下了其中自认为十分有用的配置方法以及主题推荐。</p><blockquote><p>虽然一些&quot;花里胡哨&quot;的主题、特效会占用一些系统资源，但是我仍然认为，自定义桌面环境无论是过程还是结果都是一件非常有趣的事情。在让自己的桌面环境变得更加个性化的同时，也能够让用户更加熟悉自己的<code>Linux</code>，无疑是一件非常有意义的事。</p></blockquote><h1 id="GNOME-Tweaks">GNOME Tweaks<a class="header-anchor" href="#GNOME-Tweaks"> ¶</a></h1><p>首先，我们需要安装<code>GNOME Tweaks</code>，这是一个用于配置<code>Gnome</code>的工具。一般来说这个软件会在安装<code>Gnome</code>桌面环境的时候一并安装，如果没有的话可以通过以下命令安装：</p><ul><li>Arch Linux</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> gnome-tweaks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>Ubuntu</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnome-tweaks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>接下来，打开<code>GNOME Tweaks</code>，找到<code>Appearance</code>选项卡。</p><p><img src="/img/LUT/03-tweak.png" alt="GNOME Tweaks"></p><p>本次要分享的就是这里的4个<code>Style</code>选项：</p><ol><li>Cursor</li><li>Icons</li><li>Shell</li><li>Legacy Applications</li></ol><h1 id="Gnome-Look">Gnome Look<a class="header-anchor" href="#Gnome-Look"> ¶</a></h1><p>若要更改这些主题，我们需要相应的主题文件。</p><p><a href="https://www.gnome-look.org/"><code>Gnome Look</code></a>是一个提供<code>Gnome</code>主题、图标、壁纸等资源的网站，我们可以在这里找到我们需要的主题。</p><h2 id="Where-to-put-the-themes">Where to put the themes?<a class="header-anchor" href="#Where-to-put-the-themes"> ¶</a></h2><p>这些主题文件一般会放在<code>~/.themes</code>和<code>~/.icons</code>目录下，如果没有的话可以自行创建。</p><p>具体位置如下表：</p><table><thead><tr><th>Type</th><th>Path</th></tr></thead><tbody><tr><td>Cursor</td><td><code>~/.icons</code></td></tr><tr><td>Icons</td><td><code>~/.icons</code></td></tr><tr><td>Shell</td><td><code>~/.themes</code></td></tr><tr><td>Legacy Applications</td><td><code>~/.themes</code></td></tr></tbody></table><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>Have fun! 😉</p><hr><blockquote><p>上一节： <a href="/2023/06/14/LUT-02-zsh/" title="「LUT」02 zsh-更漂亮的terminal">「LUT」02 zsh-更漂亮的terminal</a><br>下一节： <a href="/2025/06/17/LUT-04-ncdu/" title="「LUT」04 ncdu - 直观的Linux磁盘使用情况查看工具">「LUT」04 ncdu - 直观的Linux磁盘使用情况查看工具</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux Useful Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Gnome</tag>
      
      <tag>Beautify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「ALI」04 AUR(Arch User Repository)</title>
    <link href="/2024/02/26/ALI-04-AUR/"/>
    <url>/2024/02/26/ALI-04-AUR/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p><code>pacman</code>是<code>Arch Linux</code>的包管理器（对于<code>Ubuntu</code>系来说则是<code>apt</code>/<code>apt-get</code>）。</p><p>如果你曾使用过<code>Ubuntu</code>系的<code>apt</code>/<code>apt-get</code>，那么或许会发现在安装某些特定软件时，你需要为包管理器添加下载源。</p><p>以<code>gurb-customizer</code>为例，你需要使用以下指令添加并下载这个软件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:danielrichter2007/grub-customizer<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> grub-customizer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>而在<code>Arch Linux</code>中，一些大佬将这些软件打包并上传到了<code>AUR</code>（Arch User Repository）中，我们可以从这个强大的仓库中下载到我们所需要的源码并进行编译以安装软件。</p><p>当然，也有一些如<code>yay</code>这样的包管理器可以帮助我们省去这些繁琐的步骤。直接通过类似于包管理器的方式来安装应用。</p><h1 id="1-AUR-with-makepkg">1. AUR with <code>makepkg</code><a class="header-anchor" href="#1-AUR-with-makepkg"> ¶</a></h1><p>我们从安装<code>yay</code>开始。由于<code>yay</code>的软件包并不包含在<code>pacman</code>的官方仓库中，我们需要从<code>AUR</code>中下载源码并进行编译。</p><p>首先访问<code>yay</code>的<code>AUR</code>页面：<a href="https://aur.archlinux.org/packages/yay/">yay</a></p><blockquote><p>你可以在<code>AUR</code>的搜索框中输入想要安装的软件名称，然后点击搜索按钮，即可找到对应的软件。</p></blockquote><p>使用<code>git</code>下载<code>yay</code>的源码：</p><blockquote><p>注意：直接运行以下命令会将仓库克隆到当前路径，你或许需要先<code>cd</code>到你想要的路径。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://aur.archlinux.org/yay.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后进入<code>yay</code>的目录并使用<code>makepkg</code>进行编译：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> yaymakepkg <span class="token parameter variable">-si</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：请确保你的命令行环境可以访问如<code>google</code>等网站。因为编译过程需要下载一些依赖。（请尝试打开代理）</p></blockquote><p>之后等待编译完成，<code>yay</code>就会被安装到你的系统中。</p><h1 id="2-AUR-with-yay">2. AUR with <code>yay</code><a class="header-anchor" href="#2-AUR-with-yay"> ¶</a></h1><p>有了<code>yay</code>，我们就可以直接使用<code>yay</code>来更简便地安装<code>AUR</code>中的软件。</p><ul><li>假如你已经知道了你想要安装的软件全称：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token parameter variable">-S</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>假如你不知道你想要安装的软件全称，那么你可以搜索关键词，之后（如果没有特殊需求的话）一路回车即可安装：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token operator">&lt;</span>keyword<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>清理所有已安装软件包的缓存以及所有未安装软件包的缓存</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token parameter variable">-Sc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>附：<a href="https://devhints.io/pacman">Pacman cheatsheet</a></p></blockquote><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>Arch Linux Installation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux Installation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「ALT」01 Vscode安装 &amp; Vscode覆盖默认文件管理器</title>
    <link href="/2024/02/08/ALT-01-Vscode/"/>
    <url>/2024/02/08/ALT-01-Vscode/</url>
    
    <content type="html"><![CDATA[<h1 id="问题简介">问题简介<a class="header-anchor" href="#问题简介"> ¶</a></h1><ol><li>使用<code>Arch Linux</code>的包管理器<code>sudo pacman -S code</code>安装的<code>Vscode</code>没有登录功能。</li><li><code>Vscode</code>在安装后覆盖了默认文件管理器。</li></ol><h1 id="解决方案">解决方案<a class="header-anchor" href="#解决方案"> ¶</a></h1><h2 id="问题1：Vscode没有登录功能">问题1：Vscode没有登录功能<a class="header-anchor" href="#问题1：Vscode没有登录功能"> ¶</a></h2><p>在<code>aur</code>中安装<code>visual-studio-code-bin</code>即可解决。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token parameter variable">-S</span> visual-studio-code-bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="问题2：Vscode覆盖默认文件管理器">问题2：Vscode覆盖默认文件管理器<a class="header-anchor" href="#问题2：Vscode覆盖默认文件管理器"> ¶</a></h2><blockquote><p>注意：该解决方法适用于<code>Gnome</code>桌面环境。</p></blockquote><p>打开<code>/etc/share/applications/mimeinfo.cache</code>文件，我们发现有关文件管理器的设置中有两个值，分别是<code>vscode.desktop</code>和<code>org.gnome.Nautilus.desktop</code>。</p><p>其中前者代表<code>Vscode</code>，后者代表Gnome默认的文件管理器<code>Nautilus</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">inode/directory<span class="token operator">=</span>code.desktop<span class="token punctuation">;</span>org.gnome.Nautilus.desktop<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>也就是说在安装<code>Vscode</code>后，<code>Vscode</code>将自己添加到了文件管理器的默认应用程序列表中，并且设置在了第一位。</p><p>为了永久修改这个问题，我们需要使用<code>xdg-mime</code>命令来修改默认文件管理器。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">xdg-mime default org.gnome.Nautilus.desktop inode&#x2F;directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Arch Linux Troubleshooting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「ALT」00 系列介绍</title>
    <link href="/2024/02/08/ALT-00-Introduction/"/>
    <url>/2024/02/08/ALT-00-Introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="系列介绍">系列介绍<a class="header-anchor" href="#系列介绍"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>这个系列是关于<code>Arch Linux</code>的一些问题解决方案。</p><p>由于每次在遇到问题时都要去搜索解决方案很繁杂，而有时会找不到之前查到的“完美解决方案”。所以我决定将这些问题解决方案记录下来，以便日后查阅。</p><p>希望这个系列能够帮助到你！</p>]]></content>
    
    
    <categories>
      
      <category>Arch Linux Troubleshooting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「ALI」03 更好的体验</title>
    <link href="/2024/01/14/ALI-03-Better-Experience/"/>
    <url>/2024/01/14/ALI-03-Better-Experience/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>这一节中我会介绍一些<strong>我自己</strong>喜欢的配置，包括<code>快捷键</code>，<code>输入法</code>，<code>zsh</code>, <code>grub</code>等等。</p><h1 id="1-快捷键">1. 快捷键<a class="header-anchor" href="#1-快捷键"> ¶</a></h1><p>由于早起使用<code>Pop!_OS</code>的缘故，我习惯了一些其自带的快捷键，因此我在<code>Arch Linux</code>中也使用了这些快捷键。</p><ul><li><code>Super</code> + <code>Q</code>：关闭当前窗口</li><li><code>Super</code> + <code>F</code>：打开默认文件管理器</li><li><code>Super</code> + <code>B</code>：打开默认浏览器</li><li><code>Super</code> + <code>T</code>：打开终端</li></ul><p>其中，我将终端设置为<code>gnome-terminal</code>，我们可以通过以下命令来获取其位置：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> gnome-terminal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>其一般在<code>/usr/bin/gnome-terminal</code>。</p><h1 id="2-输入法">2. 输入法<a class="header-anchor" href="#2-输入法"> ¶</a></h1><p>（详见上一篇的末端）</p><p>我使用的输入方式是<code>小鹤双拼</code>。</p><p>进入<code>fcitx5 configuration</code>（通过按下<code>Super</code>键并输入<code>fcitx5</code>来搜索）后，我们可以在右侧搜索<code>shuangpin</code>来添加双拼输入法。</p><p><img src="/img/ALI/03/ali01.PNG" alt="fcitx5 configuration"></p><p>对双拼单独配置：</p><p><img src="/img/ALI/03/ali02.PNG" alt="fcitx5 configuration"></p><p><img src="/img/ALI/03/ali03.PNG" alt="fcitx5 configuration"></p><p><img src="/img/ALI/03/ali03-1.PNG" alt="fcitx5 configuration"></p><p>更改其他快捷键：</p><p><img src="/img/ALI/03/ali04.PNG" alt="fcitx5 configuration"></p><h1 id="3-zsh">3. zsh<a class="header-anchor" href="#3-zsh"> ¶</a></h1><p>我喜欢使用<code>zsh</code>来替代<code>bash</code>，并且使用<code>oh-my-zsh</code>来管理<code>zsh</code>的配置。</p><p>具体操作请参考</p><blockquote><p>这篇博客 <a href="/2023/06/14/LUT-02-zsh/" title="「LUT」02 zsh-更漂亮的terminal">「LUT」02 zsh-更漂亮的terminal</a></p></blockquote><p>简而言之：</p><ol><li>安装<code>zsh</code>与<code>oh-my-zsh</code>（<code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code>）</li><li>安装插件、主题与字体（<a href="https://www.github.com/SiriusAhu/zsh-script">我的脚本</a>）</li><li>安装字体</li><li>安装颜色主题<code>Aura</code>（通过<code>Gogh</code>: <code>bash -c &quot;$(wget -qO- https://git.io/vQgMr)&quot;</code>）<ul><li>注意：如果出现<code>enviroment: line: command not found</code>之类的错误，可以尝试先新建一个<code>gnome-terminal</code>的<code>profile</code>，然后再运行<code>Gogh</code>。</li></ul></li></ol><blockquote><p>设置<code>zsh</code>为默认<code>shell</code>: <code>chsh -s /bin/zsh</code></p></blockquote><p><img src="/img/ALI/03/ali05.PNG" alt="zsh"></p><h1 id="4-grub">4. grub<a class="header-anchor" href="#4-grub"> ¶</a></h1><p>我自己习惯更改默认的<code>grub</code>配置，使其更加美观。</p><p>具体参考：</p><blockquote><p>我的这篇博客： <a href="/2023/05/12/LUT-01-grub/" title="「LUT」01 Grub-电脑启动引导">「LUT」01 Grub-电脑启动引导</a></p></blockquote><p>简而言之：</p><ol><li>安装<code>grub-customizer</code></li><li>下载心仪的<code>grub</code>主题</li><li>应用主题</li></ol><p><img src="/img/ALI/03/joker.png" alt="grub"></p><blockquote><p>此处展示的是我自己的<code>grub</code>主题，你可以在<a href="https://www.gnome-look.org/p/2122684">这个网站</a>找到它。</p></blockquote><h1 id="5-GNOME-Extensions">5. GNOME Extensions<a class="header-anchor" href="#5-GNOME-Extensions"> ¶</a></h1><p>如果你使用的是<code>Gnome</code>桌面环境，那么你可以尝试安装一些<code>Gnome Extensions</code>来增强你的桌面体验。</p><p>详见：</p><blockquote><p>我的这篇博客： <a href="/2024/06/19/LUT-03-Gnome_Beautify/" title="「LUT」03 Gnome Beautify">「LUT」03 Gnome Beautify</a></p></blockquote><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>Arch Linux Installation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux Installation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「ALI」02 安装之后...</title>
    <link href="/2024/01/14/ALI-02-After_Installation/"/>
    <url>/2024/01/14/ALI-02-After_Installation/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>在上一节中我们已经完成了<code>Arch Linux</code>的安装，但是我们还有许多事情要做，包括安装<code>桌面环境</code>、<code>输入法</code>等等。</p><p>这一节中我会先介绍桌面环境的安装，然后再补充一些其他的内容。</p><h2 id="0-Use-better-mirrors-to-speed-up-downloads">0. Use better mirrors to speed up downloads<a class="header-anchor" href="#0-Use-better-mirrors-to-speed-up-downloads"> ¶</a></h2><p>由于众所周知的原因，我们最好使用一些国内的镜像源来加速下载。</p><p>我们可以使用<code>reflector</code>来自动选择速度最快的镜像源。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> reflector <span class="token comment"># 安装reflector</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> reflector <span class="token parameter variable">--country</span> China <span class="token parameter variable">--age</span> <span class="token number">12</span> <span class="token parameter variable">--protocol</span> https <span class="token parameter variable">--sort</span> rate <span class="token parameter variable">--save</span> /etc/pacman.d/mirrorlist <span class="token comment"># 选择速度最快的12个小时内更新的镜像源并保存到/etc/pacman.d/mirrorlist</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>最后我们再更新一下<code>pacman</code>的软件包数据库。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-Syy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="1-Install-Desktop-Environment">1. Install Desktop Environment<a class="header-anchor" href="#1-Install-Desktop-Environment"> ¶</a></h2><p>目前有许多桌面环境可供选择，包括<code>GNOME</code>、<code>KDE</code>、<code>Xfce</code>、<code>LXDE</code>、<code>LXQt</code>、<code>Cinnamon</code>、<code>Deepin</code>、<code>Budgie</code>等等。</p><p>这里我想以<code>GNOME</code>为例，在性能足够的情况下<code>GNOME</code>的表现非常不错，我自己使用的也是<code>GNOME</code>。</p><h2 id="1-1-Update-pacman-database">1.1. Update <code>pacman</code> database<a class="header-anchor" href="#1-1-Update-pacman-database"> ¶</a></h2><blockquote><p>这里的“数据库”指的是<code>pacman</code>的软件包数据库，是用于存储软件包信息（包括软件包名称、版本、依赖关系等）的数据库。</p></blockquote><p>首先我们需要更新一下<code>pacman</code>的数据库，这样我们才能安装最新的软件包。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-Syy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>注意：<code>-Sy</code>表示“下载软件包数据库，但不更新系统中的软件包”，简称“部分更新”。这种方式是很危险的，在<code>-Sy</code>操作后执行<code>-S</code>操作可能会导致软件包不兼容的问题。<br>因此在要更新时请直接使用<code>-Syu</code>来更新软件包数据库并更新系统中的软件包。<br><code>-Syy</code>则是“强制更新软件包数据库”，即使软件包数据库已经是最新的了，也会重新下载一遍。所以这里我们使用<code>-Syy</code>来更新软件包数据库。</p></blockquote><h2 id="1-2-Install-GNOME">1.2. Install <code>GNOME</code><a class="header-anchor" href="#1-2-Install-GNOME"> ¶</a></h2><p>我们将安装以下软件包：</p><ul><li><code>gnome</code>：<code>GNOME</code>桌面环境</li><li><code>gnome-tweaks</code>：<code>GNOME</code>桌面环境的设置工具</li><li><code>noto-fonts-cjk</code>：<code>Noto Sans CJK</code>字体，包括<code>Noto Sans CJK SC</code>（简体中文）、<code>Noto Sans CJK TC</code>（繁体中文）、<code>Noto Sans CJK JP</code>（日文）、<code>Noto Sans CJK KR</code>（韩文）</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> gnome gnome-tweaks noto-fonts-cjk <span class="token comment"># 可根据需求选择安装字体包</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>一路选回车即可</p></blockquote><h2 id="1-3-Enable-gdm">1.3. Enable <code>gdm</code><a class="header-anchor" href="#1-3-Enable-gdm"> ¶</a></h2><p><code>gdm</code>是<code>GNOME</code>的显示管理器，我们需要让它在开机时启动以直接进入<code>GNOME</code>桌面环境。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> gdm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="1-4-Reboot-and-enjoy-GNOME">1.4. Reboot and enjoy <code>GNOME</code>!<a class="header-anchor" href="#1-4-Reboot-and-enjoy-GNOME"> ¶</a></h2><p>最后我们重启电脑，就可以进入<code>GNOME</code>桌面环境了！</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/img/ALI/02/ali01.PNG" alt="GNOME"><br><img src="/img/ALI/02/ali02.PNG" alt="GNOME"></p><h2 id="1-5-Where-is-my-terminal">1.5. Where is my <code>terminal</code>?<a class="header-anchor" href="#1-5-Where-is-my-terminal"> ¶</a></h2><p>按以上方法安装的<code>GNOME</code>使用的默认终端是<code>gnome-console</code>，我们可以按下<code>Super</code>（<code>Windows</code>键）然后输入<code>console</code>来打开它。</p><p>当然，我们也可以安装其他终端，比如<code>gnome-terminal</code>、<code>xfce4-terminal</code>等等。</p><h1 id="2-yay-an-easy-to-use-AUR-helper-Optional-but-recommended">2. <code>yay</code>: an easy-to-use AUR helper (<strong>Optional but recommended!</strong>)<a class="header-anchor" href="#2-yay-an-easy-to-use-AUR-helper-Optional-but-recommended"> ¶</a></h1><h2 id="2-1-What-is-yay-and-why-we-need-it">2.1. What is <code>yay</code> and why we need it?<a class="header-anchor" href="#2-1-What-is-yay-and-why-we-need-it"> ¶</a></h2><p><code>yay</code>是一个非常好用的<code>AUR</code>助手，可以帮助我们快速安装<code>AUR</code>软件包。</p><p>一般来说，我们想要用<code>pacman</code>安装某个软件则需要它的全名，但是<code>yay</code>可以帮助我们通过关键词来搜索软件包，然后选择安装。</p><p>比如说我想安装<code>neofetch</code>，但是只记得它的名字开头是<code>neof</code>，那么我就可以使用<code>yay</code>来搜索<code>neof</code>，然后选择安装<code>neofetch</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>另外，在没有<code>yay</code>之前，我们需要手动下载<code>AUR</code>软件包的源码，然后使用<code>makepkg</code>来编译安装，这个过程非常繁琐，而<code>yay</code>可以帮助我们自动完成这些步骤。</p><h2 id="2-2-Install-yay">2.2. Install <code>yay</code><a class="header-anchor" href="#2-2-Install-yay"> ¶</a></h2><p>首先确保基本的<code>base-devel</code>组件已经安装。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> base-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>之后通过<code>git</code>来下载<code>yay</code>的源码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://aur.archlinux.org/yay.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>进入<code>yay</code>的源码目录并执行<code>makepkg</code>来编译安装。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> yaymakepkg <span class="token parameter variable">-si</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：由于众所周知的原因，我们需要科学上网才能顺利<code>makepkg</code>。</p></blockquote><h2 id="2-3-Example-Download-google-chrome">2.3. Example: Download <code>google-chrome</code><a class="header-anchor" href="#2-3-Example-Download-google-chrome"> ¶</a></h2><p><code>Google Chrome</code>作为一个拥有庞大用户量的高度可定制的浏览器，是我认为装机必备的一个浏览器。</p><p>由于<code>Google Chrome</code>不在<code>Arch</code>的官方软件库中，所以我们需要使用<code>yay</code>来安装。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay google chrome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/img/ALI/02/ali03.PNG" alt="yay"></p><p>我们发现想要的软件的序号是<code>1</code>，那么我们就输入<code>1</code>并回车。</p><p>之后一路回车即可。</p><p><img src="/img/ALI/02/ali04.PNG" alt="yay-downloading"></p><h2 id="2-4-Clean-up-remove-no-longer-needed-dependencies">2.4. Clean up: remove no longer needed dependencies<a class="header-anchor" href="#2-4-Clean-up-remove-no-longer-needed-dependencies"> ¶</a></h2><p>以下是一些用于<code>pacman</code>和<code>yay</code>的清理命令。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-Rns</span> <span class="token variable"><span class="token variable">$(</span>pacman <span class="token parameter variable">-Qtdq</span><span class="token variable">)</span></span> <span class="token comment"># 删除所有不再需要的依赖</span>yay <span class="token parameter variable">-Yc</span> <span class="token comment"># 删除所有不再需要的AUR软件包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="3-Install-Chinese-Input-Method">3. Install Chinese Input Method<a class="header-anchor" href="#3-Install-Chinese-Input-Method"> ¶</a></h1><p>一般推荐使用<code>fcitx5</code>作为输入法框架，然后再安装<code>rime</code>作为输入法引擎。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> fcitx5-im <span class="token comment"># 一定要先安装fcitx5-im，否则会出现无法进入配置界面的问题</span><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> fcitx5-chinese-addons  fcitx5-rime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>之后就可以通过<code>fcitx5-configtool</code>来配置输入法了。（具体配置方法请自行查找）</p><h1 id="4-Drivers">4. Drivers<a class="header-anchor" href="#4-Drivers"> ¶</a></h1><p>具体的驱动安装方法请参考<a href="https://zhuanlan.zhihu.com/p/568981775">Arch Linux 安装后该做什么？Arch Linux 使用指南与推荐配置「2023.09」</a>。</p><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>至此，我们已经配置好了基础的工作环境，可以开始愉快地使用<code>Arch Linux</code>了！</p><p>Have fun! 😉</p><h1 id="References">References<a class="header-anchor" href="#References"> ¶</a></h1><ul><li><a href="https://zhuanlan.zhihu.com/p/568981775">Arch Linux 安装后该做什么？Arch Linux 使用指南与推荐配置「2023.09」</a></li><li><a href="https://zhuanlan.zhihu.com/p/393746270">Arch Linux - 中文输入法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Arch Linux Installation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux Installation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「ALI」01 开始安装！</title>
    <link href="/2024/01/14/ALI-01-Installation/"/>
    <url>/2024/01/14/ALI-01-Installation/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>如果你看到了这里，那么说明你已经做好准备了，那么我们就开始吧！</p><blockquote><p>注：本教程使用<code>virtualbox</code>作为虚拟机记录安装过程，实机安装过程与虚拟机安装过程基本完全相同。</p></blockquote><h1 id="1-进入Arch-Linux的live环境（live-environment）">1. 进入<code>Arch Linux</code>的<code>live</code>环境（<code>live environment</code>）<a class="header-anchor" href="#1-进入Arch-Linux的live环境（live-environment）"> ¶</a></h1><p>首先我们要进入<code>Arch Linux</code>的安装环境。对于实机安装我们需要在<code>BIOS</code>中选择从我们的启动盘启动，而对于虚拟机安装我们需要选择从我们的<code>Arch Linux</code>镜像启动。</p><blockquote><p>如果使用的是虚拟机，请启用<code>EFI</code>或将<code>BIOS</code>模式设置为<code>UEFI</code>。</p></blockquote><p><img src="/img/ALI/01/efi.PNG" alt="efi"></p><p>具体过程请自行搜索，不多赘述。</p><p>看到以下界面后选择第一个，按下回车即可进入<code>Arch Linux</code>的安装环境。</p><p><img src="/img/ALI/01/ali01.PNG" alt="Get into live env"></p><p>等待片刻后，我们就进入了<code>Arch Linux</code>的安装环境。</p><p><img src="/img/ALI/01/ali02.PNG" alt="live env"></p><h1 id="2-连接到互联网">2. 连接到互联网<a class="header-anchor" href="#2-连接到互联网"> ¶</a></h1><p>在安装<code>Arch Linux</code>之前，我们需要先连接到互联网，这样我们才能下载所需资源。</p><p>首先我们需要检查一下我们的网络是否正常工作。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token parameter variable">-c</span> <span class="token number">3</span> www.bing.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这段代码会向<code>www.bing.com</code>发送三个数据包，如果我们的网络正常工作的话，那么我们应该会收到三个回复。</p><p><img src="/img/ALI/01/ali03.PNG" alt="ping"></p><p>如果我们的网络不正常我们需要通过<code>有线网络</code>或者<code>WiFi</code>来连接到互联网。</p><p>对于前者，我们直接往电脑上插入网线即可。</p><p>对于后者，我们可以使用<code>iwctl</code>来连接到WiFi。</p><h2 id="2-1-Connect-to-WiFi">2.1 Connect to WiFi<a class="header-anchor" href="#2-1-Connect-to-WiFi"> ¶</a></h2><p>首先我们需要查看自己的无线网卡的名称。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iwctl device list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>一般来说，我们的无线网卡的名称应该是<code>wlan0</code>。（后面都以<code>wlan0</code>为例）</p><p>然后启动<code>iwctl</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iwctl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后我们需要扫描附近的WiFi。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">station wlan0 scan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后我们就可以查看附近的WiFi了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">station wlan0 get-networks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>之后我们根据列表中的WiFi名称来连接到WiFi。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">station wlan0 connect <span class="token operator">&lt;</span>WiFi名称<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>最后输入WiFi的密码即可连接到WiFi。</p><p>退出<code>iwctl</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="3-对硬盘（disks）进行分区（partition）（重要）">3. 对<code>硬盘</code>（<code>disks</code>）进行<code>分区</code>（<code>partition</code>）（<strong>重要</strong>）<a class="header-anchor" href="#3-对硬盘（disks）进行分区（partition）（重要）"> ¶</a></h1><p>在安装<code>Arch Linux</code>之前，我们需要先对我们的硬盘进行分区。</p><blockquote><p>注意：这一步是非常重要的，如果你不知道自己在做什么，那么请不要随意分区，否则你的数据可能会丢失。<br>分区操作不当可能会误删你的数据，所以请务必谨慎操作。</p></blockquote><p>首先我们要查看电脑的硬盘情况。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/img/ALI/01/ali04.PNG" alt="lsblk -l"></p><p>如上图所示，在虚拟机中有一个名字叫<code>sda</code>，容量为<code>20G</code>的硬盘。这里我们需要记住这个硬盘的路径为<code>/dev/sda</code>。</p><p>如果你在实机上安装，那么你可能会看到多个硬盘，这时你需要自己判断哪个是你的硬盘。（一般根据容量来判断）</p><p>然后我们使用<code>cfdisk</code>来对硬盘进行分区。（注意：这里的<code>/dev/sda</code>是虚拟机中的硬盘，实机中的硬盘可能是类似于<code>/dev/nvme0n1</code>这样的名称，请自行判断。）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cfdisk</span> /dev/sda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Note: 如果出现<code>select label type</code>的提示，那么我们选择<code>gpt</code>即可。（此<code>gpt</code>是<code>GUID Partition Table</code>的缩写，而不是指<code>ChatGPT</code>。）</p><p><img src="/img/ALI/01/ali05.PNG" alt="select label type"></p><p>如果看到以下的界面，那么说明我们已经成功进入了<code>cfdisk</code>。</p><p><img src="/img/ALI/01/ali06.PNG" alt="cfdisk"></p><p>一个<code>Linux</code>系统一般需要三个分区：<code>EFI</code>分区、<code>swap</code>分区和<code>root</code>分区。</p><table><thead><tr><th style="text-align:center">分区名称</th><th style="text-align:center">分区类型</th><th style="text-align:center">分区大小</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">EFI</td><td style="text-align:center">EFI System</td><td style="text-align:center">512M - 1G</td><td style="text-align:center">存放引导程序</td></tr><tr><td style="text-align:center">swap</td><td style="text-align:center">Linux swap</td><td style="text-align:center">一般为内存大小的两倍</td><td style="text-align:center">用于作为虚拟内存，保证程序正常运行</td></tr><tr><td style="text-align:center">root</td><td style="text-align:center">Linux root</td><td style="text-align:center">推荐10G以上（一般将剩余空间设置为root）</td><td style="text-align:center">存放系统文件</td></tr></tbody></table><blockquote><p>注意，有些教程会建议分出<code>home</code>区，但这并不是必须的。<code>home</code>和<code>root</code>都是存放文件的地方，没有区别。</p></blockquote><p>具体分区步骤请参考这个视频的[00:40-01:14]：<a href="https://www.bilibili.com/video/BV1J34y1f74E/?&amp;t=40">【妈妈级2023Arch最新镜像安装教程，UEFI+BIOS双引导Archlinux安装教程】 </a></p><p>对于我的例子，我将<code>EFI</code>分区设置为<code>512M</code>，<code>swap</code>分区设置为<code>2G</code>，剩余空间全部分给<code>root</code>分区。</p><p><img src="/img/ALI/01/ali07.PNG" alt="cfdisk"></p><p>最后再次检查一下我们的分区是否正确。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/img/ALI/01/ali08.PNG" alt="fdisk -l"></p><h1 id="4-对分区（partitions）进行格式化（format）">4. 对<code>分区</code>（<code>partitions</code>）进行<code>格式化</code>（<code>format</code>）<a class="header-anchor" href="#4-对分区（partitions）进行格式化（format）"> ¶</a></h1><p>分区后我们可以对分区进行格式化以应用我们的分区设置（比如<code>type</code>）。</p><p>如果不格式化的话，我们的设置并没有生效，也就无法进行后续挂载等步骤。</p><p>首先查看各个分区的路径。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/img/ALI/01/ali08.PNG" alt="lsblk"></p><p>我的例子：</p><ul><li><code>EFI</code>分区:<code>/dev/sda1</code></li><li><code>swap</code>分区:<code>/dev/sda2</code></li><li><code>root</code>分区:<code>/dev/sda3</code></li></ul><p>格式化<code>EFI</code>分区。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkfs.fat <span class="token parameter variable">-F</span> <span class="token number">32</span> /dev/sda1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>格式化<code>swap</code>分区。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkswap</span> /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>格式化<code>root</code>分区。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkfs.ext4 /dev/sda3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="5-挂载（mount）分区（partitions）">5. <code>挂载</code>（<code>mount</code>）分区（<code>partitions</code>）<a class="header-anchor" href="#5-挂载（mount）分区（partitions）"> ¶</a></h1><p>格式化分区后，我们需要将分区挂载到我们的<code>Arch Linux</code>安装环境中。</p><blockquote><p>什么是<code>挂载</code>？<br><code>挂载</code>（<code>mount</code>）是指将一个文件系统（<code>filesystem</code>）连接到文件树的一个特定位置上，使得该文件系统中的内容可以通过这个位置访问到。</p></blockquote><p>挂载<code>root</code>分区。（注意：一定要先挂载<code>root</code>分区！）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sda3 /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>挂载<code>EFI</code>分区。（<code>--mkdir</code>参数是指如果挂载目录不存在的话就创建一个，<code>/mnt</code>下最开始是没有<code>boot</code>和<code>efi</code>目录的。）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> <span class="token parameter variable">--mkdir</span> /dev/sda1 /mnt/boot/efi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>挂载<code>swap</code>分区。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">swapon</span> /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="6-安装基础软件包">6. 安装基础软件包<a class="header-anchor" href="#6-安装基础软件包"> ¶</a></h1><p>之后我们要为我们的<code>Arch Linux</code>安装一些基础的软件包。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacstrap <span class="token parameter variable">-K</span> /mnt base linux linux-firmware base-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>注：<br><code>pacstrap</code>是<code>Arch Linux</code>提供的一个安装软件包的工具，它会自动解决软件包的依赖关系。<br><code>-K</code>参数是指使用<code>Pacman</code>的<code>Keyring</code>，这样我们就可以在安装过程中使用<code>Pacman</code>的<code>Keyring</code>来验证软件包的完整性，从而避免安装被篡改的软件包。</p></blockquote><table><thead><tr><th style="text-align:center">软件包名称</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">base</td><td style="text-align:center">基础，包含了一些基础的软件包，比如<code>bash</code>、<code>coreutils</code>等</td></tr><tr><td style="text-align:center">linux</td><td style="text-align:center">内核，包含了<code>Linux</code>内核。也可以被其他内核替代，比如<code>linux-lts</code>，<code>linux-zen</code>等</td></tr><tr><td style="text-align:center">linux-firmware</td><td style="text-align:center">内核固件，包含了一些硬件的固件，比如<code>Intel</code>的无线网卡固件等</td></tr><tr><td style="text-align:center">base-devel</td><td style="text-align:center">基础开发环境，包含了一些基础的开发环境，比如<code>gcc</code>、<code>make</code>等</td></tr></tbody></table><h1 id="7-生成fstab文件">7. 生成<code>fstab</code>文件<a class="header-anchor" href="#7-生成fstab文件"> ¶</a></h1><p><code>fstab</code>是<code>Linux</code>系统中的一个配置文件，它用于指定系统中的文件系统如何挂载。</p><p>我们可以使用<code>genfstab</code>来生成<code>fstab</code>文件，把当前的挂载信息写入系统中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">genfstab <span class="token parameter variable">-U</span> /mnt <span class="token operator">>></span> /mnt/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="8-使用arch-chroot进入新系统">8. 使用<code>arch-chroot</code>进入新系统<a class="header-anchor" href="#8-使用arch-chroot进入新系统"> ¶</a></h1><p><code>arch-chroot</code>是<code>Arch Linux</code>提供的一个工具，用于改变当前的根目录。</p><p>我们可以使用<code>arch-chroot</code>来进入我们的新系统以进一步配置我们的系统。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="9-设置时区（time-zone）">9. 设置<code>时区</code>（<code>time zone</code>）<a class="header-anchor" href="#9-设置时区（time-zone）"> ¶</a></h1><p>由于我们在中国大陆，所以我们需要将时区设置为<code>Asia/Shanghai</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-sf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>校准时间。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hwclock <span class="token parameter variable">--systohc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="10-设置本地化（locale）">10. 设置<code>本地化</code>（<code>locale</code>）<a class="header-anchor" href="#10-设置本地化（locale）"> ¶</a></h1><p>我们需要设置本地化信息，包括语言、地区、字符集等。</p><p>由于要编辑文件，所以我们需要安装一个文本编辑器。这里我们使用<code>vim</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p><code>vim</code>的用法请自行搜索。<br>Tips：<code>vim</code>中<code>/</code>用于搜索，<code>n</code>用于跳转到下一个搜索结果，<code>N</code>用于跳转到上一个搜索结果。</p></blockquote><h2 id="10-1-编辑-etc-locale-gen">10.1. 编辑<code>/etc/locale.gen</code><a class="header-anchor" href="#10-1-编辑-etc-locale-gen"> ¶</a></h2><p>首先我们需要编辑<code>/etc/locale.gen</code>文件，将<code>en_US.UTF-8 UTF-8</code>和<code>zh_CN.UTF-8 UTF-8</code>前面的注释符号<code>#</code>去掉。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/locale.gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/img/ALI/01/ali09.PNG" alt="locale.gen"><img src="/img/ALI/01/ali09-1.PNG" alt="locale.gen"></p><h2 id="10-2-生成locale">10.2. 生成<code>locale</code><a class="header-anchor" href="#10-2-生成locale"> ¶</a></h2><p>然后我们生成<code>locale</code>文件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">locale-gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="10-3-编辑-etc-locale-conf">10.3. 编辑<code>/etc/locale.conf</code><a class="header-anchor" href="#10-3-编辑-etc-locale-conf"> ¶</a></h2><p>最后我们创建<code>/etc/locale.conf</code>文件，并将<code>LANG=en_US.UTF-8</code>写入其中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8 <span class="token operator">></span> /etc/locale.conf <span class="token comment"># 这是一种简便的写法，等价于先创建文件再写入</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>注意：如果直接使用<code>zh_CN.UTF-8</code>的话，会导致<code>Arch Linux</code>的终端无法正常显示中文（乱码），所以我们先使用<code>en_US.UTF-8</code>作为默认语言。</p></blockquote><h1 id="11-添加用户（user）并设置密码（password）">11. 添加<code>用户</code>（<code>user</code>）并设置<code>密码</code>（<code>password</code>）<a class="header-anchor" href="#11-添加用户（user）并设置密码（password）"> ¶</a></h1><p>在<code>Linux</code>中，我们不建议直接使用<code>root</code>用户，而是建议使用普通用户，然后使用<code>sudo</code>来提升权限。<br>因为<code>root</code>的权限太高，如果平时使用<code>root</code>的话，很可能会发生一些毁灭性的误操作。</p><h2 id="11-1-添加用户">11.1. 添加用户<a class="header-anchor" href="#11-1-添加用户"> ¶</a></h2><p>我们可以使用<code>useradd</code>来添加用户。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p><code>-m</code>参数是指创建用户的同时创建用户的家目录。<br><code>&lt;用户名&gt;</code>是指我们要创建的用户名。</p></blockquote><h2 id="11-2-设置密码">11.2. 设置密码<a class="header-anchor" href="#11-2-设置密码"> ¶</a></h2><blockquote><p>切记：<code>Linux</code>中用户一旦忘记密码，是无法通过重置密码来登录的，所以一定要<strong>记住密码</strong>！！！</p></blockquote><p>我们为用户设置密码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p><code>&lt;用户名&gt;</code>是指我们刚刚创建的用户名。</p></blockquote><p>之后按照提示输入两次密码即可。（输入的密码不会显示在屏幕上哦）</p><p>最后为<code>root</code>也设置一个密码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> <span class="token comment"># 不加用户名的话默认为root</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>之后按照提示输入两次密码即可。（输入的密码不会显示在屏幕上哦）</p><h2 id="11-3-编辑-etc-sudoers">11.3. 编辑<code>/etc/sudoers</code><a class="header-anchor" href="#11-3-编辑-etc-sudoers"> ¶</a></h2><p>我们需要编辑<code>/etc/sudoers</code>文件，给予我们的用户<code>sudo</code>权限。</p><p>具体操作是在文件中找到<code>root ALL=(ALL) ALL</code>这一行，然后在其下面添加一行<code>&lt;用户名&gt; ALL=(ALL) ALL</code>。如下图所示。</p><p><img src="/img/ALI/01/ali10.PNG" alt="sudoers"></p><h1 id="12-设置主机名（hostname）">12. 设置<code>主机名</code>（<code>hostname</code>）<a class="header-anchor" href="#12-设置主机名（hostname）"> ¶</a></h1><p>我们需要为我们的电脑设置一个主机名，这个名字需要放在<code>/etc/hostname</code>文件中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token operator">&lt;</span>主机名<span class="token operator">></span> <span class="token operator">></span> /etc/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="13-安装grub、efibootmgr和os-prober">13. 安装<code>grub</code>、<code>efibootmgr</code>和<code>os-prober</code><a class="header-anchor" href="#13-安装grub、efibootmgr和os-prober"> ¶</a></h1><p>如果你是双（多）系统用户，那么你需要安装<code>grub</code>等工具来选择开机启动哪个系统。</p><p><code>grub</code>是一个开源的多操作系统启动引导程序，它可以帮助我们在开机时选择启动哪个系统，同时还可以高度定制。</p><p><code>efibootmgr</code>是一个用于管理<code>UEFI</code>启动项的工具，它可以帮助我们在<code>UEFI</code>中添加启动项。</p><p><code>os-prober</code>是一个用于检测其他操作系统的工具，它可以帮助我们在<code>grub</code>中添加其他操作系统的启动项。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> grub efibootmgr os-prober<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="14-配置grub">14. 配置<code>grub</code><a class="header-anchor" href="#14-配置grub"> ¶</a></h1><h2 id="14-1-取消注释GRUB-DISABLE-OS-PROBER-false">14.1. 取消注释<code>GRUB_DISABLE_OS_PROBER=false</code><a class="header-anchor" href="#14-1-取消注释GRUB-DISABLE-OS-PROBER-false"> ¶</a></h2><p>在安装好<code>grub</code>等工具后，我们需要对<code>grub</code>的配置文件进行简单的修改：</p><p>取消注释<code>/etc/default/grub</code>中的最后一行，<code>GRUB_DISABLE_OS_PROBER=false</code>。</p><p><img src="/img/ALI/01/ali11.PNG" alt="grub config"></p><h2 id="14-2-生成grub配置文件">14.2. 生成<code>grub</code>配置文件<a class="header-anchor" href="#14-2-生成grub配置文件"> ¶</a></h2><p>之后我们先初始化<code>grub</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grub-install <span class="token parameter variable">--target</span><span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot/efi --bootloader-id<span class="token operator">=</span>GRUB <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后生成<code>grub</code>的配置文件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grub-mkconfig</span> <span class="token parameter variable">-o</span> /boot/grub/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="15-安装并启用NetworkManager">15. 安装并启用<code>NetworkManager</code><a class="header-anchor" href="#15-安装并启用NetworkManager"> ¶</a></h1><p>一般来说我们会使用<code>NetworkManager</code>来管理我们的网络。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> networkmanager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>在安装完成后我们将其设置为开机启动。</p><blockquote><p>注意大小写！！！</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="16-退出新系统并重启">16. 退出新系统并重启<a class="header-anchor" href="#16-退出新系统并重启"> ¶</a></h1><p>至此，基本的系统配置已经完成了，我们可以退出新系统并重启电脑了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span> <span class="token comment"># 退出chroot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span> <span class="token comment"># 重启电脑</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="17-检查新系统">17. 检查新系统<a class="header-anchor" href="#17-检查新系统"> ¶</a></h1><p>重启后我们就可以看到<code>grub</code>的启动界面了。</p><p><img src="/img/ALI/01/ali12.PNG" alt="grub"></p><p>选择<code>Arch Linux</code>并输入我们刚刚设置的用户名和密码后，我们就可以登录到我们的新系统了。</p><p><img src="/img/ALI/01/ali13.PNG" alt="desktop"></p><p>让我们下载一个<code>neofetch</code>来查看一下我们的系统信息吧。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> neofetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/img/ALI/01/ali14.PNG" alt="neofetch"></p><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>如果一切顺利的话，那么恭喜你，你已经成功安装了<code>Arch Linux</code>！</p><p>那么下一节，我们就来安装图形界面吧！</p><p>Have fun! 😉</p><h1 id="References">References<a class="header-anchor" href="#References"> ¶</a></h1><ul><li><a href="https://www.bilibili.com/video/BV1J34y1f74E">【妈妈级2023Arch最新镜像安装教程，UEFI+BIOS双引导Archlinux安装教程】 </a></li><li><a href="https://zhuanlan.zhihu.com/p/596227524">Arch Linux 详细安装教程，萌新再也不怕了！「2023.10」</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Arch Linux Installation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Linux Installation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「ALI」00 准备工作</title>
    <link href="/2024/01/14/ALI-00-preparation/"/>
    <url>/2024/01/14/ALI-00-preparation/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>这是一个（<strong>单电脑多系统</strong>）安装<code>Arch Linux</code>的系列教程（经验分享），从启动盘的制作到图形界面的安装，都会一一介绍！</p><blockquote><p>注：本教程仅根据我的个人经验及使用情况编写，不保证适用于所有人。</p></blockquote><p>本章节将会介绍一些安装前的须知，以及一些准备工作。</p><h1 id="Why-I-write-this-tutorial">Why I write this tutorial?<a class="header-anchor" href="#Why-I-write-this-tutorial"> ¶</a></h1><p>网上已经有很多非常详尽的<code>Arch Linux</code>安装教程了，为什么我还要写这个教程呢？</p><p>我并不能写得比那些教程更好，这个教程更多地是为了记录我自己的安装过程，为未来的我提供参考。</p><p>再者，网上虽然有很多教程，但其实现的细节等都有所不同，所以我想整合记录我自己安装成功的经验。</p><h1 id="Before-we-start">Before we start<a class="header-anchor" href="#Before-we-start"> ¶</a></h1><h2 id="1-什么是Arch-Linux-为什么我们要选择它？">1. 什么是<code>Arch Linux</code> &amp; 为什么我们要选择它？<a class="header-anchor" href="#1-什么是Arch-Linux-为什么我们要选择它？"> ¶</a></h2><p><code>Linux</code>有着众多的发行版，而<code>Arch Linux</code>是其中最受欢迎的发行版之一。</p><p>我选择<code>Arch</code>的原因主要是它的<code>强大</code>：</p><ol><li><code>Arch</code>有着非常详细的<a href="https://wiki.archlinux.org/">官方wiki</a>，这使得我们在遇到各种问题时可以很快地找到<code>高可信的</code>解决方案。</li><li><code>Arch</code>有着非常活跃的社区，里面大佬云集，在无法通过官方wiki解决问题时，我们就可以在社区中寻求帮助。</li><li>（最喜欢的一点）<code>Arch</code>有着生态完善的<code>AUR</code>（Arch User Repository），这个软件库里包含了几乎所有我们需要的软件，而且它的软件更新速度非常快，这使得我们可以第一时间体验到最新的软件。</li></ol><h2 id="2-你是否适合使用Arch-Linux？">2. 你是否适合使用<code>Arch Linux</code>？<a class="header-anchor" href="#2-你是否适合使用Arch-Linux？"> ¶</a></h2><p><code>Arch Linux</code>是一个非常轻量级的发行版，它的安装过程非常复杂，而且它的使用也需要一定的<code>Linux</code>基础。</p><p>如果你是新手，那么我建议你从<code>Ubuntu</code>系列的发行版开始（我推荐<code>Pop!_OS</code>和<code>Linux Mint</code>）。</p><p>如果你急于尝试<code>Arch</code>，那么请考虑使用<code>EndeavourOS</code>，它是一个基于<code>Arch</code>的发行版，不过预装了图形化安装程序和桌面环境，极大地简化了安装过程。同时它也是我的<code>Arch</code>入门发行版。（个人建议不要使用<code>Manjaro</code>，因为它的软件库和<code>AUR</code>更新速度都非常慢。虽然它也有图形化安装程序，并且预先设定了许多非常有用的设定，但是直接使用<code>Manjaro</code>会让你跳过太多<code>Arch</code>的学习过程，这样的话未来遇到问题时你就会束手无策。）</p><h2 id="3-你是否做好了心理准备？">3. 你是否做好了心理准备？<a class="header-anchor" href="#3-你是否做好了心理准备？"> ¶</a></h2><p>不像<code>Ubuntu</code>等所见即所得的发行版，<code>Arch</code>的安装过程相对复杂，而且它的安装过程中会遇到各种各样的问题，这些问题有些是可以通过官方wiki解决的，但是有些问题却需要我们自己去寻找解决方案。（不过不用担心，大部分问题已经有很多前辈们遇到并解决过了，基本上我们只需要在网上搜索一下就可以找到解决方案。）</p><p>所以在安装<code>Arch</code>之前，我们需要做好心理准备，不要因为遇到问题就放弃，要坚持下去，相信我，你会发现这一切都是值得的。</p><p>如果你心有顾虑的话，那么我建议你先使用虚拟机来安装<code>Arch</code>，这样即使遇到问题也不会影响你的日常使用。</p><h2 id="4-How’s-your-English">4. How’s your English?<a class="header-anchor" href="#4-How’s-your-English"> ¶</a></h2><p>由于<code>Arch</code>的官方wiki是英文的，虽说有许多汉化的页面，但是汉化程度并非十分完善，所以我们需要一定的英语基础。</p><p>况且许多术语只有英文才能表达得更加精准，所以一定要具备一定的英语基础，至少不怕看英文。</p><h1 id="Preparation">Preparation<a class="header-anchor" href="#Preparation"> ¶</a></h1><h2 id="Preparation-List">Preparation List<a class="header-anchor" href="#Preparation-List"> ¶</a></h2><p>在安装<code>Arch</code>之前，我们需要准备以下东西：</p><ol><li><code>Arch Linux</code>的安装镜像（<code>iso</code>文件），可以从<a href="https://archlinux.org/download/">官网</a>或者<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/">清华大学开源软件镜像站</a>下载。</li><li>一个<code>U盘</code>，用于制作启动盘。（由于<code>Arch</code>的镜像文件比较小，所以一个<code>2G</code>的<code>U盘</code>就足够了。）</li><li>启动盘制作软件。<br>我推荐使用<code>Rufus</code>，它是一个非常好用的启动盘制作软件，可以从<a href="https://rufus.ie/">官网</a>下载。<br>对于<code>Linux</code>用户来说，我推荐使用<code>Etcher</code>，它是一个开源的启动盘制作软件，可以从<a href="https://www.balena.io/etcher/">官网</a>下载。</li></ol><h2 id="Making-the-boot-disk">Making the boot disk<a class="header-anchor" href="#Making-the-boot-disk"> ¶</a></h2><p>制作启动盘的教程<a href="https://cn.bing.com/search?q=iso+%E5%90%AF%E5%8A%A8%E7%9B%98">网上有很多</a>，这里我就不再赘述了。</p><p>如果是使用<strong>虚拟机</strong>的话那么<strong>不需要制作启动盘</strong>。</p><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>请一定确定你已经做好了所有准备，然后我们就可以开始安装<code>Arch Linux</code>了！</p><p>Have fun! 😉</p>]]></content>
    
    
    <categories>
      
      <category>Arch Linux Installation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>OS Installation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「LUT」02 zsh-更漂亮的terminal</title>
    <link href="/2023/06/14/LUT-02-zsh/"/>
    <url>/2023/06/14/LUT-02-zsh/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>现在，请打开你的terminal，并记住它现在的样子！</p><p>这一节会帮你把terminal变得更加漂亮！比如这样：</p><p><img src="/img/LUT/02-01.png" alt="Beautified Terminal"></p><blockquote><p>可以使用<a href="https://github.com/SiriusAhu/zsh-script">Ahu的脚本</a>哟！<br><a href="https://github.com/SiriusAhu/zsh-script">点我点我！</a></p></blockquote><h1 id="How">How?<a class="header-anchor" href="#How"> ¶</a></h1><p>我使用了<code>zsh</code>来替换系统默认的<code>shell</code>：<code>bash</code>（<code>bash</code> -&gt; <code>zsh），然后使用</code>oh-my-zsh<code>来配置</code>zsh`，并添加了一些主题与插件。</p><blockquote><p>什么是<code>shell</code>？<br><code>shell</code>是一个命令行解释器，它可以帮助我们执行在terminal中输入的命令。</p></blockquote><h2 id="Details">Details<a class="header-anchor" href="#Details"> ¶</a></h2><h3 id="zsh-oh-my-zsh"><code>zsh</code> &amp; <code>oh-my-zsh</code><a class="header-anchor" href="#zsh-oh-my-zsh"> ¶</a></h3><table><thead><tr><th>packages</th><th>description</th></tr></thead><tbody><tr><td><code>zsh</code></td><td>一个强大的shell</td></tr><tr><td><code>oh-my-zsh</code></td><td>一个强大的zsh配置框架</td></tr></tbody></table><h3 id="Theme-Plugins">Theme &amp; Plugins<a class="header-anchor" href="#Theme-Plugins"> ¶</a></h3><p>为了让<code>zsh</code>更加美观，我们需要安装<code>powerlevel10k</code>主题。</p><table><thead><tr><th>theme</th><th>description</th></tr></thead><tbody><tr><td><code>powerlevel10k</code></td><td>一个强大、美观的主题（需要安装特殊字体）</td></tr></tbody></table><p>为了更好的使用体验，我们还需要安装一些插件：</p><table><thead><tr><th>plugins</th><th>description</th></tr></thead><tbody><tr><td><code>zsh-syntax-highlighting</code></td><td>为命令中不同的部分添加不同的颜色，也让正确与错误的命令有不同的颜色</td></tr><tr><td><code>zsh-history-substring-search</code></td><td>在你输入一部分命令后，可以使用上下键来查看以该部分命令开头的历史命令</td></tr><tr><td><code>zsh-autosuggestions</code></td><td>当你输入命令时，会自动提示你可能想要输入的命令（配合<code>zsh-history-substring-search</code>使用）</td></tr><tr><td><code>auto-notify</code></td><td>当命令执行完毕后会自动弹出通知</td></tr><tr><td><code>you-shoud-use</code></td><td>如果你使用<code>g</code>作为<code>git</code>的别名，那么当你输入<code>git</code>时会自动提示你可以使用<code>g</code></td></tr><tr><td><code>copypath</code>*</td><td>提供<code>copypath</code>命令以快速复制路径（留空则复制当前路径）</td></tr><tr><td><code>copyfile</code>*</td><td>提供<code>copyfile</code>命令以快速复制文件内容</td></tr><tr><td><code>copybuffer</code>*</td><td>使用<code>Ctrl+O</code>来复制当前的命令行内容</td></tr><tr><td><code>sudo</code>*</td><td>在输入命令运行后发现权限不够，可以双击<code>Esc</code>来自动添加<code>sudo</code>给上一条命令</td></tr></tbody></table><ul><li>其中带<code>*</code>的插件为<code>oh-my-zsh</code>自带的插件，无需下载。</li></ul><h3 id="Color-Scheme-Palette">Color Scheme (Palette)<a class="header-anchor" href="#Color-Scheme-Palette"> ¶</a></h3><p>最后是安装（设置）调色盘，这里建议直接使用<a href="https://gogh-co.github.io/Gogh/"><code>Gogh Scheme</code></a>来下载各种调色盘。</p><h1 id="Install-zsh-oh-my-zsh">Install <code>zsh</code> &amp; <code>oh-my-zsh</code><a class="header-anchor" href="#Install-zsh-oh-my-zsh"> ¶</a></h1><h2 id="zsh"><code>zsh</code><a class="header-anchor" href="#zsh"> ¶</a></h2><p>zsh是一个强大的shell，它可以替代默认的<code>bash</code>，让你的terminal更加强大。</p><p>这一步因系统而异。</p><p>如果是<code>Arch</code>系的发行版，可以直接使用<code>pacman</code>安装：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果是<code>Debian</code>系的发行版（如<code>Ubuntu</code>,<code>Linux Mint</code>等），可以直接使用<code>apt</code>安装：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>设置<code>zsh</code>为默认<code>shell</code>:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh <span class="token parameter variable">-s</span> /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="oh-my-zsh">oh-my-zsh<a class="header-anchor" href="#oh-my-zsh"> ¶</a></h2><p><code>oh-my-zsh</code>是一个强大的<code>zsh</code>配置框架，它可以让你在<code>zsh</code>中使用各种主题与插件。</p><p>其<a href="https://ohmyz.sh/">官网</a>提供了两种安装脚本，一种是使用<code>curl</code>，一种是使用<code>wget</code>：</p><blockquote><p>注意：如果此脚本不能使用，请前往官网查看最新的安装脚本</p></blockquote><p>Curl:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Wget:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh <span class="token parameter variable">-O</span> -<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>在下载后一路选择默认。</p><p>最后将zsh设为默认shell即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh <span class="token parameter variable">-s</span> /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="Install-theme-plugins">Install theme &amp; plugins<a class="header-anchor" href="#Install-theme-plugins"> ¶</a></h1><blockquote><p>这一步可以使用<a href="https://github.com/SiriusAhu/zsh-script">我的脚本</a>来完成哦！<br>我的脚本包含了下载步骤（包括主题、插件与字体）与配置文件（<code>~/.zshrc</code>）修改，你可以直接使用我的脚本来安装。<br>详情见我的<a href="https://github.com/SiriusAhu/zsh-script"><code>github仓库</code></a>。</p></blockquote><blockquote><p>.zshrc即为zsh的配置文件，位于<code>~/.zshrc</code>。类似的，bash的配置文件为<code>.bashrc</code>，位于<code>~/.bashrc</code>。</p></blockquote><h2 id="powerlevel10k">powerlevel10k<a class="header-anchor" href="#powerlevel10k"> ¶</a></h2><p><code>powerlevel10k</code>是实现主要的颜色与字体效果的主题，它需要一些特殊的字体才能正常显示。</p><p>建议访问<a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a>的github页面查看最新的安装方法。</p><p><a href="https://github.com/romkatv/powerlevel10k/blob/master/font.md">字体描述</a></p><p>需要安装的是以<code>MesloLGS NF</code>开头的4种字体，一般的<code>Linux发行版</code>都可以直接双击安装。</p><blockquote><p>注意：对于大部分的<code>terminal</code>（如：<code>gnome-terminal</code>）我们需要对其<code>profile</code>单独进行设置以应用字体！请自行搜索各种<code>terminal</code>的设置方法。</p></blockquote><h2 id="plugins">plugins<a class="header-anchor" href="#plugins"> ¶</a></h2><p>克隆需要的插件到<code>~/.oh-my-zsh/custom/plugins</code>目录下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>repo<span class="token operator">></span> ~/.oh-my-zsh/custom/plugins/<span class="token operator">&lt;</span>plugin<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>之后再修改<code>~/.zshrc</code>文件，将需要的插件添加到<code>plugins</code>中即可。</p><h1 id="Install-color-scheme">Install color scheme<a class="header-anchor" href="#Install-color-scheme"> ¶</a></h1><p>虽然自己调色或许是一种不错的选择，但是我也很推荐使用<code>Gogh Scheme</code>来下载并应用各种调色盘。</p><blockquote><p>Gogh Scheme: Color Scheme for Gnome Terminal, Pantheon Terminal, Tilix, and XFCE4 Terminal</p></blockquote><p><code>Gogh Scheme</code>只有一句命令，我们可以通过这句命令来选择自己喜欢的调色盘进行下载与安装。（<a href="https://gogh-co.github.io/Gogh/">Gogh Scheme官网</a>）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token parameter variable">-c</span>  <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> -qO- https://git.io/vQgMr<span class="token variable">)</span></span>"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>运行这行命令后我们会看到一个很长的列表，我们可以通过查看<a href="https://gogh-co.github.io/Gogh/">Gogh Scheme官网</a>的方式来预览各种调色盘。</p><blockquote><p>注意：如果出现<code>enviroment: line: command not found</code>之类的错误，可以尝试先新建一个<code>gnome-terminal</code>的<code>profile</code>，然后再运行<code>Gogh</code>。</p></blockquote><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>希望你能找到自己最喜欢的终端美化方案！🎉</p><hr><blockquote><p>上一节： <a href="/2023/05/12/LUT-01-grub/" title="「LUT」01 Grub-电脑启动引导">「LUT」01 Grub-电脑启动引导</a><br>下一节： <a href="/2024/06/19/LUT-03-Gnome_Beautify/" title="「LUT」03 Gnome Beautify">「LUT」03 Gnome Beautify</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux Useful Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>tricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「LUT」01 Grub-电脑启动引导</title>
    <link href="/2023/05/12/LUT-01-grub/"/>
    <url>/2023/05/12/LUT-01-grub/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>如果你是双系统用户，那么你一定遇到过这样一个问题<code>我该如何选择启动哪个系统呢？</code>。</p><p>虽然说可以直接通过<code>BIOS</code>来选择启动哪个系统，但是这样做真是太麻烦了！</p><p>那么！我将在这里向大家推荐一个我的解决方案：<code>Grub</code>！</p><blockquote><p><a href="https://www.gnu.org/software/grub/"><code>Grub</code></a>是一款开源的多操作系统启动引导程序，它可以帮助我们在开机时选择启动哪个系统，同时还可以高度定制。</p></blockquote><h1 id="Install-Grub（with-grub-customizer）">Install <code>Grub</code>（with <code>grub-customizer</code>）<a class="header-anchor" href="#Install-Grub（with-grub-customizer）"> ¶</a></h1><h2 id="Grub"><code>Grub</code><a class="header-anchor" href="#Grub"> ¶</a></h2><p>首先，我们需要使用自己的<code>Linux</code>发行版所提供的包管理器来安装<code>grub</code>。</p><p><code>Ubuntu</code>:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> grub <span class="token comment"># 安装grub</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>Arch</code>:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> grub <span class="token comment"># 安装grub</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="grub-customizer"><code>grub-customizer</code><a class="header-anchor" href="#grub-customizer"> ¶</a></h2><p><code>grub-customizer</code>是一个可以帮助我们定制<code>Grub</code>的工具，我们可以通过它来<u>更轻松地</u>修改<code>Grub</code>的各种设置。</p><blockquote><p>Note: 对于<code>Ubuntu</code>用户来说，下载<code>grub-customizer</code>很可能需要添加下载源。因为其默认的下载源内不一定包含<code>grub-customizer</code>。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:danielrichter2007/grub-customizer <span class="token comment"># 添加grub-customizer的下载源</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token comment"># 更新源</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> grub-customizer <span class="token comment"># 安装grub-customizer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>然而<code>Arch</code>用户由于有强大的<code>AUR</code>支持，所以不必担心这个问题。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token parameter variable">-S</span> grub-customizer <span class="token comment"># 安装grub-customizer，以yay为例</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="Config-Grub">Config <code>Grub</code><a class="header-anchor" href="#Config-Grub"> ¶</a></h1><p><code>grub</code>的配置中有一个默认参数<code>GRUB_DISABLE_OS_PROBER=false</code>，它在被设为<code>true</code>时会导致<code>grub</code>不会自动检测其他系统。</p><p>而这个参数在配置文件中被注释掉了，因此<code>grub</code>使用的值是<code>true</code>。</p><p>我们需要打开<code>/etc/default/grub</code>文件，然后取消这一行注释并将其值改为<code>false</code>。</p><p>（这一行一般位于文件的末尾）</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">GRUB_DISABLE_OS_PROBER=false # 取消注释并将值改为false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="Beautify-Grub">Beautify <code>Grub</code><a class="header-anchor" href="#Beautify-Grub"> ¶</a></h1><p>我们可以直接在<code>grub-customizer</code>中修改<code>Grub</code>的各种设置，也可以通过安装主题来美化<code>Grub</code>。</p><p>我们只需要打开<code>grub-customizer</code>，然后到<code>Appearance settings</code>中单独修改<code>Grub</code>的各种设置。</p><p>唯一需要注意的就是请在进行任何修改后点击<code>save</code>保存设置，否则你的修改将不会生效。</p><p>这里就不具体演示单独修改了。</p><h2 id="我做的主题">我做的主题<a class="header-anchor" href="#我做的主题"> ¶</a></h2><p>请看<a href="https://www.gnome-look.org/p/2122684">这里</a>！</p><p>这是我自己做的一系列<code>P5R</code>的<code>Grub</code>主题，其包含了各个主角的<code>ALL OUT ATTACK</code>图片。</p><p>并且提供了<code>安装脚本</code>辅助安装！</p><p><img src="/img/LUT/joker.png" alt="My Grub"></p><h2 id="安装主题">安装主题<a class="header-anchor" href="#安装主题"> ¶</a></h2><p><code>Gnome-look</code>上有很多<code>Grub</code>主题，我们可以到<a href="https://www.gnome-look.org/browse?cat=109&amp;ord=latest">这个网站</a>里寻找自己喜欢的主题进行安装。</p><ul><li>注意：每个主题的安装方法可能不同，有一些提供了安装脚本，而另一些必须要手动安装，所以<strong>请仔细阅读主题自身的安装文档</strong>。</li></ul><p><img src="/img/LUT/01-01.png" alt="Gnome-look:Grub themes"></p><p>这里我们以<code>Distro Grub Themes</code>为例，来介绍一下主题的安装方法。</p><ul><li><a href="https://www.gnome-look.org/p/1482847">Gnome-look: Distro Grub Themes</a></li><li><a href="https://github.com/AdisonCavani/distro-grub-themes">Github: Distro Grub Themes</a></li></ul><h2 id="安装Distro-Grub-Themes">安装<code>Distro Grub Themes</code><a class="header-anchor" href="#安装Distro-Grub-Themes"> ¶</a></h2><h3 id="下载主题">下载主题<a class="header-anchor" href="#下载主题"> ¶</a></h3><p>根据其<code>github</code>上的<code>readme</code>文件，我们跳转到了其<a href="https://k1ng.dev/distro-grub-themes/installation#install-a-pre-made-theme-with-grub-customizer">安装文档</a>（一般来说，主题的安装文档都会在其<code>github</code>上，这是个例外）。</p><p>首先，克隆<code>github</code>上的<code>repo</code>到本地（注意：这里的<code>&lt;path&gt;</code>是你想要克隆到的本地目录，不填写则默认为当前目录）。</p><ul><li>如果你打算尝试多个主题，那么我建议你单独创建一个文件夹用于存放所有主题的文件夹。</li><li>如果<code>git clone</code>失败或者网速太慢，那么你可以直接下载这个<code>repo</code>的压缩包，然后解压到本地。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/AdisonCavani/distro-grub-themes.git <span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token comment"># 克隆repo到本地&lt;path>目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="应用主题">应用主题<a class="header-anchor" href="#应用主题"> ¶</a></h3><p>打开<code>grub-customizer</code>，在<code>Appearance settings</code>中选择<code>custom resolution</code>，并输入你的屏幕分辨率（这里我输入的是<code>1920x1080</code>）。（虽然我的屏幕分辨率是<code>2560x1440</code>，但是适当地降低分辨率可以让<code>Grub</code>的字体更大更清晰）</p><p>然后点击加号，将右下角的<code>Archieve files</code>改为<code>All files</code>，然后找到我们之前克隆到本地的<code>repo</code>（默认打开时的路径可能在<code>/root</code>目录下，你或许需要手动切换到<code>/home</code>下去找到你的<code>repo</code>）。</p><p><img src="/img/LUT/01-02.png" alt="Mint Grub"></p><p>在这个<code>repo</code>中有一个<code>themes</code>文件夹，里面存放了所有的主题，我们选择一个主题文件（比如<code>mint.tar</code>）双击它即可。</p><p>之后在<code>grub-customizer</code>中点击<code>save</code>保存设置，然后重启电脑即可看到新的<code>Grub</code>主题了。</p><h3 id="效果展示">效果展示<a class="header-anchor" href="#效果展示"> ¶</a></h3><p><img src="/img/LUT/01-03.jpg" alt="Mint Grub"></p><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>Congratulations! 有用的知识又增加了一点点！</p><p>如果你还不满足于此，那么你可以试试<code>Gnome-look</code>寻找更多的<code>Grub</code>主题，甚至尝试自己制作主题！</p><p>Have fun! 😉</p><hr><blockquote><p>下一节： <a href="/2023/06/14/LUT-02-zsh/" title="「LUT」02 zsh-更漂亮的terminal">「LUT」02 zsh-更漂亮的terminal</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux Useful Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>tricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」05 Hexo中的Markdown特殊用法</title>
    <link href="/2023/05/08/R-EB-05-Hexo-Markdown/"/>
    <url>/2023/05/08/R-EB-05-Hexo-Markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>在上一节中，我们已经将我们的博客网站部署到了<code>Github Page</code>上。</p><p>那么现在，我们需要做的事就是编写一些博客文章了。</p><p><code>Hexo</code>支持使用<code>Markdown</code>来编写博客文章，关于<code>Markdown</code>的基本用法在此就不多赘述。</p><p>这一节关键要看一些<code>Hexo</code>中的<code>Markdown</code>特殊用法。</p><h1 id="1-图片">1. 图片<a class="header-anchor" href="#1-图片"> ¶</a></h1><p><code>Hexo</code>中的图片引用与<code>Markdown</code>中的图片引用一样，都是使用<code>![]()</code>。</p><p>不过<code>Hexo</code>中<strong>本地引用</strong>的引用规则与<code>Markdown</code>中的引用规则有所不同。</p><h2 id="1-1-从source-img文件夹中引用图片">1.1 从source/img文件夹中引用图片<a class="header-anchor" href="#1-1-从source-img文件夹中引用图片"> ¶</a></h2><p>一般来讲，我们会在<code>markdown</code>文件的同级目录下创建一个<code>img</code>文件夹，然后将图片放在<code>img</code>文件夹中，然后在<code>markdown</code>文件中使用<code>![]()</code>来引用图片。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── blog01.md└── img    └── pic01.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>如果我想在<code>blog01.md</code>中引用<code>img</code>文件夹中的<code>pic01.jpg</code>，那么我可以这样写：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">my picture</span>](<span class="token url">img/pic01.jpg</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>或者</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">my picture</span>](<span class="token url">./img/pic01.jpg</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>但是，很可惜，这种写法在<code>Hexo</code>中是<strong>无效的</strong>。</p><p>我们需要把路径改写为绝对路径：（加上一个<code>/</code>）</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">my picture</span>](<span class="token url">/img/pic01.jpg</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这是因为<code>hexo</code>在部署到<code>Github Page</code>时，会将<code>source</code>以及<code>public</code>文件夹中的内容都按原来的格式放在同一目录下，那个目录就是我们的博客网站的根目录。</p><p>也就是说<code>public/img</code>会被放在<code>/img</code>目录下，因此我们需要使用绝对路径来引用图片。</p><h2 id="1-2-「替代方案1」开启post-asset-folder功能-复杂">1.2 「替代方案1」开启<code>post_asset_folder</code>功能 - 复杂<a class="header-anchor" href="#1-2-「替代方案1」开启post-asset-folder功能-复杂"> ¶</a></h2><p><code>Hexo</code>配置文件中有一个默认关闭的功能<code>post_asset_folder</code>，它允许我们在<code>markdown</code>文件的同级目录下创建一个<code>同名文件夹</code>，然后将图片放在<code>同名文件夹</code>中，然后在<code>markdown</code>文件中使用<code>![]()</code>来引用图片。</p><p>然而，图片路径的写法与之前的不同，我们只能写图片的文件名。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── blog01.md└── blog01    └── pic01.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">my picture</span>](<span class="token url">pic01.jpg</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>虽然终于可以显示图片了，但是如果我们为每一个博客都创建一个<code>同名文件夹</code>，那么我们的<code>source</code>文件夹会变得非常的杂乱（虽然我一开始也一直在用这种方法😅）。</p><h2 id="1-3-「替代方案2」使用public-img文件夹中的图片-推荐">1.3 「替代方案2」使用<code>public/img</code>文件夹中的图片 - 推荐<a class="header-anchor" href="#1-3-「替代方案2」使用public-img文件夹中的图片-推荐"> ¶</a></h2><p>但是！就在刚刚（没错，就是为了写这一篇文章，我刚刚去测试了许多种图片引用方法），我发现我们的可以直接引用<code>public</code>文件夹中的图片！</p><p>这使用的是一种绝对引用，我们可以这样写：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">my picture</span>](<span class="token url">/img/pic01.jpg</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这样的话我们只需要将图片放在<code>public/img</code>文件夹中，就可以方便地引用了。</p><blockquote><p>注意：<code>public</code>文件夹会被<code>hexo clean</code>清空。我的解决方案是创建一个脚本用于将复制我存储图片的文件夹到<code>public</code>文件夹中。<br>我把<code>hexo g</code>和这个脚本作为一个<code>alias</code>放在了<code>.zshrc</code>中，这样我每次<code>hexo g</code>的时候，图片就会自动复制到<code>public</code>文件夹中了。</p><p>（事实上我会先把文章写在博客文件夹的外面，然后用另一个脚本用于同步所有文章到<code>source</code>文件夹中。我还有一个用于同步<code>config</code>设置的脚本。当然，这些都不是完全必要的，我只是觉得这样更方便一些。）</p></blockquote><blockquote><ul><li><code>zsh</code>是一种类似于<code>Linux</code>默认终端<code>bash</code>的终端，而<code>.zshrc</code>即<code>zsh</code>的配置文件。</li><li><code>alias</code>是<code>Linux</code>中的一种特有的命令，它允许你在你使用的终端中创建一个自定义的命令（修改配置文件），让你更方便地使用你的命令（组合）。</li></ul></blockquote><h2 id="1-4-弊端">1.4 弊端<a class="header-anchor" href="#1-4-弊端"> ¶</a></h2><p>无论使用以上哪一种方法，都有一个弊端，那就是我们无法在<code>markdown</code>文件中预览图片。</p><p>不过既然我们最终都要将博客发布，那么我们完全可以使用<code>hexo s</code>预览其本地效果，这也方便我们检查博客在网页上的显示效果。</p><h2 id="1-5-非markdown语法的图片引用">1.5 非<code>markdown</code>语法的图片引用<a class="header-anchor" href="#1-5-非markdown语法的图片引用"> ¶</a></h2><p><code>Hexo</code>还有一种以<code>&#123;% asset_img [图片名] [图片描述] %&#125;</code>的方式来引用图片的方法，但是这种方法在<code>markdown</code>文件中是无效的，只能在<code>html</code>文件中使用，所以我不喜欢这种方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% asset_img pic01.jpg my picture %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="2-如何使用emoji">2. 如何使用<code>emoji</code><a class="header-anchor" href="#2-如何使用emoji"> ¶</a></h1><p>我平时使用<code>VSCode</code>来编写<code>markdown</code>文件，有时也会在里面加一些<code>emoji</code>。😄</p><p>平时在逛<code>Github</code>的时候，你也能在一些<code>README.md</code>文件中看到一些<code>emoji</code>。📚</p><p>我本以为既然我们使用了<code>Github Page</code>，那么我们也可以在我们的博客中使用<code>emoji</code>，但是我发现并不是这样的。😓</p><p>我在网上搜索了一下，给出的解决方案是：</p><ol><li>卸载原有的<code>hexo-renderer-marked</code>插件</li><li>安装<code>markdown-it-emoji</code>和<code>hexo-renderer-markdown-it</code>插件</li></ol><h2 id="2-1-卸载与安装插件">2.1 卸载与安装插件<a class="header-anchor" href="#2-1-卸载与安装插件"> ¶</a></h2><p>在你的博客根目录下，使用<code>npm</code>进行卸载与安装。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> un hexo-renderer-marked <span class="token parameter variable">--save</span><span class="token function">npm</span> i hexo-renderer-markdown-it markdown-it-emoji <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="2-2-修改-config-yml文件">2.2 修改<code>_config.yml</code>文件<a class="header-anchor" href="#2-2-修改-config-yml文件"> ¶</a></h2><p>在<code>_config.yml</code>文件中，添加关于<code>markdown-it-emoji</code>的配置。（可以直接粘贴在最下方）</p><p>下面是我自己的配置，具体设置请参考<a href="https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki">官方文档</a></p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Markdown-it config</span><span class="token comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span><span class="token key atrule">markdown</span><span class="token punctuation">:</span>  <span class="token key atrule">render</span><span class="token punctuation">:</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xhtmlOut</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">breaks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">linkify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">typographer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">quotes</span><span class="token punctuation">:</span> <span class="token string">'“”‘’'</span>  <span class="token key atrule">plugins</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>abbr    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>footnote    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>ins    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sub    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sup    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>emoji      <span class="token key atrule">anchors</span><span class="token punctuation">:</span>    <span class="token key atrule">level</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">collisionSuffix</span><span class="token punctuation">:</span> <span class="token string">'v'</span>    <span class="token comment"># If `true`, creates an anchor tag with a permalink besides the heading.</span>    <span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">permalinkClass</span><span class="token punctuation">:</span> header<span class="token punctuation">-</span>anchor    <span class="token key atrule">permalinkSide</span><span class="token punctuation">:</span> <span class="token string">'right'</span>    <span class="token key atrule">permalinkSymbol</span><span class="token punctuation">:</span> <span class="token string">'  ~'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>配置好这些之后，我们就可以愉快地在博客中使用<code>emoji</code>了。🎉</p><ul><li>如果你重新<code>hexo g &amp;&amp; hexo s</code>仍然无法预览<code>emoji</code>，那么请尝试重启浏览器或者对你要预览的文件进行修改。</li></ul><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>现在，我们可以愉快地在博客中使用<code>emoji</code>了。🎉</p><p>在Hexo中使用emoji，为你的博客增添更多乐趣吧！😃❤️</p><p>下一节，更换主题，让我们的博客更加美观吧！😎</p><p>Have fun! 😉</p><blockquote><p>上一节： <a href="/2023/05/07/R-EB-04-Push-to-github/" title="「建站」04 将Hexo部署到Github Page">「建站」04 将Hexo部署到Github Page</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」04 将Hexo部署到Github Page</title>
    <link href="/2023/05/07/R-EB-04-Push-to-github/"/>
    <url>/2023/05/07/R-EB-04-Push-to-github/</url>
    
    <content type="html"><![CDATA[<!-- # 将Hexo部署到Github Page- 本文编辑时间：2023.05.07 --><h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>在上一节中，我们已经安装好了<code>Hexo</code>并在本地预览了我们的博客网站。</p><p>那么在编辑我们的博客之前，不妨先将它部署到<code>Github Page</code>上吧！（本节不涉及域名解析等自定义域名的内容）</p><blockquote><p><code>Github Page</code>是<code>Github</code>提供的一个静态网站托管服务，我们可以将我们的博客网站部署到<code>Github Page</code>上，这样我们就可以通过<code>Github Page</code>来访问我们的博客网站了。</p></blockquote><h1 id="0-注意">0. 注意<a class="header-anchor" href="#0-注意"> ¶</a></h1><p>我会用<code>&lt;&lt;&gt;&gt;</code>来表示每个人情况不同的内容。（如每个人的路径与邮箱）</p><h1 id="1-修改配置文件">1. 修改配置文件<a class="header-anchor" href="#1-修改配置文件"> ¶</a></h1><p>我们需要修改<code>Hexo</code>的配置文件<code>_config.yml</code>，让<code>Hexo</code>知道我们要将博客网站部署到<code>Github Page</code>上。（也可以顺便修改一下博客网站的标题、描述等信息）</p><blockquote><p>具体的参数信息可以参考<a href="https://hexo.io/zh-cn/docs/configuration">Hexo官网</a>。</p></blockquote><h2 id="1-1-Deployment">1.1 Deployment<a class="header-anchor" href="#1-1-Deployment"> ¶</a></h2><p>首先我们找到<code>Deployment</code>这一项（在最下方），然后对其进行补充与修改。</p><blockquote><p>注释里面已经给了官<a href="https://hexo.io/docs/one-command-deployment">网链接啦</a></p></blockquote><p>我们要将<code>deploy</code>中的<code>type</code>改为<code>git</code>，并且将<code>repo</code>改为我们的<code>Github</code>仓库地址。（地址可以通过<code>Github</code>仓库的<code>Code</code>按钮来获取）</p><p><img src="/img/R_BE/04-1.png" alt="Code-HTTPS"></p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/&lt;&lt;你的Github用户名<span class="token punctuation">></span><span class="token punctuation">></span>/&lt;&lt;你的仓库地址<span class="token punctuation">></span><span class="token punctuation">></span>.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：一些老教程会将<code>branch</code>设置为<code>master</code>，但是从2020年开始，<code>Github</code>已经将默认分支改为<code>main</code>了，所以我们需要将<code>branch</code>设置为<code>main</code>。</p><p><em>向制作老教程的前辈们致敬！</em></p></blockquote><h2 id="1-2-URL">1.2 URL<a class="header-anchor" href="#1-2-URL"> ¶</a></h2><p>然后我们需要将<code>Hexo</code>的<code>_config.yml</code>文件中的<code>url</code>修改为我们的<code>Github Page</code>地址。</p><p>找到<code>url</code>这一项（靠近最上方），然后将其修改为<code>https://&lt;&lt;你的Github用户名&gt;&gt;.github.io/&lt;&lt;你的仓库地址&gt;&gt;/</code>即可。（或者说<code>https://&lt;&lt;你的仓库名&gt;&gt;.git</code>）</p><blockquote><p>也强烈推荐通过注释里给出的<a href="https://username.github.io/project">官网链接</a>来了解更多配置信息。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># URL</span><span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//&lt;&lt;你的仓库名<span class="token punctuation">></span><span class="token punctuation">></span>.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-3-其他（optional）">1.3 *其他（optional）<a class="header-anchor" href="#1-3-其他（optional）"> ¶</a></h2><p>我们也可以修改一下博客网站的标题、描述等信息。</p><p>找到最上方的<code>Site</code>这一项，然后按需修改即可。</p><ul><li>注意，这里的<code>language</code>指的是网站的语言，而不是博客的语言。具体填入什么需要根据你所选的<code>主题</code>来定。（主题会在下一节中介绍，如果你不知道该填什么，可以先留着默认的<code>en</code>）</li><li><code>timezone</code>指的是时区，对于中国大陆来说，可以填<code>Asia/Shanghai</code>。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> &lt;&lt;你的博客标题<span class="token punctuation">></span><span class="token punctuation">></span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> &lt;&lt;你的博客副标题<span class="token punctuation">></span><span class="token punctuation">></span><span class="token key atrule">description</span><span class="token punctuation">:</span> &lt;&lt;你的博客描述<span class="token punctuation">></span><span class="token punctuation">></span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> &lt;&lt;你的博客关键词<span class="token punctuation">></span><span class="token punctuation">></span><span class="token key atrule">author</span><span class="token punctuation">:</span> &lt;&lt;你的名字<span class="token punctuation">></span><span class="token punctuation">></span><span class="token key atrule">language</span><span class="token punctuation">:</span> en<span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="2-安装hexo-deployer-git（不是apt安装的git）">2. 安装<code>hexo-deployer-git</code>（不是apt安装的git）<a class="header-anchor" href="#2-安装hexo-deployer-git（不是apt安装的git）"> ¶</a></h1><p>我们需要安装<code>hexo-deployer-git</code>这个插件，来实现将博客网站部署到<code>Github Page</code>上。</p><ul><li>如果不安装这个插件直接部署的话会报错<code>Deployer not found: git</code>。（在官方文档中也提到这个bug，给出的解决方案就是安装这个插件）</li></ul><p>将路径切换到博客网站的根目录下，然后执行以下命令即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="3-配置git">3. 配置git<a class="header-anchor" href="#3-配置git"> ¶</a></h1><p>距离部署已经不远啦！我们只需要配置一下<code>git</code>就可以啦！</p><ul><li>如果不配置直接进行部署的话，会出现一个<code>*** Please tell me who you are.</code>的提示，可以根据这个提示下给出的命令来配置<code>git</code>。</li></ul><p>也就是下面这两条命令。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"&lt;&lt;你的Github用户名>>"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"&lt;&lt;你的Github邮箱>>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="4-保存github-token">4. 保存github token<a class="header-anchor" href="#4-保存github-token"> ¶</a></h1><blockquote><p>从2021年8月13日开始，Github将不再接受使用密码进行git操作，所以我们需要使用token来进行git操作。</p></blockquote><p>打开你的<code>Github</code>主页，然后点击右上角的头像，选择<code>Settings</code>，选择最下方的<code>Developer settings</code>。</p><p><img src="/img/R_BE/04-2.png" alt="Developer settings"></p><p>然后选择左侧的<code>Personal access tokens</code>，点击右上角的<code>Generate new token</code>。</p><ul><li><strong>注意，这个token只会显示一次，之后你再打开这个界面就无法再查看它了。<u>请务必将它保存在便于你访问且安全的地方！</u>之后我们每一次更新博客网站都需要用它作为密码来验证。</strong></li></ul><p><img src="/img/R_BE/04-3.png" alt="Generate new token"></p><p>有关<code>token</code>的配置，我们可以将其期限设置为<code>No expiration</code>（当然，<code>Github</code>强烈建议我们设置一个有期限的token，这里根据自己的需求来定）。然后对于<code>Select scopes</code>，我们最低限度只需要勾选<code>repo</code>即可。</p><h1 id="5-部署与更新">5. 部署与更新<a class="header-anchor" href="#5-部署与更新"> ¶</a></h1><p>让我们先回到博客网站的根目录下。</p><p>接下来要介绍平时更新博客时常用的几个命令。</p><ul><li><p><code>hexo g</code>(<code>hexo generate</code>)：生成静态文件（public文件夹）。</p></li><li><p><code>hexo d</code>(<code>hexo deploy</code>)：部署网站到<code>Github Page</code>上。</p></li><li><p><code>hexo cl</code>(<code>hexo clean</code>)：清除缓存文件（db.json）和已生成的静态文件（public文件夹）。（它不会删除<code>source</code>文件夹中的文件，所以不用担心会误删文章）</p><ul><li>我们通过<code>hexo d</code>命令部署网站时，同步到<code>Github</code>仓库的文件夹就是<code>public</code>文件夹。</li></ul></li><li><p><code>hexo s</code>(<code>hexo server</code>)：启动本地服务器，用于预览网站。（默认端口为<code>4000</code>，可以通过<code>hexo s -p &lt;port&gt;</code>来指定端口）</p></li></ul><p>请记住这几个命令，我们每次会经常用到它们。</p><p>以下是一个常用的更新博客的流程，注意，以下所有命令都需要在<strong>博客网站的根目录</strong>下执行！</p><h2 id="5-1-清除缓存文件和已生成的静态文件">5.1 清除缓存文件和已生成的静态文件<a class="header-anchor" href="#5-1-清除缓存文件和已生成的静态文件"> ¶</a></h2><p>我不确定这一步是否必要，但是我每次更新博客时都会执行这一步。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="5-2-生成静态文件">5.2 生成静态文件<a class="header-anchor" href="#5-2-生成静态文件"> ¶</a></h2><p>将我们对配置的修改、对文章的修改等等都生成为静态文件到<code>public</code>文件夹中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="5-3-部署网站到Github-Page上">5.3 部署网站到Github Page上<a class="header-anchor" href="#5-3-部署网站到Github-Page上"> ¶</a></h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这一步会要求你输入<code>Github</code>的用户名和密码，然而：</p><ul><li>用户名是区分大小写的！</li><li>这里的密码并不是你的<code>Github</code>密码，而是你在上一步中保存的<code>Github token</code>！</li></ul><p>对了！如果执行<code>hexo d</code>后卡住，没有出现有关<code>Github</code>的提示，那么可以多次尝试<code>Ctrl+C</code>来终止命令，然后再重新执行<code>hexo d</code>。</p><p>如果一切顺利的话，你的博客网站已经部署到<code>Github Page</code>上了。</p><h2 id="5-4-更新">5.4 更新<a class="header-anchor" href="#5-4-更新"> ¶</a></h2><p>自此往后，每次更新博客网站时，我们只需要执行以下两步即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>如果遇到一些地方没有同步的情况，可以尝试先执行<code>hexo cl</code>再执行以上两步。</p><h1 id="6-预览网站">6. 预览网站<a class="header-anchor" href="#6-预览网站"> ¶</a></h1><p>在短暂的等待后（部署后需要一定的时间才能在网上访问到你的博客网站），你可以查看你的<code>Github</code>仓库是否更新，也可以直接在浏览器中输入<code>&lt;&lt;你的仓库名&gt;&gt;</code>（<code>&lt;&lt;你的用户名&gt;&gt;.github.io</code>）来访问你的博客网站。</p><p>不出意外的话，你已经可以在网页中浏览到<code>source</code>文件夹中自带的<code>Hello World</code>文章了。</p><p>之后我们的主要工作就是在<code>source</code>文件夹中添加文章啦！</p><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>Congratulations！🎉</p><p>至此我们已经了解了部署与更新博客的全部流程啦！\(≧▽≦)/~</p><p>那么，下一节！我们来讲讲使用这个框架写博客时会遇到的一些问题吧！（比如如何插入图片、如何使用<code>emoji</code>等等）</p><p>有关域名解析的问题，我想在最后面再提，因为我觉得这只是最后的装点～</p><p>Have fun! 😉</p><blockquote><p>上一节： <a href="/2023/05/07/R-EB-03-Hexo-init/" title="「建站」03 使用Hexo初步创建博客网站与本地预览">「建站」03 使用Hexo初步创建博客网站与本地预览</a></p></blockquote><blockquote><p>下一节： <a href="/2023/05/08/R-EB-05-Hexo-Markdown/" title="「建站」05 Hexo中的Markdown特殊用法">「建站」05 Hexo中的Markdown特殊用法</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>node</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」03 使用Hexo初步创建博客网站与本地预览</title>
    <link href="/2023/05/07/R-EB-03-Hexo-init/"/>
    <url>/2023/05/07/R-EB-03-Hexo-init/</url>
    
    <content type="html"><![CDATA[<!-- # 使用Hexo初步创建博客网站与本地预览- 本文编辑时间：2023.05.07 --><h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>我们在上一节做了许多工作呢，辛苦啦～ 😄</p><p>这一节会比上一节有趣一些，我们将会使用<code>Hexo</code>来创建我们的博客网站，并在本地预览它。</p><blockquote><p><code>Hexo</code>是一个基于<code>Node.js</code>的静态博客框架。</p></blockquote><h1 id="1-选一个用于存储博客网站文件的文件夹">1. 选一个用于存储博客网站文件的文件夹<a class="header-anchor" href="#1-选一个用于存储博客网站文件的文件夹"> ¶</a></h1><p>这一步很简单，你只需要在你的电脑上选一个<code>风水宝地</code>来存储你的博客网站文件就可以了。比如说我选了<code>~/mystuff/blog</code>。</p><p>之后我们会把所有的博客网站文件都放在这个文件夹里。</p><h1 id="2-安装Hexo">2. 安装Hexo<a class="header-anchor" href="#2-安装Hexo"> ¶</a></h1><blockquote><p>详细步骤我们可以在<code>hexo</code>的<a href="https://hexo.io/zh-cn/index.html">官网</a>上找到。</p></blockquote><p>在任意位置打开你的终端，运行以下命令来安装<code>Hexo</code>：</p><ul><li>这个命令会在你的电脑上全局安装<code>Hexo</code>。</li><li><code>npm</code>是<code>Node.js</code>的包管理器，我们之前使用<code>nvm</code>安装了<code>Node.js</code>时，<code>npm</code>也一起安装了。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="3-初始化Hexo">3. 初始化Hexo<a class="header-anchor" href="#3-初始化Hexo"> ¶</a></h1><p>让我们回到我们之前选好的<code>风水宝地</code>，也就是<code>~/mystuff/blog</code>，在这个文件夹里运行以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个命令会<code>~/mystuff/blog</code>里创建一些文件，这些文件就是我们博客网站的初始文件。</p><p>在短暂的等待之后，<code>hexo</code>就已经帮我们创建好了博客网站的初始文件了。</p><h2 id="3-1-另一种方式">3.1 另一种方式<a class="header-anchor" href="#3-1-另一种方式"> ¶</a></h2><p>你也可以在这个命令后面加上你的博客网站的名字，比如说：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init myblog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这样<code>hexo</code>就会在<code>~/mystuff/blog</code>里创建一个名为<code>myblog</code>的文件夹，然后把博客网站的初始文件放在这个文件夹里。</p><p>如果你用这种方式，那么你的“博客网站文件夹”就是<code>~/mystuff/blog/myblog</code>了。</p><h1 id="4-安装依赖">4. 安装依赖<a class="header-anchor" href="#4-安装依赖"> ¶</a></h1><p>无论你用了以上的那种方法，现在你需要在你的<strong>博客网站文件夹</strong>里运行以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="5-预览博客网站">5. 预览博客网站<a class="header-anchor" href="#5-预览博客网站"> ¶</a></h1><p>想要看看我们折腾半天到底干了些什么吗？</p><p>现在你只需要在<code>~/mystuff/blog</code>里运行以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后打开浏览器，输入terminal里显示的网址（可能是<code>http://localhost:4000</code>），就可以看到我们的博客网站啦！</p><p><img src="/img/R_BE/03-1.png" alt="hexo"></p><ul><li>Tip：你可以使用<code>hexo s</code>来代替<code>hexo server</code>，并且你可以在<code>hexo s</code>后面加上<code>-p</code>来指定端口，比如说<code>hexo s -p 5000</code>。</li></ul><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>恭喜！🎉</p><p>看到我们的博客网站在本地运行，这应该是一件很有意思的事情吧！</p><p>但是，还有更有意思的事情等着我们呢！本地预览只是我们的第一步，接下来我们还得知道如何编辑博客内容📝，如何发布博客网站🌐，以及如何更换主题🎨等等…</p><p>Have fun! 😉</p><blockquote><p>上一节： <a href="/2023/05/07/R-EB-02-Github-SSH-node-basic/" title="「建站」02 Github &amp; SSH &amp; node 基本配置">「建站」02 Github &amp; SSH &amp; node 基本配置</a></p></blockquote><blockquote><p>下一节： <a href="/2023/05/07/R-EB-04-Push-to-github/" title="「建站」04 将Hexo部署到Github Page">「建站」04 将Hexo部署到Github Page</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>node</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」02 Github &amp; SSH &amp; node 基本配置</title>
    <link href="/2023/05/07/R-EB-02-Github-SSH-node-basic/"/>
    <url>/2023/05/07/R-EB-02-Github-SSH-node-basic/</url>
    
    <content type="html"><![CDATA[<!-- # Github & SSH & node 基本配置- 本文编辑时间：2023.05.07 --><h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>想要制作一个个人博客网站，我们需要这些东西的帮助：</p><blockquote><ul><li><code>Github</code>：用来存储我们的网站的源代码（也有其他替代方案）</li><li><code>SSH</code>：用来连接我们的电脑和<code>Github</code></li><li><code>node</code>：即<code>Node.js</code>用来运行<code>Hexo</code>（下一节会介绍）</li></ul></blockquote><p>我们将会在这一节中介绍如何使用对以上的3个工具进行基本配置。</p><h1 id="0-Note">0. Note!<a class="header-anchor" href="#0-Note"> ¶</a></h1><p>我会用<code>&lt;&lt;&gt;&gt;</code>来表示每个人情况不同的内容。（如每个人的路径与邮箱）</p><h1 id="1-Prerequirements">1. Prerequirements<a class="header-anchor" href="#1-Prerequirements"> ¶</a></h1><p>确保你已经在你的电脑上安装了<code>git</code>和<code>ssh</code>。</p><p>在你的终端中运行<code>git</code>和<code>ssh</code>。如果出现<code>command not found</code>之类的内容的话说明你还没有安装它们。对于我的系统（<code>Linux Mint 21.1</code>），我可以使用以下命令来安装它们：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="2-定义git的用户名和邮箱与生成SSH密钥">2. 定义git的用户名和邮箱与生成SSH密钥<a class="header-anchor" href="#2-定义git的用户名和邮箱与生成SSH密钥"> ¶</a></h1><h2 id="2-1-定义git的用户名和邮箱">2.1 定义git的用户名和邮箱<a class="header-anchor" href="#2-1-定义git的用户名和邮箱"> ¶</a></h2><p>在terminal中运行以下命令来定义你的用户名和邮箱：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token operator">&lt;&lt;</span>你的用户名<span class="token operator">>></span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token operator">&lt;&lt;</span>你的邮箱<span class="token operator">>></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>否则你在使用<code>git</code>时会出现以下错误：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*** Please tell me <span class="token function">who</span> you are.Run  <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"  git config --global user.name "</span>to <span class="token builtin class-name">set</span> your account's default identity.Omit <span class="token parameter variable">--global</span> to <span class="token builtin class-name">set</span> the identity only <span class="token keyword">in</span> this repository.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="2-2-生成SSH密钥">2.2 生成SSH密钥<a class="header-anchor" href="#2-2-生成SSH密钥"> ¶</a></h2><ul><li>SSH密钥用于连接你的电脑和<code>Github</code>。</li></ul><p>在terminal中运行以下命令来生成你的SSH密钥：</p><ul><li>注意：你在这里输入的邮箱应该和你注册<code>Github</code>账号时使用的邮箱相同。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token operator">&lt;&lt;</span>你的邮箱<span class="token operator">>></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>其中：</p><ul><li><code>-t</code>：指定密钥类型，这里我们使用<code>rsa</code>。</li><li><code>-C</code>：指定注释，这里我们使用你的邮箱。</li></ul><p>然后按照提示来生成你的SSH密钥。（为了方便，你可以直接按<code>Enter</code>来使用默认值。但你也可以指定你的SSH密钥的路径、名称和密码。但一定要你记下来。）</p><p>之后你会得到两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>，它们分别代表你的私钥和公钥。你可以在你指定的路径中找到它们。（默认路径是<code>~/.ssh/id_rsa</code>和<code>~/.ssh/id_rsa.pub</code>）</p><h1 id="3-将SSH密钥添加到Github">3. 将SSH密钥添加到Github<a class="header-anchor" href="#3-将SSH密钥添加到Github"> ¶</a></h1><ul><li>添加SSH密钥到Github的目的是为了让你的电脑和Github之间可以互相认证。</li></ul><h2 id="3-1-复制你的公钥">3.1 复制你的公钥<a class="header-anchor" href="#3-1-复制你的公钥"> ¶</a></h2><p>在terminal中运行以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>你的公钥的路径<span class="token operator">>></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后你会看到你的公钥的内容。复制它。</p><h2 id="3-2-将你的公钥添加到Github">3.2 将你的公钥添加到Github<a class="header-anchor" href="#3-2-将你的公钥添加到Github"> ¶</a></h2><p>进入<code>Github</code> -&gt; <code>Settings</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code>并粘贴你的公钥以添加它。</p><h1 id="4-测试你的SSH密钥">4. 测试你的SSH密钥<a class="header-anchor" href="#4-测试你的SSH密钥"> ¶</a></h1><p>在terminal中运行以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> <span class="token operator">&lt;&lt;</span>你的邮箱<span class="token operator">>></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果你看到类似<code>Hi &lt;&lt;你的用户名&gt;&gt;! You've successfully authenticated, but GitHub does not provide shell access.</code>的内容，那么你已经成功地将你的SSH密钥添加到了Github。</p><ul><li><p>如果你的terminal卡在这里，可能是因为网络不好。</p></li><li><p>不需要一直等下去，鬼知道网络什么时候能好。只要不报错，建议直接跳到下一步。</p></li></ul><h1 id="5-创建一个新的仓库（有特殊命名要求）">5. 创建一个新的仓库（有特殊命名要求）<a class="header-anchor" href="#5-创建一个新的仓库（有特殊命名要求）"> ¶</a></h1><p>让我们在<code>Github</code>上创建一个新的仓库并将它命名为<code>&lt;&lt;你的用户名&gt;&gt;.github.io</code>。（建议先勾选<code>Add a README file</code>，之后的<code>hexo deploy</code>的流程会自动删除它的。）</p><ul><li><strong>非常重要</strong>：我们需要使用<code>Github Page</code>，所以<ol><li>你的仓库的名字必须是<code>&lt;&lt;你的用户名&gt;&gt;.github.io</code>，不要使用其他名字。</li><li>这个仓库必须是<strong>公开的</strong>！</li><li>在仓库创建完毕后，你需要在仓库的<code>Settings</code> -&gt; <code>Pages</code>中将<code>Source</code>设置为<code>main</code>，并点击<code>Save</code>。（有时会自动设置好，我们需要确认一下。）</li></ol></li></ul><h1 id="6-安装node">6. 安装node<a class="header-anchor" href="#6-安装node"> ¶</a></h1><ul><li><code>node</code>用于运行<code>Hexo</code>。</li></ul><p>这里我们有两种选择：</p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>直接安装<code>node</code></td><td>简单</td><td>无法自定义<code>node</code>的版本</td></tr><tr><td>使用<code>nvm</code>安装<code>node</code></td><td>可以自定义<code>node</code>的版本</td><td>略显繁琐</td></tr></tbody></table><p>如果只是想简单地使用<code>Hexo</code>的话，直接安装<code>node</code>即可。</p><h2 id="6-1-直接安装node">6.1 直接安装<code>node</code><a class="header-anchor" href="#6-1-直接安装node"> ¶</a></h2><p>在terminal中运行以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>如果你已经使用<code>nvm</code>安装过<code>node</code>，那么这里没有提示<code>node</code>已安装是正常的。（因为<code>apt</code>和<code>nvm</code>没有共享安装信息）</li></ul><p>然后运行以下命令来，根据是否输出版本号来判断是否安装成功：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="6-2-使用nvm安装node">6.2 使用<code>nvm</code>安装<code>node</code><a class="header-anchor" href="#6-2-使用nvm安装node"> ¶</a></h2><ul><li><code>nvm</code>即<code>node version manager</code>，用于管理<code>node</code>的版本。</li></ul><blockquote><p>我们可以按照<code>nvm</code>的<a href="https://github.com/nvm-sh/nvm">官方文档</a>来安装它。</p></blockquote><p>大致过程是<code>下载nvm</code> -&gt; <code>安装nvm</code> -&gt; <code>安装node</code>。</p><h3 id="6-2-1-下载与安装nvm">6.2.1. 下载与安装<code>nvm</code><a class="header-anchor" href="#6-2-1-下载与安装nvm"> ¶</a></h3><blockquote><p>见官方文档中<code>Install &amp; Update Script</code>一节。</p></blockquote><ul><li>具体命令以官方文档为准！！！</li></ul><p>运行以下两个命令中的任一个来下载并安装<code>nvm</code>：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>或者</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="6-2-2-安装node">6.2.2. 安装<code>node</code><a class="header-anchor" href="#6-2-2-安装node"> ¶</a></h3><blockquote><p>见官方文档中<code>Usage</code>一节。</p></blockquote><p>有多种方式安装<code>node</code>，这里我们使用最简单的一种即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">install</span> <span class="token function">node</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>安装完成后，运行以下命令来判断是否安装成功：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果输出了版本号，那么说明安装成功。</p><h3 id="6-2-3-补充">6.2.3. 补充<a class="header-anchor" href="#6-2-3-补充"> ¶</a></h3><p>如有需要，请参考官方文档来使用<code>nvm</code>。（<em>Recommend</em>）</p><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>做到这里，我们已经完成了“基础设施建设”。</p><p>下一步我们就要开始使用<code>Hexo</code>来建立我们的博客网站啦！</p><p>Have fun! 😉</p><blockquote><p>上一节： <a href="/2023/05/06/R-EB-01-Prerequirements/" title="「建站」01 准备工作 - 建立自己的博客网站">「建站」01 准备工作 - 建立自己的博客网站</a> <br></p></blockquote><blockquote><p>下一节： <a href="/2023/05/07/R-EB-03-Hexo-init/" title="「建站」03 使用Hexo初步创建博客网站与本地预览">「建站」03 使用Hexo初步创建博客网站与本地预览</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>ssh</tag>
      
      <tag>nvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「建站」01 准备工作 - 建立自己的博客网站</title>
    <link href="/2023/05/06/R-EB-01-Prerequirements/"/>
    <url>/2023/05/06/R-EB-01-Prerequirements/</url>
    
    <content type="html"><![CDATA[<!-- # 准备工作 - 建立自己的博客网站 --><!-- - 本文编辑时间：2023.05.06 --><h1 id="Greetings">Greetings!<a class="header-anchor" href="#Greetings"> ¶</a></h1><p>你，有想过建立一个自己的博客网站吗？ 🤔</p><p>我在几年前就有了这个想法，但是碍于时间与技术的原因，一直没有实现… 😢</p><p>但是现在，</p><p>Hi，欢迎来到我的博客！😉</p><h1 id="Introduction">Introduction<a class="header-anchor" href="#Introduction"> ¶</a></h1><p>嗨！这里是阿乎的博客！(&gt; ▽ &lt;) /~</p><p>这是一个记录了我在<code>Linux</code>上使用<code>Github Page</code>和<code>Hexo</code>建立自己博客网站的系列。（网上也有很多关于<code>Windows</code>的教程。无论是哪个系统，它们的原理都是基本相同的。）</p><p><img src="/img/R_BE/01-1.png" alt="My Mint"></p><p><span></span></p><p>这个系列既是我建站过程的记录，也是一份<strong>粗略的</strong>建站教程（或许最需要看的是未来的我自己？毕竟自己搭的时候也是看了许多不同的教程，我可能最需要的是一篇我自己总结的）。</p><p>我并不专业，很多地方可能只是依葫芦画瓢，内容大多也仅供参考。但同时，如果你也想建立一个博客网站的话，我希望我的博客能帮到你。❤️</p><h1 id="What-do-we-need">What do we need<a class="header-anchor" href="#What-do-we-need"> ¶</a></h1><p>建立一个简单的博客并不难。</p><p>在正式开始之前，我们需要：</p><ul><li>一个<code>Github</code>账号</li><li>如果你会用“魔法”的话那就更好了（你懂我的意思，对吧）</li><li>一个<code>域名</code>（optional|如果你希望不用输入繁琐的<code>github.io</code>域名就能访问你的博客的话，那么推荐你购买一个域名）</li></ul><p>最重要的是，你需要有：</p><ul><li><code>耐心</code>：建站的过程不大可能一帆风顺，我们可能会遇到各种各样的问题（网络、配置、代码等等）</li><li><code>热情</code>：如果缺少热情，那么简单的问题或许也会让你觉得很烦躁</li><li><code>查阅资料的能力</code>：遇到问题时，我们需要学会自己去查阅资料，而不是一味的等待别人的回答。我们使用的大部分工具都是开源的，所以我们完全可以通过查阅资料来解决我们的问题</li></ul><h1 id="Summary">Summary<a class="header-anchor" href="#Summary"> ¶</a></h1><p>那么，让我们开启建站之旅吧！🎉</p><p>Have fun! 😉</p><blockquote><p>下一节： <a href="/2023/05/07/R-EB-02-Github-SSH-node-basic/" title="「建站」02 Github &amp; SSH &amp; node 基本配置">「建站」02 Github &amp; SSH &amp; node 基本配置</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>introduction</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
